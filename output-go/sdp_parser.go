// Code generated from sdp.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // sdp

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 258, 2079,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 2, 355, 10, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 6, 3, 366, 10, 3, 13, 3, 14, 3,
	367, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 397, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	5, 7, 404, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 7, 8, 411, 10, 8, 12, 8,
	14, 8, 414, 11, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 421, 10, 9, 12,
	9, 14, 9, 424, 11, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 7, 11, 442,
	10, 11, 12, 11, 14, 11, 445, 11, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 7, 12, 455, 10, 12, 12, 12, 14, 12, 458, 11, 12, 3,
	12, 3, 12, 6, 12, 462, 10, 12, 13, 12, 14, 12, 463, 3, 12, 3, 12, 3, 12,
	5, 12, 469, 10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 6, 13, 479, 10, 13, 13, 13, 14, 13, 480, 3, 14, 3, 14, 3, 14, 3, 14,
	3, 14, 5, 14, 488, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 495,
	10, 14, 3, 14, 3, 14, 7, 14, 499, 10, 14, 12, 14, 14, 14, 502, 11, 14,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 509, 10, 15, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 7, 16, 516, 10, 16, 12, 16, 14, 16, 519, 11, 16, 3, 17,
	3, 17, 3, 17, 7, 17, 524, 10, 17, 12, 17, 14, 17, 527, 11, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 7, 17, 533, 10, 17, 12, 17, 14, 17, 536, 11, 17, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 545, 10, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 18, 6, 18, 552, 10, 18, 13, 18, 14, 18, 553, 3, 18,
	3, 18, 3, 19, 3, 19, 3, 20, 6, 20, 561, 10, 20, 13, 20, 14, 20, 562, 3,
	21, 6, 21, 566, 10, 21, 13, 21, 14, 21, 567, 3, 22, 3, 22, 3, 23, 3, 23,
	3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 5, 25, 579, 10, 25, 3, 26, 3, 26, 6,
	26, 583, 10, 26, 13, 26, 14, 26, 584, 3, 26, 3, 26, 6, 26, 589, 10, 26,
	13, 26, 14, 26, 590, 3, 26, 3, 26, 3, 27, 6, 27, 596, 10, 27, 13, 27, 14,
	27, 597, 3, 27, 6, 27, 601, 10, 27, 13, 27, 14, 27, 602, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 28, 3, 28, 7, 28, 611, 10, 28, 12, 28, 14, 28, 614, 11,
	28, 3, 28, 3, 28, 6, 28, 618, 10, 28, 13, 28, 14, 28, 619, 3, 28, 3, 28,
	3, 28, 6, 28, 625, 10, 28, 13, 28, 14, 28, 626, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 5, 28, 634, 10, 28, 3, 29, 5, 29, 637, 10, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 6, 29, 643, 10, 29, 13, 29, 14, 29, 644, 3, 30, 3, 30, 5,
	30, 649, 10, 30, 3, 31, 3, 31, 3, 32, 6, 32, 654, 10, 32, 13, 32, 14, 32,
	655, 3, 33, 3, 33, 5, 33, 660, 10, 33, 3, 34, 3, 34, 5, 34, 664, 10, 34,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 6,
	35, 676, 10, 35, 13, 35, 14, 35, 677, 3, 36, 3, 36, 7, 36, 682, 10, 36,
	12, 36, 14, 36, 685, 11, 36, 3, 36, 5, 36, 688, 10, 36, 3, 37, 6, 37, 691,
	10, 37, 13, 37, 14, 37, 692, 3, 37, 5, 37, 696, 10, 37, 3, 38, 3, 38, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 727, 10, 39, 3, 40, 7, 40,
	730, 10, 40, 12, 40, 14, 40, 733, 11, 40, 3, 40, 5, 40, 736, 10, 40, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 755, 10, 42, 3, 43, 3,
	43, 3, 43, 3, 43, 5, 43, 761, 10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44,
	5, 44, 768, 10, 44, 3, 45, 3, 45, 3, 46, 3, 46, 3, 47, 3, 47, 3, 48, 3,
	48, 3, 49, 3, 49, 3, 49, 7, 49, 781, 10, 49, 12, 49, 14, 49, 784, 11, 49,
	3, 50, 6, 50, 787, 10, 50, 13, 50, 14, 50, 788, 3, 51, 3, 51, 3, 51, 3,
	51, 5, 51, 795, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 801, 10, 52,
	3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3,
	53, 3, 53, 3, 53, 3, 53, 5, 53, 817, 10, 53, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 3, 54, 5, 54, 827, 10, 54, 3, 55, 3, 55, 3, 55, 5,
	55, 832, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 839, 10, 56,
	5, 56, 841, 10, 56, 3, 56, 5, 56, 844, 10, 56, 3, 57, 3, 57, 3, 57, 5,
	57, 849, 10, 57, 3, 57, 3, 57, 3, 57, 5, 57, 854, 10, 57, 3, 57, 3, 57,
	3, 57, 5, 57, 859, 10, 57, 3, 57, 3, 57, 3, 57, 6, 57, 864, 10, 57, 13,
	57, 14, 57, 865, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 5, 60, 883, 10, 60, 3,
	61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 891, 10, 61, 3, 61, 3, 61,
	3, 61, 3, 61, 5, 61, 897, 10, 61, 5, 61, 899, 10, 61, 3, 62, 3, 62, 3,
	62, 7, 62, 904, 10, 62, 12, 62, 14, 62, 907, 11, 62, 3, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 918, 10, 63, 5, 63, 920,
	10, 63, 3, 64, 3, 64, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 6, 66, 929, 10,
	66, 13, 66, 14, 66, 930, 3, 67, 3, 67, 6, 67, 935, 10, 67, 13, 67, 14,
	67, 936, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 946, 10,
	68, 3, 69, 6, 69, 949, 10, 69, 13, 69, 14, 69, 950, 3, 70, 3, 70, 3, 70,
	3, 70, 3, 70, 3, 70, 5, 70, 959, 10, 70, 3, 71, 3, 71, 7, 71, 963, 10,
	71, 12, 71, 14, 71, 966, 11, 71, 3, 72, 3, 72, 5, 72, 970, 10, 72, 3, 73,
	3, 73, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 6, 74, 981, 10,
	74, 13, 74, 14, 74, 982, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74,
	991, 10, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 76, 5, 76, 1000,
	10, 76, 3, 77, 3, 77, 3, 77, 5, 77, 1005, 10, 77, 3, 78, 5, 78, 1008, 10,
	78, 3, 78, 3, 78, 5, 78, 1012, 10, 78, 3, 78, 7, 78, 1015, 10, 78, 12,
	78, 14, 78, 1018, 11, 78, 3, 78, 5, 78, 1021, 10, 78, 3, 78, 3, 78, 5,
	78, 1025, 10, 78, 3, 79, 3, 79, 3, 79, 5, 79, 1030, 10, 79, 3, 80, 3, 80,
	3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3,
	80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 5, 80, 1053,
	10, 80, 3, 81, 5, 81, 1056, 10, 81, 3, 81, 6, 81, 1059, 10, 81, 13, 81,
	14, 81, 1060, 3, 81, 5, 81, 1064, 10, 81, 3, 82, 6, 82, 1067, 10, 82, 13,
	82, 14, 82, 1068, 3, 82, 3, 82, 6, 82, 1073, 10, 82, 13, 82, 14, 82, 1074,
	7, 82, 1077, 10, 82, 12, 82, 14, 82, 1080, 11, 82, 3, 83, 5, 83, 1083,
	10, 83, 3, 83, 3, 83, 5, 83, 1087, 10, 83, 3, 84, 3, 84, 3, 84, 3, 84,
	3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 5, 84, 1102,
	10, 84, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 1108, 10, 85, 3, 86, 3, 86,
	5, 86, 1112, 10, 86, 3, 87, 5, 87, 1115, 10, 87, 3, 87, 3, 87, 5, 87, 1119,
	10, 87, 3, 87, 7, 87, 1122, 10, 87, 12, 87, 14, 87, 1125, 11, 87, 3, 87,
	5, 87, 1128, 10, 87, 3, 87, 3, 87, 5, 87, 1132, 10, 87, 3, 88, 3, 88, 5,
	88, 1136, 10, 88, 3, 89, 6, 89, 1139, 10, 89, 13, 89, 14, 89, 1140, 3,
	89, 5, 89, 1144, 10, 89, 3, 90, 3, 90, 3, 90, 5, 90, 1149, 10, 90, 3, 90,
	5, 90, 1152, 10, 90, 3, 91, 7, 91, 1155, 10, 91, 12, 91, 14, 91, 1158,
	11, 91, 3, 91, 5, 91, 1161, 10, 91, 3, 91, 6, 91, 1164, 10, 91, 13, 91,
	14, 91, 1165, 3, 91, 5, 91, 1169, 10, 91, 3, 92, 3, 92, 3, 92, 3, 92, 5,
	92, 1175, 10, 92, 3, 93, 3, 93, 3, 93, 5, 93, 1180, 10, 93, 3, 94, 3, 94,
	5, 94, 1184, 10, 94, 3, 94, 7, 94, 1187, 10, 94, 12, 94, 14, 94, 1190,
	11, 94, 3, 94, 5, 94, 1193, 10, 94, 3, 94, 3, 94, 3, 95, 5, 95, 1198, 10,
	95, 3, 95, 6, 95, 1201, 10, 95, 13, 95, 14, 95, 1202, 3, 95, 5, 95, 1206,
	10, 95, 3, 95, 5, 95, 1209, 10, 95, 3, 96, 3, 96, 3, 97, 3, 97, 3, 98,
	3, 98, 3, 98, 5, 98, 1218, 10, 98, 3, 99, 3, 99, 3, 99, 3, 99, 3, 99, 5,
	99, 1225, 10, 99, 3, 100, 3, 100, 3, 100, 3, 100, 7, 100, 1231, 10, 100,
	12, 100, 14, 100, 1234, 11, 100, 3, 101, 3, 101, 5, 101, 1238, 10, 101,
	3, 101, 3, 101, 3, 101, 5, 101, 1243, 10, 101, 7, 101, 1245, 10, 101, 12,
	101, 14, 101, 1248, 11, 101, 3, 102, 5, 102, 1251, 10, 102, 3, 102, 3,
	102, 3, 102, 3, 102, 3, 102, 5, 102, 1258, 10, 102, 3, 103, 3, 103, 3,
	103, 3, 104, 3, 104, 7, 104, 1265, 10, 104, 12, 104, 14, 104, 1268, 11,
	104, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104, 1274, 10, 104, 3, 104, 3,
	104, 5, 104, 1278, 10, 104, 7, 104, 1280, 10, 104, 12, 104, 14, 104, 1283,
	11, 104, 3, 105, 5, 105, 1286, 10, 105, 3, 105, 7, 105, 1289, 10, 105,
	12, 105, 14, 105, 1292, 11, 105, 3, 105, 3, 105, 3, 105, 3, 105, 5, 105,
	1298, 10, 105, 7, 105, 1300, 10, 105, 12, 105, 14, 105, 1303, 11, 105,
	3, 106, 5, 106, 1306, 10, 106, 3, 106, 7, 106, 1309, 10, 106, 12, 106,
	14, 106, 1312, 11, 106, 3, 106, 3, 106, 3, 106, 3, 106, 5, 106, 1318, 10,
	106, 7, 106, 1320, 10, 106, 12, 106, 14, 106, 1323, 11, 106, 3, 107, 5,
	107, 1326, 10, 107, 3, 107, 6, 107, 1329, 10, 107, 13, 107, 14, 107, 1330,
	3, 107, 5, 107, 1334, 10, 107, 3, 108, 3, 108, 3, 108, 7, 108, 1339, 10,
	108, 12, 108, 14, 108, 1342, 11, 108, 3, 109, 3, 109, 3, 109, 7, 109, 1347,
	10, 109, 12, 109, 14, 109, 1350, 11, 109, 3, 110, 3, 110, 5, 110, 1354,
	10, 110, 3, 111, 6, 111, 1357, 10, 111, 13, 111, 14, 111, 1358, 3, 111,
	3, 111, 6, 111, 1363, 10, 111, 13, 111, 14, 111, 1364, 7, 111, 1367, 10,
	111, 12, 111, 14, 111, 1370, 11, 111, 3, 112, 3, 112, 3, 112, 3, 112, 3,
	112, 5, 112, 1377, 10, 112, 3, 113, 3, 113, 5, 113, 1381, 10, 113, 3, 114,
	3, 114, 5, 114, 1385, 10, 114, 3, 115, 5, 115, 1388, 10, 115, 3, 115, 3,
	115, 3, 116, 5, 116, 1393, 10, 116, 3, 116, 3, 116, 3, 116, 3, 116, 5,
	116, 1399, 10, 116, 3, 116, 5, 116, 1402, 10, 116, 3, 117, 3, 117, 3, 117,
	5, 117, 1407, 10, 117, 3, 117, 3, 117, 5, 117, 1411, 10, 117, 3, 118, 3,
	118, 3, 119, 3, 119, 3, 119, 7, 119, 1418, 10, 119, 12, 119, 14, 119, 1421,
	11, 119, 3, 119, 5, 119, 1424, 10, 119, 3, 120, 3, 120, 3, 120, 7, 120,
	1429, 10, 120, 12, 120, 14, 120, 1432, 11, 120, 3, 120, 5, 120, 1435, 10,
	120, 3, 121, 3, 121, 3, 121, 5, 121, 1440, 10, 121, 3, 122, 3, 122, 5,
	122, 1444, 10, 122, 3, 123, 3, 123, 3, 124, 3, 124, 3, 125, 3, 125, 3,
	126, 3, 126, 3, 126, 3, 127, 3, 127, 5, 127, 1457, 10, 127, 3, 128, 3,
	128, 3, 129, 3, 129, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3,
	130, 5, 130, 1470, 10, 130, 3, 131, 3, 131, 3, 132, 3, 132, 3, 133, 3,
	133, 3, 133, 3, 133, 7, 133, 1480, 10, 133, 12, 133, 14, 133, 1483, 11,
	133, 3, 134, 3, 134, 3, 135, 3, 135, 3, 136, 3, 136, 3, 137, 3, 137, 5,
	137, 1493, 10, 137, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 5, 138, 1500,
	10, 138, 3, 138, 3, 138, 5, 138, 1504, 10, 138, 3, 139, 3, 139, 3, 139,
	3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 5, 139, 1515, 10, 139,
	3, 140, 3, 140, 5, 140, 1519, 10, 140, 3, 141, 3, 141, 3, 141, 3, 141,
	3, 141, 5, 141, 1526, 10, 141, 3, 142, 3, 142, 3, 142, 5, 142, 1531, 10,
	142, 3, 142, 3, 142, 5, 142, 1535, 10, 142, 3, 143, 3, 143, 3, 143, 3,
	143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 5, 143, 1546, 10, 143, 3,
	144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 7, 144, 1554, 10, 144, 12,
	144, 14, 144, 1557, 11, 144, 3, 145, 3, 145, 3, 145, 5, 145, 1562, 10,
	145, 3, 145, 3, 145, 3, 145, 5, 145, 1567, 10, 145, 3, 146, 3, 146, 3,
	146, 3, 146, 7, 146, 1573, 10, 146, 12, 146, 14, 146, 1576, 11, 146, 3,
	147, 3, 147, 3, 147, 5, 147, 1581, 10, 147, 3, 148, 7, 148, 1584, 10, 148,
	12, 148, 14, 148, 1587, 11, 148, 3, 149, 3, 149, 3, 149, 5, 149, 1592,
	10, 149, 3, 149, 3, 149, 3, 150, 3, 150, 6, 150, 1598, 10, 150, 13, 150,
	14, 150, 1599, 3, 150, 3, 150, 3, 150, 3, 150, 6, 150, 1606, 10, 150, 13,
	150, 14, 150, 1607, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151, 1651,
	10, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 5, 151, 1673, 10, 151, 3, 151, 5, 151, 1676, 10,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151, 1701, 10, 151, 5,
	151, 1703, 10, 151, 3, 151, 5, 151, 1706, 10, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151,
	1737, 10, 151, 5, 151, 1739, 10, 151, 3, 151, 5, 151, 1742, 10, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 5, 151, 1781, 10, 151, 5, 151, 1783, 10, 151, 3, 151, 5, 151, 1786,
	10, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151, 1837, 10, 151, 5, 151,
	1839, 10, 151, 3, 151, 5, 151, 1842, 10, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 5, 151, 1911, 10, 151, 5, 151, 1913, 10, 151, 3, 151, 5, 151, 1916,
	10, 151, 3, 151, 3, 151, 5, 151, 1920, 10, 151, 3, 152, 3, 152, 3, 152,
	3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152, 1931, 10, 152,
	5, 152, 1933, 10, 152, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 5, 153,
	1940, 10, 153, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154,
	3, 154, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155,
	3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 5, 155, 1964, 10, 155,
	3, 156, 3, 156, 3, 156, 7, 156, 1969, 10, 156, 12, 156, 14, 156, 1972,
	11, 156, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 5, 157, 1979, 10, 157,
	3, 158, 3, 158, 7, 158, 1983, 10, 158, 12, 158, 14, 158, 1986, 11, 158,
	3, 159, 3, 159, 3, 159, 3, 159, 7, 159, 1992, 10, 159, 12, 159, 14, 159,
	1995, 11, 159, 5, 159, 1997, 10, 159, 3, 160, 3, 160, 3, 160, 7, 160, 2002,
	10, 160, 12, 160, 14, 160, 2005, 11, 160, 3, 161, 3, 161, 3, 161, 7, 161,
	2010, 10, 161, 12, 161, 14, 161, 2013, 11, 161, 3, 162, 3, 162, 3, 163,
	7, 163, 2018, 10, 163, 12, 163, 14, 163, 2021, 11, 163, 3, 164, 6, 164,
	2024, 10, 164, 13, 164, 14, 164, 2025, 3, 165, 3, 165, 3, 165, 3, 165,
	6, 165, 2032, 10, 165, 13, 165, 14, 165, 2033, 3, 166, 3, 166, 3, 166,
	3, 166, 3, 166, 5, 166, 2041, 10, 166, 3, 167, 3, 167, 3, 167, 7, 167,
	2046, 10, 167, 12, 167, 14, 167, 2049, 11, 167, 3, 168, 3, 168, 3, 168,
	7, 168, 2054, 10, 168, 12, 168, 14, 168, 2057, 11, 168, 3, 169, 3, 169,
	3, 169, 3, 169, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 5, 170,
	2069, 10, 170, 3, 171, 3, 171, 5, 171, 2073, 10, 171, 3, 172, 3, 172, 3,
	173, 3, 173, 3, 173, 2, 2, 174, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58,
	60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
	96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124,
	126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154,
	156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184,
	186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214,
	216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244,
	246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274,
	276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304,
	306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334,
	336, 338, 340, 342, 344, 2, 42, 6, 2, 74, 74, 78, 78, 83, 83, 89, 89, 3,
	2, 26, 31, 4, 2, 3, 3, 102, 109, 3, 2, 110, 111, 4, 2, 6, 100, 112, 258,
	3, 2, 131, 258, 3, 2, 9, 13, 3, 2, 16, 17, 3, 2, 19, 20, 3, 2, 22, 31,
	3, 2, 39, 64, 3, 2, 68, 100, 4, 2, 6, 13, 112, 129, 3, 2, 16, 33, 4, 2,
	37, 100, 130, 258, 3, 2, 23, 31, 3, 2, 22, 26, 3, 2, 22, 27, 3, 2, 7, 64,
	3, 2, 9, 65, 3, 2, 67, 100, 3, 2, 7, 13, 3, 2, 16, 65, 3, 2, 102, 109,
	3, 2, 112, 129, 3, 2, 71, 96, 3, 2, 22, 23, 4, 2, 3, 100, 102, 130, 4,
	2, 3, 5, 101, 129, 4, 2, 39, 39, 71, 71, 4, 2, 40, 40, 72, 72, 4, 2, 41,
	41, 73, 73, 4, 2, 42, 42, 74, 74, 4, 2, 43, 43, 75, 75, 4, 2, 44, 44, 76,
	76, 3, 2, 3, 258, 3, 2, 7, 100, 4, 2, 60, 60, 92, 92, 8, 2, 9, 9, 21, 21,
	32, 32, 37, 38, 65, 65, 67, 67, 7, 2, 7, 7, 10, 10, 12, 18, 33, 33, 35,
	35, 2, 2276, 2, 346, 3, 2, 2, 2, 4, 362, 3, 2, 2, 2, 6, 371, 3, 2, 2, 2,
	8, 386, 3, 2, 2, 2, 10, 396, 3, 2, 2, 2, 12, 403, 3, 2, 2, 2, 14, 412,
	3, 2, 2, 2, 16, 422, 3, 2, 2, 2, 18, 425, 3, 2, 2, 2, 20, 443, 3, 2, 2,
	2, 22, 461, 3, 2, 2, 2, 24, 470, 3, 2, 2, 2, 26, 482, 3, 2, 2, 2, 28, 508,
	3, 2, 2, 2, 30, 517, 3, 2, 2, 2, 32, 534, 3, 2, 2, 2, 34, 537, 3, 2, 2,
	2, 36, 557, 3, 2, 2, 2, 38, 560, 3, 2, 2, 2, 40, 565, 3, 2, 2, 2, 42, 569,
	3, 2, 2, 2, 44, 571, 3, 2, 2, 2, 46, 573, 3, 2, 2, 2, 48, 578, 3, 2, 2,
	2, 50, 580, 3, 2, 2, 2, 52, 595, 3, 2, 2, 2, 54, 633, 3, 2, 2, 2, 56, 636,
	3, 2, 2, 2, 58, 648, 3, 2, 2, 2, 60, 650, 3, 2, 2, 2, 62, 653, 3, 2, 2,
	2, 64, 659, 3, 2, 2, 2, 66, 663, 3, 2, 2, 2, 68, 665, 3, 2, 2, 2, 70, 679,
	3, 2, 2, 2, 72, 690, 3, 2, 2, 2, 74, 697, 3, 2, 2, 2, 76, 726, 3, 2, 2,
	2, 78, 731, 3, 2, 2, 2, 80, 737, 3, 2, 2, 2, 82, 754, 3, 2, 2, 2, 84, 760,
	3, 2, 2, 2, 86, 767, 3, 2, 2, 2, 88, 769, 3, 2, 2, 2, 90, 771, 3, 2, 2,
	2, 92, 773, 3, 2, 2, 2, 94, 775, 3, 2, 2, 2, 96, 777, 3, 2, 2, 2, 98, 786,
	3, 2, 2, 2, 100, 794, 3, 2, 2, 2, 102, 800, 3, 2, 2, 2, 104, 802, 3, 2,
	2, 2, 106, 826, 3, 2, 2, 2, 108, 828, 3, 2, 2, 2, 110, 843, 3, 2, 2, 2,
	112, 848, 3, 2, 2, 2, 114, 867, 3, 2, 2, 2, 116, 877, 3, 2, 2, 2, 118,
	879, 3, 2, 2, 2, 120, 898, 3, 2, 2, 2, 122, 900, 3, 2, 2, 2, 124, 908,
	3, 2, 2, 2, 126, 921, 3, 2, 2, 2, 128, 923, 3, 2, 2, 2, 130, 928, 3, 2,
	2, 2, 132, 934, 3, 2, 2, 2, 134, 945, 3, 2, 2, 2, 136, 948, 3, 2, 2, 2,
	138, 958, 3, 2, 2, 2, 140, 960, 3, 2, 2, 2, 142, 969, 3, 2, 2, 2, 144,
	971, 3, 2, 2, 2, 146, 990, 3, 2, 2, 2, 148, 992, 3, 2, 2, 2, 150, 999,
	3, 2, 2, 2, 152, 1004, 3, 2, 2, 2, 154, 1007, 3, 2, 2, 2, 156, 1029, 3,
	2, 2, 2, 158, 1052, 3, 2, 2, 2, 160, 1055, 3, 2, 2, 2, 162, 1066, 3, 2,
	2, 2, 164, 1082, 3, 2, 2, 2, 166, 1101, 3, 2, 2, 2, 168, 1107, 3, 2, 2,
	2, 170, 1111, 3, 2, 2, 2, 172, 1114, 3, 2, 2, 2, 174, 1135, 3, 2, 2, 2,
	176, 1143, 3, 2, 2, 2, 178, 1151, 3, 2, 2, 2, 180, 1168, 3, 2, 2, 2, 182,
	1174, 3, 2, 2, 2, 184, 1179, 3, 2, 2, 2, 186, 1181, 3, 2, 2, 2, 188, 1208,
	3, 2, 2, 2, 190, 1210, 3, 2, 2, 2, 192, 1212, 3, 2, 2, 2, 194, 1217, 3,
	2, 2, 2, 196, 1219, 3, 2, 2, 2, 198, 1226, 3, 2, 2, 2, 200, 1237, 3, 2,
	2, 2, 202, 1250, 3, 2, 2, 2, 204, 1259, 3, 2, 2, 2, 206, 1266, 3, 2, 2,
	2, 208, 1290, 3, 2, 2, 2, 210, 1310, 3, 2, 2, 2, 212, 1328, 3, 2, 2, 2,
	214, 1335, 3, 2, 2, 2, 216, 1343, 3, 2, 2, 2, 218, 1353, 3, 2, 2, 2, 220,
	1356, 3, 2, 2, 2, 222, 1376, 3, 2, 2, 2, 224, 1380, 3, 2, 2, 2, 226, 1384,
	3, 2, 2, 2, 228, 1387, 3, 2, 2, 2, 230, 1401, 3, 2, 2, 2, 232, 1403, 3,
	2, 2, 2, 234, 1412, 3, 2, 2, 2, 236, 1423, 3, 2, 2, 2, 238, 1434, 3, 2,
	2, 2, 240, 1439, 3, 2, 2, 2, 242, 1443, 3, 2, 2, 2, 244, 1445, 3, 2, 2,
	2, 246, 1447, 3, 2, 2, 2, 248, 1449, 3, 2, 2, 2, 250, 1451, 3, 2, 2, 2,
	252, 1456, 3, 2, 2, 2, 254, 1458, 3, 2, 2, 2, 256, 1460, 3, 2, 2, 2, 258,
	1469, 3, 2, 2, 2, 260, 1471, 3, 2, 2, 2, 262, 1473, 3, 2, 2, 2, 264, 1481,
	3, 2, 2, 2, 266, 1484, 3, 2, 2, 2, 268, 1486, 3, 2, 2, 2, 270, 1488, 3,
	2, 2, 2, 272, 1492, 3, 2, 2, 2, 274, 1494, 3, 2, 2, 2, 276, 1514, 3, 2,
	2, 2, 278, 1518, 3, 2, 2, 2, 280, 1520, 3, 2, 2, 2, 282, 1527, 3, 2, 2,
	2, 284, 1545, 3, 2, 2, 2, 286, 1547, 3, 2, 2, 2, 288, 1561, 3, 2, 2, 2,
	290, 1574, 3, 2, 2, 2, 292, 1580, 3, 2, 2, 2, 294, 1585, 3, 2, 2, 2, 296,
	1588, 3, 2, 2, 2, 298, 1595, 3, 2, 2, 2, 300, 1919, 3, 2, 2, 2, 302, 1921,
	3, 2, 2, 2, 304, 1939, 3, 2, 2, 2, 306, 1941, 3, 2, 2, 2, 308, 1963, 3,
	2, 2, 2, 310, 1970, 3, 2, 2, 2, 312, 1978, 3, 2, 2, 2, 314, 1984, 3, 2,
	2, 2, 316, 1987, 3, 2, 2, 2, 318, 1998, 3, 2, 2, 2, 320, 2006, 3, 2, 2,
	2, 322, 2014, 3, 2, 2, 2, 324, 2019, 3, 2, 2, 2, 326, 2023, 3, 2, 2, 2,
	328, 2031, 3, 2, 2, 2, 330, 2040, 3, 2, 2, 2, 332, 2047, 3, 2, 2, 2, 334,
	2055, 3, 2, 2, 2, 336, 2058, 3, 2, 2, 2, 338, 2068, 3, 2, 2, 2, 340, 2072,
	3, 2, 2, 2, 342, 2074, 3, 2, 2, 2, 344, 2076, 3, 2, 2, 2, 346, 347, 5,
	4, 3, 2, 347, 348, 5, 6, 4, 2, 348, 349, 5, 8, 5, 2, 349, 350, 5, 10, 6,
	2, 350, 351, 5, 12, 7, 2, 351, 352, 5, 14, 8, 2, 352, 354, 5, 16, 9, 2,
	353, 355, 5, 18, 10, 2, 354, 353, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355,
	356, 3, 2, 2, 2, 356, 357, 5, 20, 11, 2, 357, 358, 5, 22, 12, 2, 358, 359,
	5, 28, 15, 2, 359, 360, 5, 30, 16, 2, 360, 361, 5, 32, 17, 2, 361, 3, 3,
	2, 2, 2, 362, 363, 7, 92, 2, 2, 363, 365, 7, 35, 2, 2, 364, 366, 5, 254,
	128, 2, 365, 364, 3, 2, 2, 2, 366, 367, 3, 2, 2, 2, 367, 365, 3, 2, 2,
	2, 367, 368, 3, 2, 2, 2, 368, 369, 3, 2, 2, 2, 369, 370, 5, 250, 126, 2,
	370, 5, 3, 2, 2, 2, 371, 372, 7, 85, 2, 2, 372, 373, 7, 35, 2, 2, 373,
	374, 5, 36, 19, 2, 374, 375, 5, 268, 135, 2, 375, 376, 5, 38, 20, 2, 376,
	377, 5, 268, 135, 2, 377, 378, 5, 40, 21, 2, 378, 379, 5, 268, 135, 2,
	379, 380, 5, 42, 22, 2, 380, 381, 5, 268, 135, 2, 381, 382, 5, 44, 23,
	2, 382, 383, 5, 268, 135, 2, 383, 384, 5, 100, 51, 2, 384, 385, 5, 250,
	126, 2, 385, 7, 3, 2, 2, 2, 386, 387, 7, 89, 2, 2, 387, 388, 7, 35, 2,
	2, 388, 389, 5, 128, 65, 2, 389, 390, 5, 250, 126, 2, 390, 9, 3, 2, 2,
	2, 391, 392, 7, 79, 2, 2, 392, 393, 7, 35, 2, 2, 393, 394, 5, 128, 65,
	2, 394, 395, 5, 250, 126, 2, 395, 397, 3, 2, 2, 2, 396, 391, 3, 2, 2, 2,
	396, 397, 3, 2, 2, 2, 397, 11, 3, 2, 2, 2, 398, 399, 7, 91, 2, 2, 399,
	400, 7, 35, 2, 2, 400, 401, 5, 46, 24, 2, 401, 402, 5, 250, 126, 2, 402,
	404, 3, 2, 2, 2, 403, 398, 3, 2, 2, 2, 403, 404, 3, 2, 2, 2, 404, 13, 3,
	2, 2, 2, 405, 406, 7, 75, 2, 2, 406, 407, 7, 35, 2, 2, 407, 408, 5, 48,
	25, 2, 408, 409, 5, 250, 126, 2, 409, 411, 3, 2, 2, 2, 410, 405, 3, 2,
	2, 2, 411, 414, 3, 2, 2, 2, 412, 410, 3, 2, 2, 2, 412, 413, 3, 2, 2, 2,
	413, 15, 3, 2, 2, 2, 414, 412, 3, 2, 2, 2, 415, 416, 7, 86, 2, 2, 416,
	417, 7, 35, 2, 2, 417, 418, 5, 54, 28, 2, 418, 419, 5, 250, 126, 2, 419,
	421, 3, 2, 2, 2, 420, 415, 3, 2, 2, 2, 421, 424, 3, 2, 2, 2, 422, 420,
	3, 2, 2, 2, 422, 423, 3, 2, 2, 2, 423, 17, 3, 2, 2, 2, 424, 422, 3, 2,
	2, 2, 425, 426, 7, 73, 2, 2, 426, 427, 7, 35, 2, 2, 427, 428, 5, 42, 22,
	2, 428, 429, 5, 268, 135, 2, 429, 430, 5, 44, 23, 2, 430, 431, 5, 268,
	135, 2, 431, 432, 5, 58, 30, 2, 432, 433, 5, 250, 126, 2, 433, 19, 3, 2,
	2, 2, 434, 435, 7, 72, 2, 2, 435, 436, 7, 35, 2, 2, 436, 437, 5, 60, 31,
	2, 437, 438, 7, 32, 2, 2, 438, 439, 5, 62, 32, 2, 439, 440, 5, 250, 126,
	2, 440, 442, 3, 2, 2, 2, 441, 434, 3, 2, 2, 2, 442, 445, 3, 2, 2, 2, 443,
	441, 3, 2, 2, 2, 443, 444, 3, 2, 2, 2, 444, 21, 3, 2, 2, 2, 445, 443, 3,
	2, 2, 2, 446, 447, 7, 90, 2, 2, 447, 448, 7, 35, 2, 2, 448, 449, 5, 64,
	33, 2, 449, 450, 5, 268, 135, 2, 450, 456, 5, 66, 34, 2, 451, 452, 5, 250,
	126, 2, 452, 453, 5, 24, 13, 2, 453, 455, 3, 2, 2, 2, 454, 451, 3, 2, 2,
	2, 455, 458, 3, 2, 2, 2, 456, 454, 3, 2, 2, 2, 456, 457, 3, 2, 2, 2, 457,
	459, 3, 2, 2, 2, 458, 456, 3, 2, 2, 2, 459, 460, 5, 250, 126, 2, 460, 462,
	3, 2, 2, 2, 461, 446, 3, 2, 2, 2, 462, 463, 3, 2, 2, 2, 463, 461, 3, 2,
	2, 2, 463, 464, 3, 2, 2, 2, 464, 468, 3, 2, 2, 2, 465, 466, 5, 26, 14,
	2, 466, 467, 5, 250, 126, 2, 467, 469, 3, 2, 2, 2, 468, 465, 3, 2, 2, 2,
	468, 469, 3, 2, 2, 2, 469, 23, 3, 2, 2, 2, 470, 471, 7, 88, 2, 2, 471,
	472, 7, 35, 2, 2, 472, 473, 5, 70, 36, 2, 473, 474, 5, 268, 135, 2, 474,
	478, 5, 72, 37, 2, 475, 476, 5, 268, 135, 2, 476, 477, 5, 72, 37, 2, 477,
	479, 3, 2, 2, 2, 478, 475, 3, 2, 2, 2, 479, 480, 3, 2, 2, 2, 480, 478,
	3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481, 25, 3, 2, 2, 2, 482, 483, 7, 96,
	2, 2, 483, 484, 7, 35, 2, 2, 484, 485, 5, 68, 35, 2, 485, 487, 5, 268,
	135, 2, 486, 488, 7, 19, 2, 2, 487, 486, 3, 2, 2, 2, 487, 488, 3, 2, 2,
	2, 488, 489, 3, 2, 2, 2, 489, 500, 5, 72, 37, 2, 490, 491, 5, 268, 135,
	2, 491, 492, 5, 68, 35, 2, 492, 494, 5, 268, 135, 2, 493, 495, 7, 19, 2,
	2, 494, 493, 3, 2, 2, 2, 494, 495, 3, 2, 2, 2, 495, 496, 3, 2, 2, 2, 496,
	497, 5, 72, 37, 2, 497, 499, 3, 2, 2, 2, 498, 490, 3, 2, 2, 2, 499, 502,
	3, 2, 2, 2, 500, 498, 3, 2, 2, 2, 500, 501, 3, 2, 2, 2, 501, 27, 3, 2,
	2, 2, 502, 500, 3, 2, 2, 2, 503, 504, 7, 81, 2, 2, 504, 505, 7, 35, 2,
	2, 505, 506, 5, 76, 39, 2, 506, 507, 5, 250, 126, 2, 507, 509, 3, 2, 2,
	2, 508, 503, 3, 2, 2, 2, 508, 509, 3, 2, 2, 2, 509, 29, 3, 2, 2, 2, 510,
	511, 7, 71, 2, 2, 511, 512, 7, 35, 2, 2, 512, 513, 5, 86, 44, 2, 513, 514,
	5, 250, 126, 2, 514, 516, 3, 2, 2, 2, 515, 510, 3, 2, 2, 2, 516, 519, 3,
	2, 2, 2, 517, 515, 3, 2, 2, 2, 517, 518, 3, 2, 2, 2, 518, 31, 3, 2, 2,
	2, 519, 517, 3, 2, 2, 2, 520, 521, 5, 34, 18, 2, 521, 525, 5, 10, 6, 2,
	522, 524, 5, 18, 10, 2, 523, 522, 3, 2, 2, 2, 524, 527, 3, 2, 2, 2, 525,
	523, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2, 526, 528, 3, 2, 2, 2, 527, 525,
	3, 2, 2, 2, 528, 529, 5, 20, 11, 2, 529, 530, 5, 28, 15, 2, 530, 531, 5,
	30, 16, 2, 531, 533, 3, 2, 2, 2, 532, 520, 3, 2, 2, 2, 533, 536, 3, 2,
	2, 2, 534, 532, 3, 2, 2, 2, 534, 535, 3, 2, 2, 2, 535, 33, 3, 2, 2, 2,
	536, 534, 3, 2, 2, 2, 537, 538, 7, 83, 2, 2, 538, 539, 7, 35, 2, 2, 539,
	540, 5, 92, 47, 2, 540, 541, 5, 268, 135, 2, 541, 544, 5, 98, 50, 2, 542,
	543, 7, 21, 2, 2, 543, 545, 5, 140, 71, 2, 544, 542, 3, 2, 2, 2, 544, 545,
	3, 2, 2, 2, 545, 546, 3, 2, 2, 2, 546, 547, 5, 268, 135, 2, 547, 551, 5,
	96, 49, 2, 548, 549, 5, 268, 135, 2, 549, 550, 5, 94, 48, 2, 550, 552,
	3, 2, 2, 2, 551, 548, 3, 2, 2, 2, 552, 553, 3, 2, 2, 2, 553, 551, 3, 2,
	2, 2, 553, 554, 3, 2, 2, 2, 554, 555, 3, 2, 2, 2, 555, 556, 5, 250, 126,
	2, 556, 35, 3, 2, 2, 2, 557, 558, 5, 132, 67, 2, 558, 37, 3, 2, 2, 2, 559,
	561, 5, 254, 128, 2, 560, 559, 3, 2, 2, 2, 561, 562, 3, 2, 2, 2, 562, 560,
	3, 2, 2, 2, 562, 563, 3, 2, 2, 2, 563, 39, 3, 2, 2, 2, 564, 566, 5, 254,
	128, 2, 565, 564, 3, 2, 2, 2, 566, 567, 3, 2, 2, 2, 567, 565, 3, 2, 2,
	2, 567, 568, 3, 2, 2, 2, 568, 41, 3, 2, 2, 2, 569, 570, 5, 136, 69, 2,
	570, 43, 3, 2, 2, 2, 571, 572, 5, 136, 69, 2, 572, 45, 3, 2, 2, 2, 573,
	574, 5, 278, 140, 2, 574, 47, 3, 2, 2, 2, 575, 579, 5, 50, 26, 2, 576,
	579, 5, 52, 27, 2, 577, 579, 5, 148, 75, 2, 578, 575, 3, 2, 2, 2, 578,
	576, 3, 2, 2, 2, 578, 577, 3, 2, 2, 2, 579, 49, 3, 2, 2, 2, 580, 582, 5,
	148, 75, 2, 581, 583, 5, 268, 135, 2, 582, 581, 3, 2, 2, 2, 583, 584, 3,
	2, 2, 2, 584, 582, 3, 2, 2, 2, 584, 585, 3, 2, 2, 2, 585, 586, 3, 2, 2,
	2, 586, 588, 7, 14, 2, 2, 587, 589, 5, 138, 70, 2, 588, 587, 3, 2, 2, 2,
	589, 590, 3, 2, 2, 2, 590, 588, 3, 2, 2, 2, 590, 591, 3, 2, 2, 2, 591,
	592, 3, 2, 2, 2, 592, 593, 7, 15, 2, 2, 593, 51, 3, 2, 2, 2, 594, 596,
	5, 138, 70, 2, 595, 594, 3, 2, 2, 2, 596, 597, 3, 2, 2, 2, 597, 595, 3,
	2, 2, 2, 597, 598, 3, 2, 2, 2, 598, 600, 3, 2, 2, 2, 599, 601, 5, 268,
	135, 2, 600, 599, 3, 2, 2, 2, 601, 602, 3, 2, 2, 2, 602, 600, 3, 2, 2,
	2, 602, 603, 3, 2, 2, 2, 603, 604, 3, 2, 2, 2, 604, 605, 7, 34, 2, 2, 605,
	606, 5, 148, 75, 2, 606, 607, 7, 36, 2, 2, 607, 53, 3, 2, 2, 2, 608, 612,
	5, 56, 29, 2, 609, 611, 5, 268, 135, 2, 610, 609, 3, 2, 2, 2, 611, 614,
	3, 2, 2, 2, 612, 610, 3, 2, 2, 2, 612, 613, 3, 2, 2, 2, 613, 615, 3, 2,
	2, 2, 614, 612, 3, 2, 2, 2, 615, 617, 7, 14, 2, 2, 616, 618, 5, 138, 70,
	2, 617, 616, 3, 2, 2, 2, 618, 619, 3, 2, 2, 2, 619, 617, 3, 2, 2, 2, 619,
	620, 3, 2, 2, 2, 620, 621, 3, 2, 2, 2, 621, 622, 7, 15, 2, 2, 622, 634,
	3, 2, 2, 2, 623, 625, 5, 138, 70, 2, 624, 623, 3, 2, 2, 2, 625, 626, 3,
	2, 2, 2, 626, 624, 3, 2, 2, 2, 626, 627, 3, 2, 2, 2, 627, 628, 3, 2, 2,
	2, 628, 629, 7, 34, 2, 2, 629, 630, 5, 56, 29, 2, 630, 631, 7, 36, 2, 2,
	631, 634, 3, 2, 2, 2, 632, 634, 5, 56, 29, 2, 633, 608, 3, 2, 2, 2, 633,
	624, 3, 2, 2, 2, 633, 632, 3, 2, 2, 2, 634, 55, 3, 2, 2, 2, 635, 637, 7,
	17, 2, 2, 636, 635, 3, 2, 2, 2, 636, 637, 3, 2, 2, 2, 637, 638, 3, 2, 2,
	2, 638, 642, 5, 254, 128, 2, 639, 643, 5, 268, 135, 2, 640, 643, 7, 19,
	2, 2, 641, 643, 5, 254, 128, 2, 642, 639, 3, 2, 2, 2, 642, 640, 3, 2, 2,
	2, 642, 641, 3, 2, 2, 2, 643, 644, 3, 2, 2, 2, 644, 642, 3, 2, 2, 2, 644,
	645, 3, 2, 2, 2, 645, 57, 3, 2, 2, 2, 646, 649, 5, 102, 52, 2, 647, 649,
	5, 100, 51, 2, 648, 646, 3, 2, 2, 2, 648, 647, 3, 2, 2, 2, 649, 59, 3,
	2, 2, 2, 650, 651, 5, 136, 69, 2, 651, 61, 3, 2, 2, 2, 652, 654, 5, 254,
	128, 2, 653, 652, 3, 2, 2, 2, 654, 655, 3, 2, 2, 2, 655, 653, 3, 2, 2,
	2, 655, 656, 3, 2, 2, 2, 656, 63, 3, 2, 2, 2, 657, 660, 5, 68, 35, 2, 658,
	660, 7, 22, 2, 2, 659, 657, 3, 2, 2, 2, 659, 658, 3, 2, 2, 2, 660, 65,
	3, 2, 2, 2, 661, 664, 5, 68, 35, 2, 662, 664, 7, 22, 2, 2, 663, 661, 3,
	2, 2, 2, 663, 662, 3, 2, 2, 2, 664, 67, 3, 2, 2, 2, 665, 666, 5, 144, 73,
	2, 666, 667, 5, 254, 128, 2, 667, 668, 5, 254, 128, 2, 668, 669, 5, 254,
	128, 2, 669, 670, 5, 254, 128, 2, 670, 671, 5, 254, 128, 2, 671, 672, 5,
	254, 128, 2, 672, 673, 5, 254, 128, 2, 673, 675, 5, 254, 128, 2, 674, 676,
	5, 254, 128, 2, 675, 674, 3, 2, 2, 2, 676, 677, 3, 2, 2, 2, 677, 675, 3,
	2, 2, 2, 677, 678, 3, 2, 2, 2, 678, 69, 3, 2, 2, 2, 679, 683, 5, 144, 73,
	2, 680, 682, 5, 254, 128, 2, 681, 680, 3, 2, 2, 2, 682, 685, 3, 2, 2, 2,
	683, 681, 3, 2, 2, 2, 683, 684, 3, 2, 2, 2, 684, 687, 3, 2, 2, 2, 685,
	683, 3, 2, 2, 2, 686, 688, 5, 74, 38, 2, 687, 686, 3, 2, 2, 2, 687, 688,
	3, 2, 2, 2, 688, 71, 3, 2, 2, 2, 689, 691, 5, 254, 128, 2, 690, 689, 3,
	2, 2, 2, 691, 692, 3, 2, 2, 2, 692, 690, 3, 2, 2, 2, 692, 693, 3, 2, 2,
	2, 693, 695, 3, 2, 2, 2, 694, 696, 5, 74, 38, 2, 695, 694, 3, 2, 2, 2,
	695, 696, 3, 2, 2, 2, 696, 73, 3, 2, 2, 2, 697, 698, 9, 2, 2, 2, 698, 75,
	3, 2, 2, 2, 699, 700, 7, 86, 2, 2, 700, 701, 7, 88, 2, 2, 701, 702, 7,
	85, 2, 2, 702, 703, 7, 83, 2, 2, 703, 704, 7, 86, 2, 2, 704, 727, 7, 90,
	2, 2, 705, 706, 7, 73, 2, 2, 706, 707, 7, 82, 2, 2, 707, 708, 7, 75, 2,
	2, 708, 709, 7, 71, 2, 2, 709, 710, 7, 88, 2, 2, 710, 711, 7, 32, 2, 2,
	711, 727, 5, 128, 65, 2, 712, 713, 7, 72, 2, 2, 713, 714, 7, 71, 2, 2,
	714, 715, 7, 89, 2, 2, 715, 716, 7, 75, 2, 2, 716, 717, 7, 28, 2, 2, 717,
	718, 7, 26, 2, 2, 718, 719, 7, 32, 2, 2, 719, 720, 3, 2, 2, 2, 720, 727,
	5, 78, 40, 2, 721, 722, 7, 91, 2, 2, 722, 723, 7, 88, 2, 2, 723, 724, 7,
	79, 2, 2, 724, 725, 7, 32, 2, 2, 725, 727, 5, 46, 24, 2, 726, 699, 3, 2,
	2, 2, 726, 705, 3, 2, 2, 2, 726, 712, 3, 2, 2, 2, 726, 721, 3, 2, 2, 2,
	727, 77, 3, 2, 2, 2, 728, 730, 5, 80, 41, 2, 729, 728, 3, 2, 2, 2, 730,
	733, 3, 2, 2, 2, 731, 729, 3, 2, 2, 2, 731, 732, 3, 2, 2, 2, 732, 735,
	3, 2, 2, 2, 733, 731, 3, 2, 2, 2, 734, 736, 5, 82, 42, 2, 735, 734, 3,
	2, 2, 2, 735, 736, 3, 2, 2, 2, 736, 79, 3, 2, 2, 2, 737, 738, 5, 84, 43,
	2, 738, 739, 5, 84, 43, 2, 739, 740, 5, 84, 43, 2, 740, 741, 5, 84, 43,
	2, 741, 81, 3, 2, 2, 2, 742, 743, 5, 84, 43, 2, 743, 744, 5, 84, 43, 2,
	744, 745, 3, 2, 2, 2, 745, 746, 7, 35, 2, 2, 746, 747, 7, 35, 2, 2, 747,
	755, 3, 2, 2, 2, 748, 749, 5, 84, 43, 2, 749, 750, 5, 84, 43, 2, 750, 751,
	5, 84, 43, 2, 751, 752, 3, 2, 2, 2, 752, 753, 7, 35, 2, 2, 753, 755, 3,
	2, 2, 2, 754, 742, 3, 2, 2, 2, 754, 748, 3, 2, 2, 2, 755, 83, 3, 2, 2,
	2, 756, 761, 5, 242, 122, 2, 757, 761, 5, 254, 128, 2, 758, 761, 7, 17,
	2, 2, 759, 761, 7, 21, 2, 2, 760, 756, 3, 2, 2, 2, 760, 757, 3, 2, 2, 2,
	760, 758, 3, 2, 2, 2, 760, 759, 3, 2, 2, 2, 761, 85, 3, 2, 2, 2, 762, 763,
	5, 88, 45, 2, 763, 764, 7, 32, 2, 2, 764, 765, 5, 90, 46, 2, 765, 768,
	3, 2, 2, 2, 766, 768, 5, 88, 45, 2, 767, 762, 3, 2, 2, 2, 767, 766, 3,
	2, 2, 2, 768, 87, 3, 2, 2, 2, 769, 770, 5, 136, 69, 2, 770, 89, 3, 2, 2,
	2, 771, 772, 5, 130, 66, 2, 772, 91, 3, 2, 2, 2, 773, 774, 5, 136, 69,
	2, 774, 93, 3, 2, 2, 2, 775, 776, 5, 136, 69, 2, 776, 95, 3, 2, 2, 2, 777,
	782, 5, 136, 69, 2, 778, 779, 7, 21, 2, 2, 779, 781, 5, 136, 69, 2, 780,
	778, 3, 2, 2, 2, 781, 784, 3, 2, 2, 2, 782, 780, 3, 2, 2, 2, 782, 783,
	3, 2, 2, 2, 783, 97, 3, 2, 2, 2, 784, 782, 3, 2, 2, 2, 785, 787, 5, 254,
	128, 2, 786, 785, 3, 2, 2, 2, 787, 788, 3, 2, 2, 2, 788, 786, 3, 2, 2,
	2, 788, 789, 3, 2, 2, 2, 789, 99, 3, 2, 2, 2, 790, 795, 5, 114, 58, 2,
	791, 795, 5, 118, 60, 2, 792, 795, 5, 112, 57, 2, 793, 795, 5, 126, 64,
	2, 794, 790, 3, 2, 2, 2, 794, 791, 3, 2, 2, 2, 794, 792, 3, 2, 2, 2, 794,
	793, 3, 2, 2, 2, 795, 101, 3, 2, 2, 2, 796, 801, 5, 104, 53, 2, 797, 801,
	5, 108, 55, 2, 798, 801, 5, 112, 57, 2, 799, 801, 5, 126, 64, 2, 800, 796,
	3, 2, 2, 2, 800, 797, 3, 2, 2, 2, 800, 798, 3, 2, 2, 2, 800, 799, 3, 2,
	2, 2, 801, 103, 3, 2, 2, 2, 802, 803, 5, 106, 54, 2, 803, 804, 7, 20, 2,
	2, 804, 805, 5, 146, 74, 2, 805, 806, 3, 2, 2, 2, 806, 807, 7, 20, 2, 2,
	807, 808, 5, 146, 74, 2, 808, 809, 3, 2, 2, 2, 809, 810, 7, 20, 2, 2, 810,
	811, 5, 146, 74, 2, 811, 812, 3, 2, 2, 2, 812, 813, 7, 21, 2, 2, 813, 816,
	5, 110, 56, 2, 814, 815, 7, 21, 2, 2, 815, 817, 5, 140, 71, 2, 816, 814,
	3, 2, 2, 2, 816, 817, 3, 2, 2, 2, 817, 105, 3, 2, 2, 2, 818, 819, 7, 24,
	2, 2, 819, 820, 7, 24, 2, 2, 820, 821, 3, 2, 2, 2, 821, 827, 9, 3, 2, 2,
	822, 823, 7, 24, 2, 2, 823, 824, 7, 25, 2, 2, 824, 825, 3, 2, 2, 2, 825,
	827, 5, 254, 128, 2, 826, 818, 3, 2, 2, 2, 826, 822, 3, 2, 2, 2, 827, 107,
	3, 2, 2, 2, 828, 831, 5, 120, 61, 2, 829, 830, 7, 21, 2, 2, 830, 832, 5,
	140, 71, 2, 831, 829, 3, 2, 2, 2, 831, 832, 3, 2, 2, 2, 832, 109, 3, 2,
	2, 2, 833, 840, 5, 144, 73, 2, 834, 835, 5, 254, 128, 2, 835, 836, 5, 254,
	128, 2, 836, 841, 3, 2, 2, 2, 837, 839, 5, 254, 128, 2, 838, 837, 3, 2,
	2, 2, 838, 839, 3, 2, 2, 2, 839, 841, 3, 2, 2, 2, 840, 834, 3, 2, 2, 2,
	840, 838, 3, 2, 2, 2, 841, 844, 3, 2, 2, 2, 842, 844, 7, 22, 2, 2, 843,
	833, 3, 2, 2, 2, 843, 842, 3, 2, 2, 2, 844, 111, 3, 2, 2, 2, 845, 849,
	5, 142, 72, 2, 846, 849, 7, 19, 2, 2, 847, 849, 7, 20, 2, 2, 848, 845,
	3, 2, 2, 2, 848, 846, 3, 2, 2, 2, 848, 847, 3, 2, 2, 2, 849, 853, 3, 2,
	2, 2, 850, 854, 5, 142, 72, 2, 851, 854, 7, 19, 2, 2, 852, 854, 7, 20,
	2, 2, 853, 850, 3, 2, 2, 2, 853, 851, 3, 2, 2, 2, 853, 852, 3, 2, 2, 2,
	854, 858, 3, 2, 2, 2, 855, 859, 5, 142, 72, 2, 856, 859, 7, 19, 2, 2, 857,
	859, 7, 20, 2, 2, 858, 855, 3, 2, 2, 2, 858, 856, 3, 2, 2, 2, 858, 857,
	3, 2, 2, 2, 859, 863, 3, 2, 2, 2, 860, 864, 5, 142, 72, 2, 861, 864, 7,
	19, 2, 2, 862, 864, 7, 20, 2, 2, 863, 860, 3, 2, 2, 2, 863, 861, 3, 2,
	2, 2, 863, 862, 3, 2, 2, 2, 864, 865, 3, 2, 2, 2, 865, 863, 3, 2, 2, 2,
	865, 866, 3, 2, 2, 2, 866, 113, 3, 2, 2, 2, 867, 868, 5, 116, 59, 2, 868,
	869, 7, 20, 2, 2, 869, 870, 5, 146, 74, 2, 870, 871, 3, 2, 2, 2, 871, 872,
	7, 20, 2, 2, 872, 873, 5, 146, 74, 2, 873, 874, 3, 2, 2, 2, 874, 875, 7,
	20, 2, 2, 875, 876, 5, 146, 74, 2, 876, 115, 3, 2, 2, 2, 877, 878, 5, 146,
	74, 2, 878, 117, 3, 2, 2, 2, 879, 882, 5, 120, 61, 2, 880, 881, 7, 32,
	2, 2, 881, 883, 5, 114, 58, 2, 882, 880, 3, 2, 2, 2, 882, 883, 3, 2, 2,
	2, 883, 119, 3, 2, 2, 2, 884, 899, 5, 122, 62, 2, 885, 886, 5, 122, 62,
	2, 886, 887, 7, 32, 2, 2, 887, 888, 7, 32, 2, 2, 888, 890, 3, 2, 2, 2,
	889, 891, 5, 122, 62, 2, 890, 889, 3, 2, 2, 2, 890, 891, 3, 2, 2, 2, 891,
	899, 3, 2, 2, 2, 892, 893, 7, 32, 2, 2, 893, 894, 7, 32, 2, 2, 894, 896,
	3, 2, 2, 2, 895, 897, 5, 122, 62, 2, 896, 895, 3, 2, 2, 2, 896, 897, 3,
	2, 2, 2, 897, 899, 3, 2, 2, 2, 898, 884, 3, 2, 2, 2, 898, 885, 3, 2, 2,
	2, 898, 892, 3, 2, 2, 2, 899, 121, 3, 2, 2, 2, 900, 905, 5, 124, 63, 2,
	901, 902, 7, 32, 2, 2, 902, 904, 5, 124, 63, 2, 903, 901, 3, 2, 2, 2, 904,
	907, 3, 2, 2, 2, 905, 903, 3, 2, 2, 2, 905, 906, 3, 2, 2, 2, 906, 123,
	3, 2, 2, 2, 907, 905, 3, 2, 2, 2, 908, 919, 5, 258, 130, 2, 909, 910, 5,
	258, 130, 2, 910, 911, 5, 258, 130, 2, 911, 912, 5, 258, 130, 2, 912, 920,
	3, 2, 2, 2, 913, 914, 5, 258, 130, 2, 914, 915, 5, 258, 130, 2, 915, 920,
	3, 2, 2, 2, 916, 918, 5, 258, 130, 2, 917, 916, 3, 2, 2, 2, 917, 918, 3,
	2, 2, 2, 918, 920, 3, 2, 2, 2, 919, 909, 3, 2, 2, 2, 919, 913, 3, 2, 2,
	2, 919, 917, 3, 2, 2, 2, 920, 125, 3, 2, 2, 2, 921, 922, 5, 132, 67, 2,
	922, 127, 3, 2, 2, 2, 923, 924, 5, 130, 66, 2, 924, 129, 3, 2, 2, 2, 925,
	929, 9, 4, 2, 2, 926, 929, 9, 5, 2, 2, 927, 929, 9, 6, 2, 2, 928, 925,
	3, 2, 2, 2, 928, 926, 3, 2, 2, 2, 928, 927, 3, 2, 2, 2, 929, 930, 3, 2,
	2, 2, 930, 928, 3, 2, 2, 2, 930, 931, 3, 2, 2, 2, 931, 131, 3, 2, 2, 2,
	932, 935, 5, 270, 136, 2, 933, 935, 9, 7, 2, 2, 934, 932, 3, 2, 2, 2, 934,
	933, 3, 2, 2, 2, 935, 936, 3, 2, 2, 2, 936, 934, 3, 2, 2, 2, 936, 937,
	3, 2, 2, 2, 937, 133, 3, 2, 2, 2, 938, 946, 7, 7, 2, 2, 939, 946, 9, 8,
	2, 2, 940, 946, 9, 9, 2, 2, 941, 946, 9, 10, 2, 2, 942, 946, 9, 11, 2,
	2, 943, 946, 9, 12, 2, 2, 944, 946, 9, 13, 2, 2, 945, 938, 3, 2, 2, 2,
	945, 939, 3, 2, 2, 2, 945, 940, 3, 2, 2, 2, 945, 941, 3, 2, 2, 2, 945,
	942, 3, 2, 2, 2, 945, 943, 3, 2, 2, 2, 945, 944, 3, 2, 2, 2, 946, 135,
	3, 2, 2, 2, 947, 949, 5, 134, 68, 2, 948, 947, 3, 2, 2, 2, 949, 950, 3,
	2, 2, 2, 950, 948, 3, 2, 2, 2, 950, 951, 3, 2, 2, 2, 951, 137, 3, 2, 2,
	2, 952, 959, 9, 4, 2, 2, 953, 959, 9, 5, 2, 2, 954, 959, 9, 14, 2, 2, 955,
	959, 9, 15, 2, 2, 956, 959, 7, 35, 2, 2, 957, 959, 9, 16, 2, 2, 958, 952,
	3, 2, 2, 2, 958, 953, 3, 2, 2, 2, 958, 954, 3, 2, 2, 2, 958, 955, 3, 2,
	2, 2, 958, 956, 3, 2, 2, 2, 958, 957, 3, 2, 2, 2, 959, 139, 3, 2, 2, 2,
	960, 964, 5, 144, 73, 2, 961, 963, 5, 254, 128, 2, 962, 961, 3, 2, 2, 2,
	963, 966, 3, 2, 2, 2, 964, 962, 3, 2, 2, 2, 964, 965, 3, 2, 2, 2, 965,
	141, 3, 2, 2, 2, 966, 964, 3, 2, 2, 2, 967, 970, 5, 242, 122, 2, 968, 970,
	5, 254, 128, 2, 969, 967, 3, 2, 2, 2, 969, 968, 3, 2, 2, 2, 970, 143, 3,
	2, 2, 2, 971, 972, 9, 17, 2, 2, 972, 145, 3, 2, 2, 2, 973, 991, 5, 254,
	128, 2, 974, 975, 5, 144, 73, 2, 975, 976, 5, 254, 128, 2, 976, 991, 3,
	2, 2, 2, 977, 978, 7, 23, 2, 2, 978, 980, 5, 254, 128, 2, 979, 981, 5,
	254, 128, 2, 980, 979, 3, 2, 2, 2, 981, 982, 3, 2, 2, 2, 982, 980, 3, 2,
	2, 2, 982, 983, 3, 2, 2, 2, 983, 991, 3, 2, 2, 2, 984, 985, 7, 24, 2, 2,
	985, 986, 9, 18, 2, 2, 986, 991, 5, 254, 128, 2, 987, 988, 7, 24, 2, 2,
	988, 989, 7, 27, 2, 2, 989, 991, 9, 19, 2, 2, 990, 973, 3, 2, 2, 2, 990,
	974, 3, 2, 2, 2, 990, 977, 3, 2, 2, 2, 990, 984, 3, 2, 2, 2, 990, 987,
	3, 2, 2, 2, 991, 147, 3, 2, 2, 2, 992, 993, 5, 150, 76, 2, 993, 994, 7,
	38, 2, 2, 994, 995, 5, 152, 77, 2, 995, 149, 3, 2, 2, 2, 996, 1000, 5,
	164, 83, 2, 997, 1000, 5, 172, 87, 2, 998, 1000, 5, 214, 108, 2, 999, 996,
	3, 2, 2, 2, 999, 997, 3, 2, 2, 2, 999, 998, 3, 2, 2, 2, 1000, 151, 3, 2,
	2, 2, 1001, 1005, 5, 164, 83, 2, 1002, 1005, 5, 154, 78, 2, 1003, 1005,
	5, 216, 109, 2, 1004, 1001, 3, 2, 2, 2, 1004, 1002, 3, 2, 2, 2, 1004, 1003,
	3, 2, 2, 2, 1005, 153, 3, 2, 2, 2, 1006, 1008, 5, 188, 95, 2, 1007, 1006,
	3, 2, 2, 2, 1007, 1008, 3, 2, 2, 2, 1008, 1009, 3, 2, 2, 2, 1009, 1016,
	7, 65, 2, 2, 1010, 1012, 5, 180, 91, 2, 1011, 1010, 3, 2, 2, 2, 1011, 1012,
	3, 2, 2, 2, 1012, 1013, 3, 2, 2, 2, 1013, 1015, 5, 156, 79, 2, 1014, 1011,
	3, 2, 2, 2, 1015, 1018, 3, 2, 2, 2, 1016, 1014, 3, 2, 2, 2, 1016, 1017,
	3, 2, 2, 2, 1017, 1020, 3, 2, 2, 2, 1018, 1016, 3, 2, 2, 2, 1019, 1021,
	5, 180, 91, 2, 1020, 1019, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021, 1022,
	3, 2, 2, 2, 1022, 1024, 7, 67, 2, 2, 1023, 1025, 5, 188, 95, 2, 1024, 1023,
	3, 2, 2, 2, 1024, 1025, 3, 2, 2, 2, 1025, 155, 3, 2, 2, 2, 1026, 1030,
	9, 20, 2, 2, 1027, 1030, 9, 13, 2, 2, 1028, 1030, 5, 218, 110, 2, 1029,
	1026, 3, 2, 2, 2, 1029, 1027, 3, 2, 2, 2, 1029, 1028, 3, 2, 2, 2, 1030,
	157, 3, 2, 2, 2, 1031, 1053, 5, 242, 122, 2, 1032, 1053, 5, 254, 128, 2,
	1033, 1053, 7, 7, 2, 2, 1034, 1053, 7, 9, 2, 2, 1035, 1053, 7, 10, 2, 2,
	1036, 1053, 7, 11, 2, 2, 1037, 1053, 7, 12, 2, 2, 1038, 1053, 7, 13, 2,
	2, 1039, 1053, 7, 16, 2, 2, 1040, 1053, 7, 17, 2, 2, 1041, 1053, 7, 19,
	2, 2, 1042, 1053, 7, 21, 2, 2, 1043, 1053, 7, 35, 2, 2, 1044, 1053, 7,
	37, 2, 2, 1045, 1053, 7, 68, 2, 2, 1046, 1053, 7, 69, 2, 2, 1047, 1053,
	7, 70, 2, 2, 1048, 1053, 7, 97, 2, 2, 1049, 1053, 7, 98, 2, 2, 1050, 1053,
	7, 99, 2, 2, 1051, 1053, 7, 100, 2, 2, 1052, 1031, 3, 2, 2, 2, 1052, 1032,
	3, 2, 2, 2, 1052, 1033, 3, 2, 2, 2, 1052, 1034, 3, 2, 2, 2, 1052, 1035,
	3, 2, 2, 2, 1052, 1036, 3, 2, 2, 2, 1052, 1037, 3, 2, 2, 2, 1052, 1038,
	3, 2, 2, 2, 1052, 1039, 3, 2, 2, 2, 1052, 1040, 3, 2, 2, 2, 1052, 1041,
	3, 2, 2, 2, 1052, 1042, 3, 2, 2, 2, 1052, 1043, 3, 2, 2, 2, 1052, 1044,
	3, 2, 2, 2, 1052, 1045, 3, 2, 2, 2, 1052, 1046, 3, 2, 2, 2, 1052, 1047,
	3, 2, 2, 2, 1052, 1048, 3, 2, 2, 2, 1052, 1049, 3, 2, 2, 2, 1052, 1050,
	3, 2, 2, 2, 1052, 1051, 3, 2, 2, 2, 1053, 159, 3, 2, 2, 2, 1054, 1056,
	5, 188, 95, 2, 1055, 1054, 3, 2, 2, 2, 1055, 1056, 3, 2, 2, 2, 1056, 1058,
	3, 2, 2, 2, 1057, 1059, 5, 158, 80, 2, 1058, 1057, 3, 2, 2, 2, 1059, 1060,
	3, 2, 2, 2, 1060, 1058, 3, 2, 2, 2, 1060, 1061, 3, 2, 2, 2, 1061, 1063,
	3, 2, 2, 2, 1062, 1064, 5, 188, 95, 2, 1063, 1062, 3, 2, 2, 2, 1063, 1064,
	3, 2, 2, 2, 1064, 161, 3, 2, 2, 2, 1065, 1067, 5, 158, 80, 2, 1066, 1065,
	3, 2, 2, 2, 1067, 1068, 3, 2, 2, 2, 1068, 1066, 3, 2, 2, 2, 1068, 1069,
	3, 2, 2, 2, 1069, 1078, 3, 2, 2, 2, 1070, 1072, 7, 20, 2, 2, 1071, 1073,
	5, 158, 80, 2, 1072, 1071, 3, 2, 2, 2, 1073, 1074, 3, 2, 2, 2, 1074, 1072,
	3, 2, 2, 2, 1074, 1075, 3, 2, 2, 2, 1075, 1077, 3, 2, 2, 2, 1076, 1070,
	3, 2, 2, 2, 1077, 1080, 3, 2, 2, 2, 1078, 1076, 3, 2, 2, 2, 1078, 1079,
	3, 2, 2, 2, 1079, 163, 3, 2, 2, 2, 1080, 1078, 3, 2, 2, 2, 1081, 1083,
	5, 188, 95, 2, 1082, 1081, 3, 2, 2, 2, 1082, 1083, 3, 2, 2, 2, 1083, 1084,
	3, 2, 2, 2, 1084, 1086, 5, 162, 82, 2, 1085, 1087, 5, 188, 95, 2, 1086,
	1085, 3, 2, 2, 2, 1086, 1087, 3, 2, 2, 2, 1087, 165, 3, 2, 2, 2, 1088,
	1102, 7, 14, 2, 2, 1089, 1102, 7, 15, 2, 2, 1090, 1102, 7, 34, 2, 2, 1091,
	1102, 7, 36, 2, 2, 1092, 1102, 7, 65, 2, 2, 1093, 1102, 7, 67, 2, 2, 1094,
	1102, 7, 32, 2, 2, 1095, 1102, 7, 33, 2, 2, 1096, 1102, 7, 38, 2, 2, 1097,
	1102, 7, 66, 2, 2, 1098, 1102, 7, 18, 2, 2, 1099, 1102, 7, 20, 2, 2, 1100,
	1102, 5, 256, 129, 2, 1101, 1088, 3, 2, 2, 2, 1101, 1089, 3, 2, 2, 2, 1101,
	1090, 3, 2, 2, 2, 1101, 1091, 3, 2, 2, 2, 1101, 1092, 3, 2, 2, 2, 1101,
	1093, 3, 2, 2, 2, 1101, 1094, 3, 2, 2, 2, 1101, 1095, 3, 2, 2, 2, 1101,
	1096, 3, 2, 2, 2, 1101, 1097, 3, 2, 2, 2, 1101, 1098, 3, 2, 2, 2, 1101,
	1099, 3, 2, 2, 2, 1101, 1100, 3, 2, 2, 2, 1102, 167, 3, 2, 2, 2, 1103,
	1108, 7, 7, 2, 2, 1104, 1108, 9, 21, 2, 2, 1105, 1108, 9, 22, 2, 2, 1106,
	1108, 5, 192, 97, 2, 1107, 1103, 3, 2, 2, 2, 1107, 1104, 3, 2, 2, 2, 1107,
	1105, 3, 2, 2, 2, 1107, 1106, 3, 2, 2, 2, 1108, 169, 3, 2, 2, 2, 1109,
	1112, 5, 168, 85, 2, 1110, 1112, 5, 178, 90, 2, 1111, 1109, 3, 2, 2, 2,
	1111, 1110, 3, 2, 2, 2, 1112, 171, 3, 2, 2, 2, 1113, 1115, 5, 188, 95,
	2, 1114, 1113, 3, 2, 2, 2, 1114, 1115, 3, 2, 2, 2, 1115, 1116, 3, 2, 2,
	2, 1116, 1123, 5, 256, 129, 2, 1117, 1119, 5, 180, 91, 2, 1118, 1117, 3,
	2, 2, 2, 1118, 1119, 3, 2, 2, 2, 1119, 1120, 3, 2, 2, 2, 1120, 1122, 5,
	170, 86, 2, 1121, 1118, 3, 2, 2, 2, 1122, 1125, 3, 2, 2, 2, 1123, 1121,
	3, 2, 2, 2, 1123, 1124, 3, 2, 2, 2, 1124, 1127, 3, 2, 2, 2, 1125, 1123,
	3, 2, 2, 2, 1126, 1128, 5, 180, 91, 2, 1127, 1126, 3, 2, 2, 2, 1127, 1128,
	3, 2, 2, 2, 1128, 1129, 3, 2, 2, 2, 1129, 1131, 5, 256, 129, 2, 1130, 1132,
	5, 188, 95, 2, 1131, 1130, 3, 2, 2, 2, 1131, 1132, 3, 2, 2, 2, 1132, 173,
	3, 2, 2, 2, 1133, 1136, 5, 160, 81, 2, 1134, 1136, 5, 172, 87, 2, 1135,
	1133, 3, 2, 2, 2, 1135, 1134, 3, 2, 2, 2, 1136, 175, 3, 2, 2, 2, 1137,
	1139, 5, 174, 88, 2, 1138, 1137, 3, 2, 2, 2, 1139, 1140, 3, 2, 2, 2, 1140,
	1138, 3, 2, 2, 2, 1140, 1141, 3, 2, 2, 2, 1141, 1144, 3, 2, 2, 2, 1142,
	1144, 5, 198, 100, 2, 1143, 1138, 3, 2, 2, 2, 1143, 1142, 3, 2, 2, 2, 1144,
	177, 3, 2, 2, 2, 1145, 1148, 7, 66, 2, 2, 1146, 1149, 5, 270, 136, 2, 1147,
	1149, 5, 272, 137, 2, 1148, 1146, 3, 2, 2, 2, 1148, 1147, 3, 2, 2, 2, 1149,
	1152, 3, 2, 2, 2, 1150, 1152, 5, 196, 99, 2, 1151, 1145, 3, 2, 2, 2, 1151,
	1150, 3, 2, 2, 2, 1152, 179, 3, 2, 2, 2, 1153, 1155, 5, 272, 137, 2, 1154,
	1153, 3, 2, 2, 2, 1155, 1158, 3, 2, 2, 2, 1156, 1154, 3, 2, 2, 2, 1156,
	1157, 3, 2, 2, 2, 1157, 1159, 3, 2, 2, 2, 1158, 1156, 3, 2, 2, 2, 1159,
	1161, 5, 250, 126, 2, 1160, 1156, 3, 2, 2, 2, 1160, 1161, 3, 2, 2, 2, 1161,
	1163, 3, 2, 2, 2, 1162, 1164, 5, 272, 137, 2, 1163, 1162, 3, 2, 2, 2, 1164,
	1165, 3, 2, 2, 2, 1165, 1163, 3, 2, 2, 2, 1165, 1166, 3, 2, 2, 2, 1166,
	1169, 3, 2, 2, 2, 1167, 1169, 5, 220, 111, 2, 1168, 1160, 3, 2, 2, 2, 1168,
	1167, 3, 2, 2, 2, 1169, 181, 3, 2, 2, 2, 1170, 1175, 9, 23, 2, 2, 1171,
	1175, 9, 24, 2, 2, 1172, 1175, 9, 22, 2, 2, 1173, 1175, 5, 190, 96, 2,
	1174, 1170, 3, 2, 2, 2, 1174, 1171, 3, 2, 2, 2, 1174, 1172, 3, 2, 2, 2,
	1174, 1173, 3, 2, 2, 2, 1175, 183, 3, 2, 2, 2, 1176, 1180, 5, 182, 92,
	2, 1177, 1180, 5, 178, 90, 2, 1178, 1180, 5, 186, 94, 2, 1179, 1176, 3,
	2, 2, 2, 1179, 1177, 3, 2, 2, 2, 1179, 1178, 3, 2, 2, 2, 1180, 185, 3,
	2, 2, 2, 1181, 1188, 7, 14, 2, 2, 1182, 1184, 5, 180, 91, 2, 1183, 1182,
	3, 2, 2, 2, 1183, 1184, 3, 2, 2, 2, 1184, 1185, 3, 2, 2, 2, 1185, 1187,
	5, 184, 93, 2, 1186, 1183, 3, 2, 2, 2, 1187, 1190, 3, 2, 2, 2, 1188, 1186,
	3, 2, 2, 2, 1188, 1189, 3, 2, 2, 2, 1189, 1192, 3, 2, 2, 2, 1190, 1188,
	3, 2, 2, 2, 1191, 1193, 5, 180, 91, 2, 1192, 1191, 3, 2, 2, 2, 1192, 1193,
	3, 2, 2, 2, 1193, 1194, 3, 2, 2, 2, 1194, 1195, 7, 15, 2, 2, 1195, 187,
	3, 2, 2, 2, 1196, 1198, 5, 180, 91, 2, 1197, 1196, 3, 2, 2, 2, 1197, 1198,
	3, 2, 2, 2, 1198, 1199, 3, 2, 2, 2, 1199, 1201, 5, 186, 94, 2, 1200, 1197,
	3, 2, 2, 2, 1201, 1202, 3, 2, 2, 2, 1202, 1200, 3, 2, 2, 2, 1202, 1203,
	3, 2, 2, 2, 1203, 1205, 3, 2, 2, 2, 1204, 1206, 5, 180, 91, 2, 1205, 1204,
	3, 2, 2, 2, 1205, 1206, 3, 2, 2, 2, 1206, 1209, 3, 2, 2, 2, 1207, 1209,
	5, 180, 91, 2, 1208, 1200, 3, 2, 2, 2, 1208, 1207, 3, 2, 2, 2, 1209, 189,
	3, 2, 2, 2, 1210, 1211, 5, 222, 112, 2, 1211, 191, 3, 2, 2, 2, 1212, 1213,
	5, 222, 112, 2, 1213, 193, 3, 2, 2, 2, 1214, 1218, 7, 101, 2, 2, 1215,
	1218, 5, 222, 112, 2, 1216, 1218, 5, 270, 136, 2, 1217, 1214, 3, 2, 2,
	2, 1217, 1215, 3, 2, 2, 2, 1217, 1216, 3, 2, 2, 2, 1218, 195, 3, 2, 2,
	2, 1219, 1224, 7, 66, 2, 2, 1220, 1225, 7, 101, 2, 2, 1221, 1225, 5, 222,
	112, 2, 1222, 1225, 5, 262, 132, 2, 1223, 1225, 5, 248, 125, 2, 1224, 1220,
	3, 2, 2, 2, 1224, 1221, 3, 2, 2, 2, 1224, 1222, 3, 2, 2, 2, 1224, 1223,
	3, 2, 2, 2, 1225, 197, 3, 2, 2, 2, 1226, 1232, 5, 174, 88, 2, 1227, 1231,
	5, 174, 88, 2, 1228, 1231, 7, 20, 2, 2, 1229, 1231, 5, 188, 95, 2, 1230,
	1227, 3, 2, 2, 2, 1230, 1228, 3, 2, 2, 2, 1230, 1229, 3, 2, 2, 2, 1231,
	1234, 3, 2, 2, 2, 1232, 1230, 3, 2, 2, 2, 1232, 1233, 3, 2, 2, 2, 1233,
	199, 3, 2, 2, 2, 1234, 1232, 3, 2, 2, 2, 1235, 1238, 5, 176, 89, 2, 1236,
	1238, 5, 188, 95, 2, 1237, 1235, 3, 2, 2, 2, 1237, 1236, 3, 2, 2, 2, 1237,
	1238, 3, 2, 2, 2, 1238, 1246, 3, 2, 2, 2, 1239, 1242, 7, 18, 2, 2, 1240,
	1243, 5, 176, 89, 2, 1241, 1243, 5, 188, 95, 2, 1242, 1240, 3, 2, 2, 2,
	1242, 1241, 3, 2, 2, 2, 1242, 1243, 3, 2, 2, 2, 1243, 1245, 3, 2, 2, 2,
	1244, 1239, 3, 2, 2, 2, 1245, 1248, 3, 2, 2, 2, 1246, 1244, 3, 2, 2, 2,
	1246, 1247, 3, 2, 2, 2, 1247, 201, 3, 2, 2, 2, 1248, 1246, 3, 2, 2, 2,
	1249, 1251, 5, 188, 95, 2, 1250, 1249, 3, 2, 2, 2, 1250, 1251, 3, 2, 2,
	2, 1251, 1252, 3, 2, 2, 2, 1252, 1253, 7, 34, 2, 2, 1253, 1254, 5, 204,
	103, 2, 1254, 1255, 5, 148, 75, 2, 1255, 1257, 7, 36, 2, 2, 1256, 1258,
	5, 188, 95, 2, 1257, 1256, 3, 2, 2, 2, 1257, 1258, 3, 2, 2, 2, 1258, 203,
	3, 2, 2, 2, 1259, 1260, 5, 206, 104, 2, 1260, 1261, 7, 32, 2, 2, 1261,
	205, 3, 2, 2, 2, 1262, 1265, 5, 188, 95, 2, 1263, 1265, 7, 18, 2, 2, 1264,
	1262, 3, 2, 2, 2, 1264, 1263, 3, 2, 2, 2, 1265, 1268, 3, 2, 2, 2, 1266,
	1264, 3, 2, 2, 2, 1266, 1267, 3, 2, 2, 2, 1267, 1269, 3, 2, 2, 2, 1268,
	1266, 3, 2, 2, 2, 1269, 1270, 7, 38, 2, 2, 1270, 1281, 5, 152, 77, 2, 1271,
	1273, 7, 18, 2, 2, 1272, 1274, 5, 188, 95, 2, 1273, 1272, 3, 2, 2, 2, 1273,
	1274, 3, 2, 2, 2, 1274, 1277, 3, 2, 2, 2, 1275, 1276, 7, 38, 2, 2, 1276,
	1278, 5, 152, 77, 2, 1277, 1275, 3, 2, 2, 2, 1277, 1278, 3, 2, 2, 2, 1278,
	1280, 3, 2, 2, 2, 1279, 1271, 3, 2, 2, 2, 1280, 1283, 3, 2, 2, 2, 1281,
	1279, 3, 2, 2, 2, 1281, 1282, 3, 2, 2, 2, 1282, 207, 3, 2, 2, 2, 1283,
	1281, 3, 2, 2, 2, 1284, 1286, 5, 188, 95, 2, 1285, 1284, 3, 2, 2, 2, 1285,
	1286, 3, 2, 2, 2, 1286, 1287, 3, 2, 2, 2, 1287, 1289, 7, 18, 2, 2, 1288,
	1285, 3, 2, 2, 2, 1289, 1292, 3, 2, 2, 2, 1290, 1288, 3, 2, 2, 2, 1290,
	1291, 3, 2, 2, 2, 1291, 1293, 3, 2, 2, 2, 1292, 1290, 3, 2, 2, 2, 1293,
	1301, 5, 226, 114, 2, 1294, 1297, 7, 18, 2, 2, 1295, 1298, 5, 226, 114,
	2, 1296, 1298, 5, 188, 95, 2, 1297, 1295, 3, 2, 2, 2, 1297, 1296, 3, 2,
	2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 1300, 3, 2, 2, 2, 1299, 1294, 3, 2,
	2, 2, 1300, 1303, 3, 2, 2, 2, 1301, 1299, 3, 2, 2, 2, 1301, 1302, 3, 2,
	2, 2, 1302, 209, 3, 2, 2, 2, 1303, 1301, 3, 2, 2, 2, 1304, 1306, 5, 188,
	95, 2, 1305, 1304, 3, 2, 2, 2, 1305, 1306, 3, 2, 2, 2, 1306, 1307, 3, 2,
	2, 2, 1307, 1309, 7, 18, 2, 2, 1308, 1305, 3, 2, 2, 2, 1309, 1312, 3, 2,
	2, 2, 1310, 1308, 3, 2, 2, 2, 1310, 1311, 3, 2, 2, 2, 1311, 1313, 3, 2,
	2, 2, 1312, 1310, 3, 2, 2, 2, 1313, 1321, 5, 224, 113, 2, 1314, 1317, 7,
	18, 2, 2, 1315, 1318, 5, 224, 113, 2, 1316, 1318, 5, 188, 95, 2, 1317,
	1315, 3, 2, 2, 2, 1317, 1316, 3, 2, 2, 2, 1317, 1318, 3, 2, 2, 2, 1318,
	1320, 3, 2, 2, 2, 1319, 1314, 3, 2, 2, 2, 1320, 1323, 3, 2, 2, 2, 1321,
	1319, 3, 2, 2, 2, 1321, 1322, 3, 2, 2, 2, 1322, 211, 3, 2, 2, 2, 1323,
	1321, 3, 2, 2, 2, 1324, 1326, 5, 188, 95, 2, 1325, 1324, 3, 2, 2, 2, 1325,
	1326, 3, 2, 2, 2, 1326, 1327, 3, 2, 2, 2, 1327, 1329, 7, 18, 2, 2, 1328,
	1325, 3, 2, 2, 2, 1329, 1330, 3, 2, 2, 2, 1330, 1328, 3, 2, 2, 2, 1330,
	1331, 3, 2, 2, 2, 1331, 1333, 3, 2, 2, 2, 1332, 1334, 5, 188, 95, 2, 1333,
	1332, 3, 2, 2, 2, 1333, 1334, 3, 2, 2, 2, 1334, 213, 3, 2, 2, 2, 1335,
	1340, 5, 174, 88, 2, 1336, 1337, 7, 20, 2, 2, 1337, 1339, 5, 174, 88, 2,
	1338, 1336, 3, 2, 2, 2, 1339, 1342, 3, 2, 2, 2, 1340, 1338, 3, 2, 2, 2,
	1340, 1341, 3, 2, 2, 2, 1341, 215, 3, 2, 2, 2, 1342, 1340, 3, 2, 2, 2,
	1343, 1348, 5, 160, 81, 2, 1344, 1345, 7, 20, 2, 2, 1345, 1347, 5, 160,
	81, 2, 1346, 1344, 3, 2, 2, 2, 1347, 1350, 3, 2, 2, 2, 1348, 1346, 3, 2,
	2, 2, 1348, 1349, 3, 2, 2, 2, 1349, 217, 3, 2, 2, 2, 1350, 1348, 3, 2,
	2, 2, 1351, 1354, 5, 222, 112, 2, 1352, 1354, 5, 178, 90, 2, 1353, 1351,
	3, 2, 2, 2, 1353, 1352, 3, 2, 2, 2, 1354, 219, 3, 2, 2, 2, 1355, 1357,
	5, 272, 137, 2, 1356, 1355, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 1356,
	3, 2, 2, 2, 1358, 1359, 3, 2, 2, 2, 1359, 1368, 3, 2, 2, 2, 1360, 1362,
	5, 250, 126, 2, 1361, 1363, 5, 272, 137, 2, 1362, 1361, 3, 2, 2, 2, 1363,
	1364, 3, 2, 2, 2, 1364, 1362, 3, 2, 2, 2, 1364, 1365, 3, 2, 2, 2, 1365,
	1367, 3, 2, 2, 2, 1366, 1360, 3, 2, 2, 2, 1367, 1370, 3, 2, 2, 2, 1368,
	1366, 3, 2, 2, 2, 1368, 1369, 3, 2, 2, 2, 1369, 221, 3, 2, 2, 2, 1370,
	1368, 3, 2, 2, 2, 1371, 1377, 9, 25, 2, 2, 1372, 1377, 7, 110, 2, 2, 1373,
	1377, 7, 111, 2, 2, 1374, 1377, 9, 26, 2, 2, 1375, 1377, 7, 130, 2, 2,
	1376, 1371, 3, 2, 2, 2, 1376, 1372, 3, 2, 2, 2, 1376, 1373, 3, 2, 2, 2,
	1376, 1374, 3, 2, 2, 2, 1376, 1375, 3, 2, 2, 2, 1377, 223, 3, 2, 2, 2,
	1378, 1381, 5, 226, 114, 2, 1379, 1381, 5, 232, 117, 2, 1380, 1378, 3,
	2, 2, 2, 1380, 1379, 3, 2, 2, 2, 1381, 225, 3, 2, 2, 2, 1382, 1385, 5,
	228, 115, 2, 1383, 1385, 5, 148, 75, 2, 1384, 1382, 3, 2, 2, 2, 1384, 1383,
	3, 2, 2, 2, 1385, 227, 3, 2, 2, 2, 1386, 1388, 5, 234, 118, 2, 1387, 1386,
	3, 2, 2, 2, 1387, 1388, 3, 2, 2, 2, 1388, 1389, 3, 2, 2, 2, 1389, 1390,
	5, 230, 116, 2, 1390, 229, 3, 2, 2, 2, 1391, 1393, 5, 188, 95, 2, 1392,
	1391, 3, 2, 2, 2, 1392, 1393, 3, 2, 2, 2, 1393, 1394, 3, 2, 2, 2, 1394,
	1395, 7, 34, 2, 2, 1395, 1396, 5, 148, 75, 2, 1396, 1398, 7, 36, 2, 2,
	1397, 1399, 5, 188, 95, 2, 1398, 1397, 3, 2, 2, 2, 1398, 1399, 3, 2, 2,
	2, 1399, 1402, 3, 2, 2, 2, 1400, 1402, 5, 202, 102, 2, 1401, 1392, 3, 2,
	2, 2, 1401, 1400, 3, 2, 2, 2, 1402, 231, 3, 2, 2, 2, 1403, 1404, 5, 234,
	118, 2, 1404, 1406, 7, 32, 2, 2, 1405, 1407, 5, 240, 121, 2, 1406, 1405,
	3, 2, 2, 2, 1406, 1407, 3, 2, 2, 2, 1407, 1408, 3, 2, 2, 2, 1408, 1410,
	7, 33, 2, 2, 1409, 1411, 5, 188, 95, 2, 1410, 1409, 3, 2, 2, 2, 1410, 1411,
	3, 2, 2, 2, 1411, 233, 3, 2, 2, 2, 1412, 1413, 5, 176, 89, 2, 1413, 235,
	3, 2, 2, 2, 1414, 1419, 5, 226, 114, 2, 1415, 1416, 7, 18, 2, 2, 1416,
	1418, 5, 226, 114, 2, 1417, 1415, 3, 2, 2, 2, 1418, 1421, 3, 2, 2, 2, 1419,
	1417, 3, 2, 2, 2, 1419, 1420, 3, 2, 2, 2, 1420, 1424, 3, 2, 2, 2, 1421,
	1419, 3, 2, 2, 2, 1422, 1424, 5, 208, 105, 2, 1423, 1414, 3, 2, 2, 2, 1423,
	1422, 3, 2, 2, 2, 1424, 237, 3, 2, 2, 2, 1425, 1430, 5, 224, 113, 2, 1426,
	1427, 7, 18, 2, 2, 1427, 1429, 5, 224, 113, 2, 1428, 1426, 3, 2, 2, 2,
	1429, 1432, 3, 2, 2, 2, 1430, 1428, 3, 2, 2, 2, 1430, 1431, 3, 2, 2, 2,
	1431, 1435, 3, 2, 2, 2, 1432, 1430, 3, 2, 2, 2, 1433, 1435, 5, 210, 106,
	2, 1434, 1425, 3, 2, 2, 2, 1434, 1433, 3, 2, 2, 2, 1435, 239, 3, 2, 2,
	2, 1436, 1440, 5, 236, 119, 2, 1437, 1440, 5, 188, 95, 2, 1438, 1440, 5,
	212, 107, 2, 1439, 1436, 3, 2, 2, 2, 1439, 1437, 3, 2, 2, 2, 1439, 1438,
	3, 2, 2, 2, 1440, 241, 3, 2, 2, 2, 1441, 1444, 9, 12, 2, 2, 1442, 1444,
	9, 27, 2, 2, 1443, 1441, 3, 2, 2, 2, 1443, 1442, 3, 2, 2, 2, 1444, 243,
	3, 2, 2, 2, 1445, 1446, 9, 28, 2, 2, 1446, 245, 3, 2, 2, 2, 1447, 1448,
	9, 29, 2, 2, 1448, 247, 3, 2, 2, 2, 1449, 1450, 7, 5, 2, 2, 1450, 249,
	3, 2, 2, 2, 1451, 1452, 5, 248, 125, 2, 1452, 1453, 5, 262, 132, 2, 1453,
	251, 3, 2, 2, 2, 1454, 1457, 9, 30, 2, 2, 1455, 1457, 7, 130, 2, 2, 1456,
	1454, 3, 2, 2, 2, 1456, 1455, 3, 2, 2, 2, 1457, 253, 3, 2, 2, 2, 1458,
	1459, 9, 11, 2, 2, 1459, 255, 3, 2, 2, 2, 1460, 1461, 7, 8, 2, 2, 1461,
	257, 3, 2, 2, 2, 1462, 1470, 5, 254, 128, 2, 1463, 1470, 9, 31, 2, 2, 1464,
	1470, 9, 32, 2, 2, 1465, 1470, 9, 33, 2, 2, 1466, 1470, 9, 34, 2, 2, 1467,
	1470, 9, 35, 2, 2, 1468, 1470, 9, 36, 2, 2, 1469, 1462, 3, 2, 2, 2, 1469,
	1463, 3, 2, 2, 2, 1469, 1464, 3, 2, 2, 2, 1469, 1465, 3, 2, 2, 2, 1469,
	1466, 3, 2, 2, 2, 1469, 1467, 3, 2, 2, 2, 1469, 1468, 3, 2, 2, 2, 1470,
	259, 3, 2, 2, 2, 1471, 1472, 7, 3, 2, 2, 1472, 261, 3, 2, 2, 2, 1473, 1474,
	7, 4, 2, 2, 1474, 263, 3, 2, 2, 2, 1475, 1480, 5, 272, 137, 2, 1476, 1477,
	5, 250, 126, 2, 1477, 1478, 5, 272, 137, 2, 1478, 1480, 3, 2, 2, 2, 1479,
	1475, 3, 2, 2, 2, 1479, 1476, 3, 2, 2, 2, 1480, 1483, 3, 2, 2, 2, 1481,
	1479, 3, 2, 2, 2, 1481, 1482, 3, 2, 2, 2, 1482, 265, 3, 2, 2, 2, 1483,
	1481, 3, 2, 2, 2, 1484, 1485, 9, 37, 2, 2, 1485, 267, 3, 2, 2, 2, 1486,
	1487, 7, 6, 2, 2, 1487, 269, 3, 2, 2, 2, 1488, 1489, 9, 38, 2, 2, 1489,
	271, 3, 2, 2, 2, 1490, 1493, 5, 268, 135, 2, 1491, 1493, 5, 260, 131, 2,
	1492, 1490, 3, 2, 2, 2, 1492, 1491, 3, 2, 2, 2, 1493, 273, 3, 2, 2, 2,
	1494, 1495, 5, 286, 144, 2, 1495, 1496, 7, 32, 2, 2, 1496, 1499, 5, 276,
	139, 2, 1497, 1498, 7, 37, 2, 2, 1498, 1500, 5, 332, 167, 2, 1499, 1497,
	3, 2, 2, 2, 1499, 1500, 3, 2, 2, 2, 1500, 1503, 3, 2, 2, 2, 1501, 1502,
	7, 9, 2, 2, 1502, 1504, 5, 334, 168, 2, 1503, 1501, 3, 2, 2, 2, 1503, 1504,
	3, 2, 2, 2, 1504, 275, 3, 2, 2, 2, 1505, 1506, 7, 21, 2, 2, 1506, 1507,
	7, 21, 2, 2, 1507, 1508, 3, 2, 2, 2, 1508, 1509, 5, 288, 145, 2, 1509,
	1510, 5, 314, 158, 2, 1510, 1515, 3, 2, 2, 2, 1511, 1515, 5, 316, 159,
	2, 1512, 1515, 5, 320, 161, 2, 1513, 1515, 5, 322, 162, 2, 1514, 1505,
	3, 2, 2, 2, 1514, 1511, 3, 2, 2, 2, 1514, 1512, 3, 2, 2, 2, 1514, 1513,
	3, 2, 2, 2, 1515, 277, 3, 2, 2, 2, 1516, 1519, 5, 274, 138, 2, 1517, 1519,
	5, 282, 142, 2, 1518, 1516, 3, 2, 2, 2, 1518, 1517, 3, 2, 2, 2, 1519, 279,
	3, 2, 2, 2, 1520, 1521, 5, 286, 144, 2, 1521, 1522, 7, 32, 2, 2, 1522,
	1525, 5, 276, 139, 2, 1523, 1524, 7, 37, 2, 2, 1524, 1526, 5, 332, 167,
	2, 1525, 1523, 3, 2, 2, 2, 1525, 1526, 3, 2, 2, 2, 1526, 281, 3, 2, 2,
	2, 1527, 1530, 5, 284, 143, 2, 1528, 1529, 7, 37, 2, 2, 1529, 1531, 5,
	332, 167, 2, 1530, 1528, 3, 2, 2, 2, 1530, 1531, 3, 2, 2, 2, 1531, 1534,
	3, 2, 2, 2, 1532, 1533, 7, 9, 2, 2, 1533, 1535, 5, 334, 168, 2, 1534, 1532,
	3, 2, 2, 2, 1534, 1535, 3, 2, 2, 2, 1535, 283, 3, 2, 2, 2, 1536, 1537,
	7, 21, 2, 2, 1537, 1538, 7, 21, 2, 2, 1538, 1539, 3, 2, 2, 2, 1539, 1540,
	5, 288, 145, 2, 1540, 1541, 5, 314, 158, 2, 1541, 1546, 3, 2, 2, 2, 1542,
	1546, 5, 316, 159, 2, 1543, 1546, 5, 318, 160, 2, 1544, 1546, 5, 322, 162,
	2, 1545, 1536, 3, 2, 2, 2, 1545, 1542, 3, 2, 2, 2, 1545, 1543, 3, 2, 2,
	2, 1545, 1544, 3, 2, 2, 2, 1546, 285, 3, 2, 2, 2, 1547, 1555, 5, 242, 122,
	2, 1548, 1554, 5, 242, 122, 2, 1549, 1554, 5, 254, 128, 2, 1550, 1554,
	7, 17, 2, 2, 1551, 1554, 7, 19, 2, 2, 1552, 1554, 7, 20, 2, 2, 1553, 1548,
	3, 2, 2, 2, 1553, 1549, 3, 2, 2, 2, 1553, 1550, 3, 2, 2, 2, 1553, 1551,
	3, 2, 2, 2, 1553, 1552, 3, 2, 2, 2, 1554, 1557, 3, 2, 2, 2, 1555, 1553,
	3, 2, 2, 2, 1555, 1556, 3, 2, 2, 2, 1556, 287, 3, 2, 2, 2, 1557, 1555,
	3, 2, 2, 2, 1558, 1559, 5, 290, 146, 2, 1559, 1560, 7, 38, 2, 2, 1560,
	1562, 3, 2, 2, 2, 1561, 1558, 3, 2, 2, 2, 1561, 1562, 3, 2, 2, 2, 1562,
	1563, 3, 2, 2, 2, 1563, 1566, 5, 292, 147, 2, 1564, 1565, 7, 32, 2, 2,
	1565, 1567, 5, 294, 148, 2, 1566, 1564, 3, 2, 2, 2, 1566, 1567, 3, 2, 2,
	2, 1567, 289, 3, 2, 2, 2, 1568, 1573, 5, 338, 170, 2, 1569, 1573, 5, 336,
	169, 2, 1570, 1573, 5, 344, 173, 2, 1571, 1573, 7, 32, 2, 2, 1572, 1568,
	3, 2, 2, 2, 1572, 1569, 3, 2, 2, 2, 1572, 1570, 3, 2, 2, 2, 1572, 1571,
	3, 2, 2, 2, 1573, 1576, 3, 2, 2, 2, 1574, 1572, 3, 2, 2, 2, 1574, 1575,
	3, 2, 2, 2, 1575, 291, 3, 2, 2, 2, 1576, 1574, 3, 2, 2, 2, 1577, 1581,
	5, 296, 149, 2, 1578, 1581, 5, 306, 154, 2, 1579, 1581, 5, 310, 156, 2,
	1580, 1577, 3, 2, 2, 2, 1580, 1578, 3, 2, 2, 2, 1580, 1579, 3, 2, 2, 2,
	1581, 293, 3, 2, 2, 2, 1582, 1584, 5, 254, 128, 2, 1583, 1582, 3, 2, 2,
	2, 1584, 1587, 3, 2, 2, 2, 1585, 1583, 3, 2, 2, 2, 1585, 1586, 3, 2, 2,
	2, 1586, 295, 3, 2, 2, 2, 1587, 1585, 3, 2, 2, 2, 1588, 1591, 7, 65, 2,
	2, 1589, 1592, 5, 300, 151, 2, 1590, 1592, 5, 298, 150, 2, 1591, 1589,
	3, 2, 2, 2, 1591, 1590, 3, 2, 2, 2, 1592, 1593, 3, 2, 2, 2, 1593, 1594,
	7, 67, 2, 2, 1594, 297, 3, 2, 2, 2, 1595, 1597, 9, 39, 2, 2, 1596, 1598,
	5, 258, 130, 2, 1597, 1596, 3, 2, 2, 2, 1598, 1599, 3, 2, 2, 2, 1599, 1597,
	3, 2, 2, 2, 1599, 1600, 3, 2, 2, 2, 1600, 1601, 3, 2, 2, 2, 1601, 1605,
	7, 20, 2, 2, 1602, 1606, 5, 338, 170, 2, 1603, 1606, 5, 344, 173, 2, 1604,
	1606, 7, 32, 2, 2, 1605, 1602, 3, 2, 2, 2, 1605, 1603, 3, 2, 2, 2, 1605,
	1604, 3, 2, 2, 2, 1606, 1607, 3, 2, 2, 2, 1607, 1605, 3, 2, 2, 2, 1607,
	1608, 3, 2, 2, 2, 1608, 299, 3, 2, 2, 2, 1609, 1610, 5, 302, 152, 2, 1610,
	1611, 7, 32, 2, 2, 1611, 1612, 3, 2, 2, 2, 1612, 1613, 5, 302, 152, 2,
	1613, 1614, 7, 32, 2, 2, 1614, 1615, 3, 2, 2, 2, 1615, 1616, 5, 302, 152,
	2, 1616, 1617, 7, 32, 2, 2, 1617, 1618, 3, 2, 2, 2, 1618, 1619, 5, 302,
	152, 2, 1619, 1620, 7, 32, 2, 2, 1620, 1621, 3, 2, 2, 2, 1621, 1622, 5,
	302, 152, 2, 1622, 1623, 7, 32, 2, 2, 1623, 1624, 3, 2, 2, 2, 1624, 1625,
	5, 302, 152, 2, 1625, 1626, 7, 32, 2, 2, 1626, 1627, 3, 2, 2, 2, 1627,
	1628, 5, 304, 153, 2, 1628, 1920, 3, 2, 2, 2, 1629, 1630, 7, 32, 2, 2,
	1630, 1631, 7, 32, 2, 2, 1631, 1632, 3, 2, 2, 2, 1632, 1633, 5, 302, 152,
	2, 1633, 1634, 7, 32, 2, 2, 1634, 1635, 3, 2, 2, 2, 1635, 1636, 5, 302,
	152, 2, 1636, 1637, 7, 32, 2, 2, 1637, 1638, 3, 2, 2, 2, 1638, 1639, 5,
	302, 152, 2, 1639, 1640, 7, 32, 2, 2, 1640, 1641, 3, 2, 2, 2, 1641, 1642,
	5, 302, 152, 2, 1642, 1643, 7, 32, 2, 2, 1643, 1644, 3, 2, 2, 2, 1644,
	1645, 5, 302, 152, 2, 1645, 1646, 7, 32, 2, 2, 1646, 1647, 3, 2, 2, 2,
	1647, 1648, 5, 304, 153, 2, 1648, 1920, 3, 2, 2, 2, 1649, 1651, 5, 302,
	152, 2, 1650, 1649, 3, 2, 2, 2, 1650, 1651, 3, 2, 2, 2, 1651, 1652, 3,
	2, 2, 2, 1652, 1653, 7, 32, 2, 2, 1653, 1654, 7, 32, 2, 2, 1654, 1655,
	3, 2, 2, 2, 1655, 1656, 5, 302, 152, 2, 1656, 1657, 7, 32, 2, 2, 1657,
	1658, 3, 2, 2, 2, 1658, 1659, 5, 302, 152, 2, 1659, 1660, 7, 32, 2, 2,
	1660, 1661, 3, 2, 2, 2, 1661, 1662, 5, 302, 152, 2, 1662, 1663, 7, 32,
	2, 2, 1663, 1664, 3, 2, 2, 2, 1664, 1665, 5, 302, 152, 2, 1665, 1666, 7,
	32, 2, 2, 1666, 1667, 3, 2, 2, 2, 1667, 1668, 5, 304, 153, 2, 1668, 1920,
	3, 2, 2, 2, 1669, 1670, 5, 302, 152, 2, 1670, 1671, 7, 32, 2, 2, 1671,
	1673, 3, 2, 2, 2, 1672, 1669, 3, 2, 2, 2, 1672, 1673, 3, 2, 2, 2, 1673,
	1674, 3, 2, 2, 2, 1674, 1676, 5, 302, 152, 2, 1675, 1672, 3, 2, 2, 2, 1675,
	1676, 3, 2, 2, 2, 1676, 1677, 3, 2, 2, 2, 1677, 1678, 7, 32, 2, 2, 1678,
	1679, 7, 32, 2, 2, 1679, 1680, 3, 2, 2, 2, 1680, 1681, 5, 302, 152, 2,
	1681, 1682, 7, 32, 2, 2, 1682, 1683, 3, 2, 2, 2, 1683, 1684, 5, 302, 152,
	2, 1684, 1685, 7, 32, 2, 2, 1685, 1686, 3, 2, 2, 2, 1686, 1687, 5, 302,
	152, 2, 1687, 1688, 7, 32, 2, 2, 1688, 1689, 3, 2, 2, 2, 1689, 1690, 5,
	304, 153, 2, 1690, 1920, 3, 2, 2, 2, 1691, 1692, 5, 302, 152, 2, 1692,
	1693, 7, 32, 2, 2, 1693, 1694, 3, 2, 2, 2, 1694, 1695, 5, 302, 152, 2,
	1695, 1696, 7, 32, 2, 2, 1696, 1703, 3, 2, 2, 2, 1697, 1698, 5, 302, 152,
	2, 1698, 1699, 7, 32, 2, 2, 1699, 1701, 3, 2, 2, 2, 1700, 1697, 3, 2, 2,
	2, 1700, 1701, 3, 2, 2, 2, 1701, 1703, 3, 2, 2, 2, 1702, 1691, 3, 2, 2,
	2, 1702, 1700, 3, 2, 2, 2, 1703, 1704, 3, 2, 2, 2, 1704, 1706, 5, 302,
	152, 2, 1705, 1702, 3, 2, 2, 2, 1705, 1706, 3, 2, 2, 2, 1706, 1707, 3,
	2, 2, 2, 1707, 1708, 7, 32, 2, 2, 1708, 1709, 7, 32, 2, 2, 1709, 1710,
	3, 2, 2, 2, 1710, 1711, 5, 302, 152, 2, 1711, 1712, 7, 32, 2, 2, 1712,
	1713, 3, 2, 2, 2, 1713, 1714, 5, 302, 152, 2, 1714, 1715, 7, 32, 2, 2,
	1715, 1716, 3, 2, 2, 2, 1716, 1717, 5, 304, 153, 2, 1717, 1920, 3, 2, 2,
	2, 1718, 1719, 5, 302, 152, 2, 1719, 1720, 7, 32, 2, 2, 1720, 1721, 3,
	2, 2, 2, 1721, 1722, 5, 302, 152, 2, 1722, 1723, 7, 32, 2, 2, 1723, 1724,
	3, 2, 2, 2, 1724, 1725, 5, 302, 152, 2, 1725, 1726, 7, 32, 2, 2, 1726,
	1739, 3, 2, 2, 2, 1727, 1728, 5, 302, 152, 2, 1728, 1729, 7, 32, 2, 2,
	1729, 1730, 3, 2, 2, 2, 1730, 1731, 5, 302, 152, 2, 1731, 1732, 7, 32,
	2, 2, 1732, 1739, 3, 2, 2, 2, 1733, 1734, 5, 302, 152, 2, 1734, 1735, 7,
	32, 2, 2, 1735, 1737, 3, 2, 2, 2, 1736, 1733, 3, 2, 2, 2, 1736, 1737, 3,
	2, 2, 2, 1737, 1739, 3, 2, 2, 2, 1738, 1718, 3, 2, 2, 2, 1738, 1727, 3,
	2, 2, 2, 1738, 1736, 3, 2, 2, 2, 1739, 1740, 3, 2, 2, 2, 1740, 1742, 5,
	302, 152, 2, 1741, 1738, 3, 2, 2, 2, 1741, 1742, 3, 2, 2, 2, 1742, 1743,
	3, 2, 2, 2, 1743, 1744, 7, 32, 2, 2, 1744, 1745, 7, 32, 2, 2, 1745, 1746,
	3, 2, 2, 2, 1746, 1747, 5, 302, 152, 2, 1747, 1748, 7, 32, 2, 2, 1748,
	1749, 5, 304, 153, 2, 1749, 1920, 3, 2, 2, 2, 1750, 1751, 5, 302, 152,
	2, 1751, 1752, 7, 32, 2, 2, 1752, 1753, 3, 2, 2, 2, 1753, 1754, 5, 302,
	152, 2, 1754, 1755, 7, 32, 2, 2, 1755, 1756, 3, 2, 2, 2, 1756, 1757, 5,
	302, 152, 2, 1757, 1758, 7, 32, 2, 2, 1758, 1759, 3, 2, 2, 2, 1759, 1760,
	5, 302, 152, 2, 1760, 1761, 7, 32, 2, 2, 1761, 1783, 3, 2, 2, 2, 1762,
	1763, 5, 302, 152, 2, 1763, 1764, 7, 32, 2, 2, 1764, 1765, 3, 2, 2, 2,
	1765, 1766, 5, 302, 152, 2, 1766, 1767, 7, 32, 2, 2, 1767, 1768, 3, 2,
	2, 2, 1768, 1769, 5, 302, 152, 2, 1769, 1770, 7, 32, 2, 2, 1770, 1783,
	3, 2, 2, 2, 1771, 1772, 5, 302, 152, 2, 1772, 1773, 7, 32, 2, 2, 1773,
	1774, 3, 2, 2, 2, 1774, 1775, 5, 302, 152, 2, 1775, 1776, 7, 32, 2, 2,
	1776, 1783, 3, 2, 2, 2, 1777, 1778, 5, 302, 152, 2, 1778, 1779, 7, 32,
	2, 2, 1779, 1781, 3, 2, 2, 2, 1780, 1777, 3, 2, 2, 2, 1780, 1781, 3, 2,
	2, 2, 1781, 1783, 3, 2, 2, 2, 1782, 1750, 3, 2, 2, 2, 1782, 1762, 3, 2,
	2, 2, 1782, 1771, 3, 2, 2, 2, 1782, 1780, 3, 2, 2, 2, 1783, 1784, 3, 2,
	2, 2, 1784, 1786, 5, 302, 152, 2, 1785, 1782, 3, 2, 2, 2, 1785, 1786, 3,
	2, 2, 2, 1786, 1787, 3, 2, 2, 2, 1787, 1788, 7, 32, 2, 2, 1788, 1789, 7,
	32, 2, 2, 1789, 1790, 3, 2, 2, 2, 1790, 1920, 5, 304, 153, 2, 1791, 1792,
	5, 302, 152, 2, 1792, 1793, 7, 32, 2, 2, 1793, 1794, 3, 2, 2, 2, 1794,
	1795, 5, 302, 152, 2, 1795, 1796, 7, 32, 2, 2, 1796, 1797, 3, 2, 2, 2,
	1797, 1798, 5, 302, 152, 2, 1798, 1799, 7, 32, 2, 2, 1799, 1800, 3, 2,
	2, 2, 1800, 1801, 5, 302, 152, 2, 1801, 1802, 7, 32, 2, 2, 1802, 1803,
	3, 2, 2, 2, 1803, 1804, 5, 302, 152, 2, 1804, 1805, 7, 32, 2, 2, 1805,
	1839, 3, 2, 2, 2, 1806, 1807, 5, 302, 152, 2, 1807, 1808, 7, 32, 2, 2,
	1808, 1809, 3, 2, 2, 2, 1809, 1810, 5, 302, 152, 2, 1810, 1811, 7, 32,
	2, 2, 1811, 1812, 3, 2, 2, 2, 1812, 1813, 5, 302, 152, 2, 1813, 1814, 7,
	32, 2, 2, 1814, 1815, 3, 2, 2, 2, 1815, 1816, 5, 302, 152, 2, 1816, 1817,
	7, 32, 2, 2, 1817, 1839, 3, 2, 2, 2, 1818, 1819, 5, 302, 152, 2, 1819,
	1820, 7, 32, 2, 2, 1820, 1821, 3, 2, 2, 2, 1821, 1822, 5, 302, 152, 2,
	1822, 1823, 7, 32, 2, 2, 1823, 1824, 3, 2, 2, 2, 1824, 1825, 5, 302, 152,
	2, 1825, 1826, 7, 32, 2, 2, 1826, 1839, 3, 2, 2, 2, 1827, 1828, 5, 302,
	152, 2, 1828, 1829, 7, 32, 2, 2, 1829, 1830, 3, 2, 2, 2, 1830, 1831, 5,
	302, 152, 2, 1831, 1832, 7, 32, 2, 2, 1832, 1839, 3, 2, 2, 2, 1833, 1834,
	5, 302, 152, 2, 1834, 1835, 7, 32, 2, 2, 1835, 1837, 3, 2, 2, 2, 1836,
	1833, 3, 2, 2, 2, 1836, 1837, 3, 2, 2, 2, 1837, 1839, 3, 2, 2, 2, 1838,
	1791, 3, 2, 2, 2, 1838, 1806, 3, 2, 2, 2, 1838, 1818, 3, 2, 2, 2, 1838,
	1827, 3, 2, 2, 2, 1838, 1836, 3, 2, 2, 2, 1839, 1840, 3, 2, 2, 2, 1840,
	1842, 5, 302, 152, 2, 1841, 1838, 3, 2, 2, 2, 1841, 1842, 3, 2, 2, 2, 1842,
	1843, 3, 2, 2, 2, 1843, 1844, 7, 32, 2, 2, 1844, 1845, 7, 32, 2, 2, 1845,
	1846, 3, 2, 2, 2, 1846, 1920, 5, 302, 152, 2, 1847, 1848, 5, 302, 152,
	2, 1848, 1849, 7, 32, 2, 2, 1849, 1850, 3, 2, 2, 2, 1850, 1851, 5, 302,
	152, 2, 1851, 1852, 7, 32, 2, 2, 1852, 1853, 3, 2, 2, 2, 1853, 1854, 5,
	302, 152, 2, 1854, 1855, 7, 32, 2, 2, 1855, 1856, 3, 2, 2, 2, 1856, 1857,
	5, 302, 152, 2, 1857, 1858, 7, 32, 2, 2, 1858, 1859, 3, 2, 2, 2, 1859,
	1860, 5, 302, 152, 2, 1860, 1861, 7, 32, 2, 2, 1861, 1862, 3, 2, 2, 2,
	1862, 1863, 5, 302, 152, 2, 1863, 1864, 7, 32, 2, 2, 1864, 1913, 3, 2,
	2, 2, 1865, 1866, 5, 302, 152, 2, 1866, 1867, 7, 32, 2, 2, 1867, 1868,
	3, 2, 2, 2, 1868, 1869, 5, 302, 152, 2, 1869, 1870, 7, 32, 2, 2, 1870,
	1871, 3, 2, 2, 2, 1871, 1872, 5, 302, 152, 2, 1872, 1873, 7, 32, 2, 2,
	1873, 1874, 3, 2, 2, 2, 1874, 1875, 5, 302, 152, 2, 1875, 1876, 7, 32,
	2, 2, 1876, 1877, 3, 2, 2, 2, 1877, 1878, 5, 302, 152, 2, 1878, 1879, 7,
	32, 2, 2, 1879, 1913, 3, 2, 2, 2, 1880, 1881, 5, 302, 152, 2, 1881, 1882,
	7, 32, 2, 2, 1882, 1883, 3, 2, 2, 2, 1883, 1884, 5, 302, 152, 2, 1884,
	1885, 7, 32, 2, 2, 1885, 1886, 3, 2, 2, 2, 1886, 1887, 5, 302, 152, 2,
	1887, 1888, 7, 32, 2, 2, 1888, 1889, 3, 2, 2, 2, 1889, 1890, 5, 302, 152,
	2, 1890, 1891, 7, 32, 2, 2, 1891, 1913, 3, 2, 2, 2, 1892, 1893, 5, 302,
	152, 2, 1893, 1894, 7, 32, 2, 2, 1894, 1895, 3, 2, 2, 2, 1895, 1896, 5,
	302, 152, 2, 1896, 1897, 7, 32, 2, 2, 1897, 1898, 3, 2, 2, 2, 1898, 1899,
	5, 302, 152, 2, 1899, 1900, 7, 32, 2, 2, 1900, 1913, 3, 2, 2, 2, 1901,
	1902, 5, 302, 152, 2, 1902, 1903, 7, 32, 2, 2, 1903, 1904, 3, 2, 2, 2,
	1904, 1905, 5, 302, 152, 2, 1905, 1906, 7, 32, 2, 2, 1906, 1913, 3, 2,
	2, 2, 1907, 1908, 5, 302, 152, 2, 1908, 1909, 7, 32, 2, 2, 1909, 1911,
	3, 2, 2, 2, 1910, 1907, 3, 2, 2, 2, 1910, 1911, 3, 2, 2, 2, 1911, 1913,
	3, 2, 2, 2, 1912, 1847, 3, 2, 2, 2, 1912, 1865, 3, 2, 2, 2, 1912, 1880,
	3, 2, 2, 2, 1912, 1892, 3, 2, 2, 2, 1912, 1901, 3, 2, 2, 2, 1912, 1910,
	3, 2, 2, 2, 1913, 1914, 3, 2, 2, 2, 1914, 1916, 5, 302, 152, 2, 1915, 1912,
	3, 2, 2, 2, 1915, 1916, 3, 2, 2, 2, 1916, 1917, 3, 2, 2, 2, 1917, 1918,
	7, 32, 2, 2, 1918, 1920, 7, 32, 2, 2, 1919, 1609, 3, 2, 2, 2, 1919, 1629,
	3, 2, 2, 2, 1919, 1650, 3, 2, 2, 2, 1919, 1675, 3, 2, 2, 2, 1919, 1705,
	3, 2, 2, 2, 1919, 1741, 3, 2, 2, 2, 1919, 1785, 3, 2, 2, 2, 1919, 1841,
	3, 2, 2, 2, 1919, 1915, 3, 2, 2, 2, 1920, 301, 3, 2, 2, 2, 1921, 1932,
	5, 258, 130, 2, 1922, 1923, 5, 258, 130, 2, 1923, 1924, 5, 258, 130, 2,
	1924, 1925, 5, 258, 130, 2, 1925, 1933, 3, 2, 2, 2, 1926, 1927, 5, 258,
	130, 2, 1927, 1928, 5, 258, 130, 2, 1928, 1933, 3, 2, 2, 2, 1929, 1931,
	5, 258, 130, 2, 1930, 1929, 3, 2, 2, 2, 1930, 1931, 3, 2, 2, 2, 1931, 1933,
	3, 2, 2, 2, 1932, 1922, 3, 2, 2, 2, 1932, 1926, 3, 2, 2, 2, 1932, 1930,
	3, 2, 2, 2, 1933, 303, 3, 2, 2, 2, 1934, 1935, 5, 302, 152, 2, 1935, 1936,
	7, 32, 2, 2, 1936, 1937, 5, 302, 152, 2, 1937, 1940, 3, 2, 2, 2, 1938,
	1940, 5, 306, 154, 2, 1939, 1934, 3, 2, 2, 2, 1939, 1938, 3, 2, 2, 2, 1940,
	305, 3, 2, 2, 2, 1941, 1942, 5, 308, 155, 2, 1942, 1943, 7, 20, 2, 2, 1943,
	1944, 5, 308, 155, 2, 1944, 1945, 7, 20, 2, 2, 1945, 1946, 5, 308, 155,
	2, 1946, 1947, 7, 20, 2, 2, 1947, 1948, 5, 308, 155, 2, 1948, 307, 3, 2,
	2, 2, 1949, 1964, 5, 254, 128, 2, 1950, 1951, 9, 17, 2, 2, 1951, 1964,
	5, 254, 128, 2, 1952, 1953, 7, 23, 2, 2, 1953, 1954, 5, 254, 128, 2, 1954,
	1955, 5, 254, 128, 2, 1955, 1964, 3, 2, 2, 2, 1956, 1957, 7, 24, 2, 2,
	1957, 1958, 9, 18, 2, 2, 1958, 1964, 5, 254, 128, 2, 1959, 1960, 7, 24,
	2, 2, 1960, 1961, 7, 27, 2, 2, 1961, 1962, 3, 2, 2, 2, 1962, 1964, 9, 19,
	2, 2, 1963, 1949, 3, 2, 2, 2, 1963, 1950, 3, 2, 2, 2, 1963, 1952, 3, 2,
	2, 2, 1963, 1956, 3, 2, 2, 2, 1963, 1959, 3, 2, 2, 2, 1964, 309, 3, 2,
	2, 2, 1965, 1969, 5, 338, 170, 2, 1966, 1969, 5, 336, 169, 2, 1967, 1969,
	5, 344, 173, 2, 1968, 1965, 3, 2, 2, 2, 1968, 1966, 3, 2, 2, 2, 1968, 1967,
	3, 2, 2, 2, 1969, 1972, 3, 2, 2, 2, 1970, 1968, 3, 2, 2, 2, 1970, 1971,
	3, 2, 2, 2, 1971, 311, 3, 2, 2, 2, 1972, 1970, 3, 2, 2, 2, 1973, 1979,
	5, 314, 158, 2, 1974, 1979, 5, 316, 159, 2, 1975, 1979, 5, 318, 160, 2,
	1976, 1979, 5, 320, 161, 2, 1977, 1979, 5, 322, 162, 2, 1978, 1973, 3,
	2, 2, 2, 1978, 1974, 3, 2, 2, 2, 1978, 1975, 3, 2, 2, 2, 1978, 1976, 3,
	2, 2, 2, 1978, 1977, 3, 2, 2, 2, 1979, 313, 3, 2, 2, 2, 1980, 1981, 7,
	21, 2, 2, 1981, 1983, 5, 324, 163, 2, 1982, 1980, 3, 2, 2, 2, 1983, 1986,
	3, 2, 2, 2, 1984, 1982, 3, 2, 2, 2, 1984, 1985, 3, 2, 2, 2, 1985, 315,
	3, 2, 2, 2, 1986, 1984, 3, 2, 2, 2, 1987, 1996, 7, 21, 2, 2, 1988, 1993,
	5, 326, 164, 2, 1989, 1990, 7, 21, 2, 2, 1990, 1992, 5, 324, 163, 2, 1991,
	1989, 3, 2, 2, 2, 1992, 1995, 3, 2, 2, 2, 1993, 1991, 3, 2, 2, 2, 1993,
	1994, 3, 2, 2, 2, 1994, 1997, 3, 2, 2, 2, 1995, 1993, 3, 2, 2, 2, 1996,
	1988, 3, 2, 2, 2, 1996, 1997, 3, 2, 2, 2, 1997, 317, 3, 2, 2, 2, 1998,
	2003, 5, 328, 165, 2, 1999, 2000, 7, 21, 2, 2, 2000, 2002, 5, 324, 163,
	2, 2001, 1999, 3, 2, 2, 2, 2002, 2005, 3, 2, 2, 2, 2003, 2001, 3, 2, 2,
	2, 2003, 2004, 3, 2, 2, 2, 2004, 319, 3, 2, 2, 2, 2005, 2003, 3, 2, 2,
	2, 2006, 2011, 5, 326, 164, 2, 2007, 2008, 7, 21, 2, 2, 2008, 2010, 5,
	324, 163, 2, 2009, 2007, 3, 2, 2, 2, 2010, 2013, 3, 2, 2, 2, 2011, 2009,
	3, 2, 2, 2, 2011, 2012, 3, 2, 2, 2, 2012, 321, 3, 2, 2, 2, 2013, 2011,
	3, 2, 2, 2, 2014, 2015, 3, 2, 2, 2, 2015, 323, 3, 2, 2, 2, 2016, 2018,
	5, 330, 166, 2, 2017, 2016, 3, 2, 2, 2, 2018, 2021, 3, 2, 2, 2, 2019, 2017,
	3, 2, 2, 2, 2019, 2020, 3, 2, 2, 2, 2020, 325, 3, 2, 2, 2, 2021, 2019,
	3, 2, 2, 2, 2022, 2024, 5, 330, 166, 2, 2023, 2022, 3, 2, 2, 2, 2024, 2025,
	3, 2, 2, 2, 2025, 2023, 3, 2, 2, 2, 2025, 2026, 3, 2, 2, 2, 2026, 327,
	3, 2, 2, 2, 2027, 2032, 5, 338, 170, 2, 2028, 2032, 5, 336, 169, 2, 2029,
	2032, 5, 344, 173, 2, 2030, 2032, 7, 38, 2, 2, 2031, 2027, 3, 2, 2, 2,
	2031, 2028, 3, 2, 2, 2, 2031, 2029, 3, 2, 2, 2, 2031, 2030, 3, 2, 2, 2,
	2032, 2033, 3, 2, 2, 2, 2033, 2031, 3, 2, 2, 2, 2033, 2034, 3, 2, 2, 2,
	2034, 329, 3, 2, 2, 2, 2035, 2041, 5, 338, 170, 2, 2036, 2041, 5, 336,
	169, 2, 2037, 2041, 5, 344, 173, 2, 2038, 2041, 7, 32, 2, 2, 2039, 2041,
	7, 38, 2, 2, 2040, 2035, 3, 2, 2, 2, 2040, 2036, 3, 2, 2, 2, 2040, 2037,
	3, 2, 2, 2, 2040, 2038, 3, 2, 2, 2, 2040, 2039, 3, 2, 2, 2, 2041, 331,
	3, 2, 2, 2, 2042, 2046, 5, 330, 166, 2, 2043, 2046, 7, 21, 2, 2, 2044,
	2046, 7, 37, 2, 2, 2045, 2042, 3, 2, 2, 2, 2045, 2043, 3, 2, 2, 2, 2045,
	2044, 3, 2, 2, 2, 2046, 2049, 3, 2, 2, 2, 2047, 2045, 3, 2, 2, 2, 2047,
	2048, 3, 2, 2, 2, 2048, 333, 3, 2, 2, 2, 2049, 2047, 3, 2, 2, 2, 2050,
	2054, 5, 330, 166, 2, 2051, 2054, 7, 21, 2, 2, 2052, 2054, 7, 37, 2, 2,
	2053, 2050, 3, 2, 2, 2, 2053, 2051, 3, 2, 2, 2, 2053, 2052, 3, 2, 2, 2,
	2054, 2057, 3, 2, 2, 2, 2055, 2053, 3, 2, 2, 2, 2055, 2056, 3, 2, 2, 2,
	2056, 335, 3, 2, 2, 2, 2057, 2055, 3, 2, 2, 2, 2058, 2059, 7, 11, 2, 2,
	2059, 2060, 5, 258, 130, 2, 2060, 2061, 5, 258, 130, 2, 2061, 337, 3, 2,
	2, 2, 2062, 2069, 5, 242, 122, 2, 2063, 2069, 5, 254, 128, 2, 2064, 2069,
	7, 19, 2, 2, 2065, 2069, 7, 20, 2, 2, 2066, 2069, 7, 69, 2, 2, 2067, 2069,
	7, 100, 2, 2, 2068, 2062, 3, 2, 2, 2, 2068, 2063, 3, 2, 2, 2, 2068, 2064,
	3, 2, 2, 2, 2068, 2065, 3, 2, 2, 2, 2068, 2066, 3, 2, 2, 2, 2068, 2067,
	3, 2, 2, 2, 2069, 339, 3, 2, 2, 2, 2070, 2073, 5, 342, 172, 2, 2071, 2073,
	5, 344, 173, 2, 2072, 2070, 3, 2, 2, 2, 2072, 2071, 3, 2, 2, 2, 2073, 341,
	3, 2, 2, 2, 2074, 2075, 9, 40, 2, 2, 2075, 343, 3, 2, 2, 2, 2076, 2077,
	9, 41, 2, 2, 2077, 345, 3, 2, 2, 2, 240, 354, 367, 396, 403, 412, 422,
	443, 456, 463, 468, 480, 487, 494, 500, 508, 517, 525, 534, 544, 553, 562,
	567, 578, 584, 590, 597, 602, 612, 619, 626, 633, 636, 642, 644, 648, 655,
	659, 663, 677, 683, 687, 692, 695, 726, 731, 735, 754, 760, 767, 782, 788,
	794, 800, 816, 826, 831, 838, 840, 843, 848, 853, 858, 863, 865, 882, 890,
	896, 898, 905, 917, 919, 928, 930, 934, 936, 945, 950, 958, 964, 969, 982,
	990, 999, 1004, 1007, 1011, 1016, 1020, 1024, 1029, 1052, 1055, 1060, 1063,
	1068, 1074, 1078, 1082, 1086, 1101, 1107, 1111, 1114, 1118, 1123, 1127,
	1131, 1135, 1140, 1143, 1148, 1151, 1156, 1160, 1165, 1168, 1174, 1179,
	1183, 1188, 1192, 1197, 1202, 1205, 1208, 1217, 1224, 1230, 1232, 1237,
	1242, 1246, 1250, 1257, 1264, 1266, 1273, 1277, 1281, 1285, 1290, 1297,
	1301, 1305, 1310, 1317, 1321, 1325, 1330, 1333, 1340, 1348, 1353, 1358,
	1364, 1368, 1376, 1380, 1384, 1387, 1392, 1398, 1401, 1406, 1410, 1419,
	1423, 1430, 1434, 1439, 1443, 1456, 1469, 1479, 1481, 1492, 1499, 1503,
	1514, 1518, 1525, 1530, 1534, 1545, 1553, 1555, 1561, 1566, 1572, 1574,
	1580, 1585, 1591, 1599, 1605, 1607, 1650, 1672, 1675, 1700, 1702, 1705,
	1736, 1738, 1741, 1780, 1782, 1785, 1836, 1838, 1841, 1910, 1912, 1915,
	1919, 1930, 1932, 1939, 1963, 1968, 1970, 1978, 1984, 1993, 1996, 2003,
	2011, 2019, 2025, 2031, 2033, 2040, 2045, 2047, 2053, 2055, 2068, 2072,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'\u0009'", "'\u000A'", "'\u000D'", "' '", "'!'", "'\"'", "'#'", "'$'",
	"'%'", "'&'", "'''", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'",
	"'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "':'",
	"';'", "'<'", "'='", "'>'", "'?'", "'@'", "'A'", "'B'", "'C'", "'D'", "'E'",
	"'F'", "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", "'O'", "'P'",
	"'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", "'Y'", "'Z'", "'['",
	"'\\'", "']'", "'^'", "'_'", "'`'", "'a'", "'b'", "'c'", "'d'", "'e'",
	"'f'", "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", "'m'", "'n'", "'o'", "'p'",
	"'q'", "'r'", "'s'", "'t'", "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'{'",
	"'|'", "'}'", "'~'", "'\u0000'", "'\u0001'", "'\u0002'", "'\u0003'", "'\u0004'",
	"'\u0005'", "'\u0006'", "'\u0007'", "'\u0008'", "'\u000B'", "'\u000C'",
	"'\u000E'", "'\u000F'", "'\u0010'", "'\u0011'", "'\u0012'", "'\u0013'",
	"'\u0014'", "'\u0015'", "'\u0016'", "'\u0017'", "'\u0018'", "'\u0019'",
	"'\u001A'", "'\u001B'", "'\u001C'", "'\u001D'", "'\u001E'", "'\u001F'",
	"'\u007F'", "'\u0080'", "'\u0081'", "'\u0082'", "'\u0083'", "'\u0084'",
	"'\u0085'", "'\u0086'", "'\u0087'", "'\u0088'", "'\u0089'", "'\u008A'",
	"'\u008B'", "'\u008C'", "'\u008D'", "'\u008E'", "'\u008F'", "'\u0090'",
	"'\u0091'", "'\u0092'", "'\u0093'", "'\u0094'", "'\u0095'", "'\u0096'",
	"'\u0097'", "'\u0098'", "'\u0099'", "'\u009A'", "'\u009B'", "'\u009C'",
	"'\u009D'", "'\u009E'", "'\u009F'", "'\u00A0'", "'\u00A1'", "'\u00A2'",
	"'\u00A3'", "'\u00A4'", "'\u00A5'", "'\u00A6'", "'\u00A7'", "'\u00A8'",
	"'\u00A9'", "'\u00AA'", "'\u00AB'", "'\u00AC'", "'\u00AD'", "'\u00AE'",
	"'\u00AF'", "'\u00B0'", "'\u00B1'", "'\u00B2'", "'\u00B3'", "'\u00B4'",
	"'\u00B5'", "'\u00B6'", "'\u00B7'", "'\u00B8'", "'\u00B9'", "'\u00BA'",
	"'\u00BB'", "'\u00BC'", "'\u00BD'", "'\u00BE'", "'\u00BF'", "'\u00C0'",
	"'\u00C1'", "'\u00C2'", "'\u00C3'", "'\u00C4'", "'\u00C5'", "'\u00C6'",
	"'\u00C7'", "'\u00C8'", "'\u00C9'", "'\u00CA'", "'\u00CB'", "'\u00CC'",
	"'\u00CD'", "'\u00CE'", "'\u00CF'", "'\u00D0'", "'\u00D1'", "'\u00D2'",
	"'\u00D3'", "'\u00D4'", "'\u00D5'", "'\u00D6'", "'\u00D7'", "'\u00D8'",
	"'\u00D9'", "'\u00DA'", "'\u00DB'", "'\u00DC'", "'\u00DD'", "'\u00DE'",
	"'\u00DF'", "'\u00E0'", "'\u00E1'", "'\u00E2'", "'\u00E3'", "'\u00E4'",
	"'\u00E5'", "'\u00E6'", "'\u00E7'", "'\u00E8'", "'\u00E9'", "'\u00EA'",
	"'\u00EB'", "'\u00EC'", "'\u00ED'", "'\u00EE'", "'\u00EF'", "'\u00F0'",
	"'\u00F1'", "'\u00F2'", "'\u00F3'", "'\u00F4'", "'\u00F5'", "'\u00F6'",
	"'\u00F7'", "'\u00F8'", "'\u00F9'", "'\u00FA'", "'\u00FB'", "'\u00FC'",
	"'\u00FD'", "'\u00FE'", "'\u00FF'",
}
var symbolicNames = []string{
	"", "TAB", "LF", "CR", "SPACE", "EXCLAMATION", "QUOTE", "HASH", "DOLLAR",
	"PERCENT", "AMPERSAND", "APOSTROPHE", "LEFT_PAREN", "RIGHT_PAREN", "ASTERISK",
	"PLUS", "COMMA", "DASH", "PERIOD", "SLASH", "ZERO", "ONE", "TWO", "THREE",
	"FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "COLON", "SEMICOLON",
	"LESS_THAN", "EQUALS", "GREATER_THAN", "QUESTION", "AT", "CAP_A", "CAP_B",
	"CAP_C", "CAP_D", "CAP_E", "CAP_F", "CAP_G", "CAP_H", "CAP_I", "CAP_J",
	"CAP_K", "CAP_L", "CAP_M", "CAP_N", "CAP_O", "CAP_P", "CAP_Q", "CAP_R",
	"CAP_S", "CAP_T", "CAP_U", "CAP_V", "CAP_W", "CAP_X", "CAP_Y", "CAP_Z",
	"LEFT_BRACE", "BACKSLASH", "RIGHT_BRACE", "CARAT", "UNDERSCORE", "ACCENT",
	"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
	"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "LEFT_CURLY_BRACE",
	"PIPE", "RIGHT_CURLY_BRACE", "TILDE", "U_0000", "U_0001", "U_0002", "U_0003",
	"U_0004", "U_0005", "U_0006", "U_0007", "U_0008", "U_000B", "U_000C", "U_000E",
	"U_000F", "U_0010", "U_0011", "U_0012", "U_0013", "U_0014", "U_0015", "U_0016",
	"U_0017", "U_0018", "U_0019", "U_001A", "U_001B", "U_001C", "U_001D", "U_001E",
	"U_001F", "U_007F", "U_0080", "U_0081", "U_0082", "U_0083", "U_0084", "U_0085",
	"U_0086", "U_0087", "U_0088", "U_0089", "U_008A", "U_008B", "U_008C", "U_008D",
	"U_008E", "U_008F", "U_0090", "U_0091", "U_0092", "U_0093", "U_0094", "U_0095",
	"U_0096", "U_0097", "U_0098", "U_0099", "U_009A", "U_009B", "U_009C", "U_009D",
	"U_009E", "U_009F", "U_00A0", "U_00A1", "U_00A2", "U_00A3", "U_00A4", "U_00A5",
	"U_00A6", "U_00A7", "U_00A8", "U_00A9", "U_00AA", "U_00AB", "U_00AC", "U_00AD",
	"U_00AE", "U_00AF", "U_00B0", "U_00B1", "U_00B2", "U_00B3", "U_00B4", "U_00B5",
	"U_00B6", "U_00B7", "U_00B8", "U_00B9", "U_00BA", "U_00BB", "U_00BC", "U_00BD",
	"U_00BE", "U_00BF", "U_00C0", "U_00C1", "U_00C2", "U_00C3", "U_00C4", "U_00C5",
	"U_00C6", "U_00C7", "U_00C8", "U_00C9", "U_00CA", "U_00CB", "U_00CC", "U_00CD",
	"U_00CE", "U_00CF", "U_00D0", "U_00D1", "U_00D2", "U_00D3", "U_00D4", "U_00D5",
	"U_00D6", "U_00D7", "U_00D8", "U_00D9", "U_00DA", "U_00DB", "U_00DC", "U_00DD",
	"U_00DE", "U_00DF", "U_00E0", "U_00E1", "U_00E2", "U_00E3", "U_00E4", "U_00E5",
	"U_00E6", "U_00E7", "U_00E8", "U_00E9", "U_00EA", "U_00EB", "U_00EC", "U_00ED",
	"U_00EE", "U_00EF", "U_00F0", "U_00F1", "U_00F2", "U_00F3", "U_00F4", "U_00F5",
	"U_00F6", "U_00F7", "U_00F8", "U_00F9", "U_00FA", "U_00FB", "U_00FC", "U_00FD",
	"U_00FE", "U_00FF",
}

var ruleNames = []string{
	"session_description", "proto_version", "origin_field", "session_name_field",
	"information_field", "uri_field", "email_fields", "phone_fields", "connection_field",
	"bandwidth_fields", "time_fields", "repeat_fields", "zone_adjustments",
	"key_field", "attribute_fields", "media_descriptions", "media_field", "username",
	"sess_id", "sess_version", "nettype", "addrtype", "uri", "email_address",
	"address_and_comment", "dispname_and_address", "phone_number", "phone",
	"connection_address", "bwtype", "bandwidth", "start_time", "stop_time",
	"time", "repeat_interval", "typed_time", "fixed_len_time_unit", "key_type",
	"base64", "base64_unit", "base64_pad", "base64_char", "attribute", "att_field",
	"att_value", "media", "fmt", "proto", "port", "unicast_address", "multicast_address",
	"ip4_multicast", "m1", "ip6_multicast", "ttl", "fqdn", "ip4_address", "b1",
	"ip6_address", "hexpart", "hexseq", "hex4", "extn_addr", "text", "byte_string",
	"non_ws_string", "token_char", "token", "email_safe", "integer", "alpha_numeric",
	"pos_digit", "decimal_uchar", "addr_spec", "local_part", "domain", "domain_literal",
	"dtext", "atext", "atom", "dot_atom_text", "dot_atom", "specials", "qtext",
	"qcontent", "quoted_string", "word", "phrase", "quoted_pair", "fws", "ctext",
	"ccontent", "comment", "cfws", "obs_ctext", "obs_qtext", "obs_utext", "obs_qp",
	"obs_phrase", "obs_phrase_list", "obs_angle_addr", "obs_route", "obs_domain_list",
	"obs_mbox_list", "obs_addr_list", "obs_group_list", "obs_local_part", "obs_domain",
	"obs_dtext", "obs_fws", "obs_no_ws_ctl", "address", "mailbox", "name_addr",
	"angle_addr", "group", "display_name", "mailbox_list", "address_list",
	"group_list", "alpha", "bit", "char_1", "cr", "crlf", "ctl", "digit", "dquote",
	"hexdig", "htab", "lf", "lwsp", "octet", "sp", "vchar", "wsp", "xxuri",
	"hier_part", "uri_reference", "absolute_uri", "relative_ref", "relative_part",
	"scheme", "authority", "userinfo", "host", "xport", "ip_literal", "ipvfuture",
	"ipv6address", "h16", "ls32", "ipv4address", "dec_octet", "reg_name", "path",
	"path_abempty", "path_absolute", "path_noscheme", "path_rootless", "path_empty",
	"segment", "segment_nz", "segment_nz_nc", "pchar", "query", "fragment_1",
	"pct_encoded", "unreserved", "reserved", "gen_delims", "sub_delims",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type sdpParser struct {
	*antlr.BaseParser
}

func NewsdpParser(input antlr.TokenStream) *sdpParser {
	this := new(sdpParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "sdp.g4"

	return this
}

// sdpParser tokens.
const (
	sdpParserEOF               = antlr.TokenEOF
	sdpParserTAB               = 1
	sdpParserLF                = 2
	sdpParserCR                = 3
	sdpParserSPACE             = 4
	sdpParserEXCLAMATION       = 5
	sdpParserQUOTE             = 6
	sdpParserHASH              = 7
	sdpParserDOLLAR            = 8
	sdpParserPERCENT           = 9
	sdpParserAMPERSAND         = 10
	sdpParserAPOSTROPHE        = 11
	sdpParserLEFT_PAREN        = 12
	sdpParserRIGHT_PAREN       = 13
	sdpParserASTERISK          = 14
	sdpParserPLUS              = 15
	sdpParserCOMMA             = 16
	sdpParserDASH              = 17
	sdpParserPERIOD            = 18
	sdpParserSLASH             = 19
	sdpParserZERO              = 20
	sdpParserONE               = 21
	sdpParserTWO               = 22
	sdpParserTHREE             = 23
	sdpParserFOUR              = 24
	sdpParserFIVE              = 25
	sdpParserSIX               = 26
	sdpParserSEVEN             = 27
	sdpParserEIGHT             = 28
	sdpParserNINE              = 29
	sdpParserCOLON             = 30
	sdpParserSEMICOLON         = 31
	sdpParserLESS_THAN         = 32
	sdpParserEQUALS            = 33
	sdpParserGREATER_THAN      = 34
	sdpParserQUESTION          = 35
	sdpParserAT                = 36
	sdpParserCAP_A             = 37
	sdpParserCAP_B             = 38
	sdpParserCAP_C             = 39
	sdpParserCAP_D             = 40
	sdpParserCAP_E             = 41
	sdpParserCAP_F             = 42
	sdpParserCAP_G             = 43
	sdpParserCAP_H             = 44
	sdpParserCAP_I             = 45
	sdpParserCAP_J             = 46
	sdpParserCAP_K             = 47
	sdpParserCAP_L             = 48
	sdpParserCAP_M             = 49
	sdpParserCAP_N             = 50
	sdpParserCAP_O             = 51
	sdpParserCAP_P             = 52
	sdpParserCAP_Q             = 53
	sdpParserCAP_R             = 54
	sdpParserCAP_S             = 55
	sdpParserCAP_T             = 56
	sdpParserCAP_U             = 57
	sdpParserCAP_V             = 58
	sdpParserCAP_W             = 59
	sdpParserCAP_X             = 60
	sdpParserCAP_Y             = 61
	sdpParserCAP_Z             = 62
	sdpParserLEFT_BRACE        = 63
	sdpParserBACKSLASH         = 64
	sdpParserRIGHT_BRACE       = 65
	sdpParserCARAT             = 66
	sdpParserUNDERSCORE        = 67
	sdpParserACCENT            = 68
	sdpParserA                 = 69
	sdpParserB                 = 70
	sdpParserC                 = 71
	sdpParserD                 = 72
	sdpParserE                 = 73
	sdpParserF                 = 74
	sdpParserG                 = 75
	sdpParserH                 = 76
	sdpParserI                 = 77
	sdpParserJ                 = 78
	sdpParserK                 = 79
	sdpParserL                 = 80
	sdpParserM                 = 81
	sdpParserN                 = 82
	sdpParserO                 = 83
	sdpParserP                 = 84
	sdpParserQ                 = 85
	sdpParserR                 = 86
	sdpParserS                 = 87
	sdpParserT                 = 88
	sdpParserU                 = 89
	sdpParserV                 = 90
	sdpParserW                 = 91
	sdpParserX                 = 92
	sdpParserY                 = 93
	sdpParserZ                 = 94
	sdpParserLEFT_CURLY_BRACE  = 95
	sdpParserPIPE              = 96
	sdpParserRIGHT_CURLY_BRACE = 97
	sdpParserTILDE             = 98
	sdpParserU_0000            = 99
	sdpParserU_0001            = 100
	sdpParserU_0002            = 101
	sdpParserU_0003            = 102
	sdpParserU_0004            = 103
	sdpParserU_0005            = 104
	sdpParserU_0006            = 105
	sdpParserU_0007            = 106
	sdpParserU_0008            = 107
	sdpParserU_000B            = 108
	sdpParserU_000C            = 109
	sdpParserU_000E            = 110
	sdpParserU_000F            = 111
	sdpParserU_0010            = 112
	sdpParserU_0011            = 113
	sdpParserU_0012            = 114
	sdpParserU_0013            = 115
	sdpParserU_0014            = 116
	sdpParserU_0015            = 117
	sdpParserU_0016            = 118
	sdpParserU_0017            = 119
	sdpParserU_0018            = 120
	sdpParserU_0019            = 121
	sdpParserU_001A            = 122
	sdpParserU_001B            = 123
	sdpParserU_001C            = 124
	sdpParserU_001D            = 125
	sdpParserU_001E            = 126
	sdpParserU_001F            = 127
	sdpParserU_007F            = 128
	sdpParserU_0080            = 129
	sdpParserU_0081            = 130
	sdpParserU_0082            = 131
	sdpParserU_0083            = 132
	sdpParserU_0084            = 133
	sdpParserU_0085            = 134
	sdpParserU_0086            = 135
	sdpParserU_0087            = 136
	sdpParserU_0088            = 137
	sdpParserU_0089            = 138
	sdpParserU_008A            = 139
	sdpParserU_008B            = 140
	sdpParserU_008C            = 141
	sdpParserU_008D            = 142
	sdpParserU_008E            = 143
	sdpParserU_008F            = 144
	sdpParserU_0090            = 145
	sdpParserU_0091            = 146
	sdpParserU_0092            = 147
	sdpParserU_0093            = 148
	sdpParserU_0094            = 149
	sdpParserU_0095            = 150
	sdpParserU_0096            = 151
	sdpParserU_0097            = 152
	sdpParserU_0098            = 153
	sdpParserU_0099            = 154
	sdpParserU_009A            = 155
	sdpParserU_009B            = 156
	sdpParserU_009C            = 157
	sdpParserU_009D            = 158
	sdpParserU_009E            = 159
	sdpParserU_009F            = 160
	sdpParserU_00A0            = 161
	sdpParserU_00A1            = 162
	sdpParserU_00A2            = 163
	sdpParserU_00A3            = 164
	sdpParserU_00A4            = 165
	sdpParserU_00A5            = 166
	sdpParserU_00A6            = 167
	sdpParserU_00A7            = 168
	sdpParserU_00A8            = 169
	sdpParserU_00A9            = 170
	sdpParserU_00AA            = 171
	sdpParserU_00AB            = 172
	sdpParserU_00AC            = 173
	sdpParserU_00AD            = 174
	sdpParserU_00AE            = 175
	sdpParserU_00AF            = 176
	sdpParserU_00B0            = 177
	sdpParserU_00B1            = 178
	sdpParserU_00B2            = 179
	sdpParserU_00B3            = 180
	sdpParserU_00B4            = 181
	sdpParserU_00B5            = 182
	sdpParserU_00B6            = 183
	sdpParserU_00B7            = 184
	sdpParserU_00B8            = 185
	sdpParserU_00B9            = 186
	sdpParserU_00BA            = 187
	sdpParserU_00BB            = 188
	sdpParserU_00BC            = 189
	sdpParserU_00BD            = 190
	sdpParserU_00BE            = 191
	sdpParserU_00BF            = 192
	sdpParserU_00C0            = 193
	sdpParserU_00C1            = 194
	sdpParserU_00C2            = 195
	sdpParserU_00C3            = 196
	sdpParserU_00C4            = 197
	sdpParserU_00C5            = 198
	sdpParserU_00C6            = 199
	sdpParserU_00C7            = 200
	sdpParserU_00C8            = 201
	sdpParserU_00C9            = 202
	sdpParserU_00CA            = 203
	sdpParserU_00CB            = 204
	sdpParserU_00CC            = 205
	sdpParserU_00CD            = 206
	sdpParserU_00CE            = 207
	sdpParserU_00CF            = 208
	sdpParserU_00D0            = 209
	sdpParserU_00D1            = 210
	sdpParserU_00D2            = 211
	sdpParserU_00D3            = 212
	sdpParserU_00D4            = 213
	sdpParserU_00D5            = 214
	sdpParserU_00D6            = 215
	sdpParserU_00D7            = 216
	sdpParserU_00D8            = 217
	sdpParserU_00D9            = 218
	sdpParserU_00DA            = 219
	sdpParserU_00DB            = 220
	sdpParserU_00DC            = 221
	sdpParserU_00DD            = 222
	sdpParserU_00DE            = 223
	sdpParserU_00DF            = 224
	sdpParserU_00E0            = 225
	sdpParserU_00E1            = 226
	sdpParserU_00E2            = 227
	sdpParserU_00E3            = 228
	sdpParserU_00E4            = 229
	sdpParserU_00E5            = 230
	sdpParserU_00E6            = 231
	sdpParserU_00E7            = 232
	sdpParserU_00E8            = 233
	sdpParserU_00E9            = 234
	sdpParserU_00EA            = 235
	sdpParserU_00EB            = 236
	sdpParserU_00EC            = 237
	sdpParserU_00ED            = 238
	sdpParserU_00EE            = 239
	sdpParserU_00EF            = 240
	sdpParserU_00F0            = 241
	sdpParserU_00F1            = 242
	sdpParserU_00F2            = 243
	sdpParserU_00F3            = 244
	sdpParserU_00F4            = 245
	sdpParserU_00F5            = 246
	sdpParserU_00F6            = 247
	sdpParserU_00F7            = 248
	sdpParserU_00F8            = 249
	sdpParserU_00F9            = 250
	sdpParserU_00FA            = 251
	sdpParserU_00FB            = 252
	sdpParserU_00FC            = 253
	sdpParserU_00FD            = 254
	sdpParserU_00FE            = 255
	sdpParserU_00FF            = 256
)

// sdpParser rules.
const (
	sdpParserRULE_session_description  = 0
	sdpParserRULE_proto_version        = 1
	sdpParserRULE_origin_field         = 2
	sdpParserRULE_session_name_field   = 3
	sdpParserRULE_information_field    = 4
	sdpParserRULE_uri_field            = 5
	sdpParserRULE_email_fields         = 6
	sdpParserRULE_phone_fields         = 7
	sdpParserRULE_connection_field     = 8
	sdpParserRULE_bandwidth_fields     = 9
	sdpParserRULE_time_fields          = 10
	sdpParserRULE_repeat_fields        = 11
	sdpParserRULE_zone_adjustments     = 12
	sdpParserRULE_key_field            = 13
	sdpParserRULE_attribute_fields     = 14
	sdpParserRULE_media_descriptions   = 15
	sdpParserRULE_media_field          = 16
	sdpParserRULE_username             = 17
	sdpParserRULE_sess_id              = 18
	sdpParserRULE_sess_version         = 19
	sdpParserRULE_nettype              = 20
	sdpParserRULE_addrtype             = 21
	sdpParserRULE_uri                  = 22
	sdpParserRULE_email_address        = 23
	sdpParserRULE_address_and_comment  = 24
	sdpParserRULE_dispname_and_address = 25
	sdpParserRULE_phone_number         = 26
	sdpParserRULE_phone                = 27
	sdpParserRULE_connection_address   = 28
	sdpParserRULE_bwtype               = 29
	sdpParserRULE_bandwidth            = 30
	sdpParserRULE_start_time           = 31
	sdpParserRULE_stop_time            = 32
	sdpParserRULE_time                 = 33
	sdpParserRULE_repeat_interval      = 34
	sdpParserRULE_typed_time           = 35
	sdpParserRULE_fixed_len_time_unit  = 36
	sdpParserRULE_key_type             = 37
	sdpParserRULE_base64               = 38
	sdpParserRULE_base64_unit          = 39
	sdpParserRULE_base64_pad           = 40
	sdpParserRULE_base64_char          = 41
	sdpParserRULE_attribute            = 42
	sdpParserRULE_att_field            = 43
	sdpParserRULE_att_value            = 44
	sdpParserRULE_media                = 45
	sdpParserRULE_fmt                  = 46
	sdpParserRULE_proto                = 47
	sdpParserRULE_port                 = 48
	sdpParserRULE_unicast_address      = 49
	sdpParserRULE_multicast_address    = 50
	sdpParserRULE_ip4_multicast        = 51
	sdpParserRULE_m1                   = 52
	sdpParserRULE_ip6_multicast        = 53
	sdpParserRULE_ttl                  = 54
	sdpParserRULE_fqdn                 = 55
	sdpParserRULE_ip4_address          = 56
	sdpParserRULE_b1                   = 57
	sdpParserRULE_ip6_address          = 58
	sdpParserRULE_hexpart              = 59
	sdpParserRULE_hexseq               = 60
	sdpParserRULE_hex4                 = 61
	sdpParserRULE_extn_addr            = 62
	sdpParserRULE_text                 = 63
	sdpParserRULE_byte_string          = 64
	sdpParserRULE_non_ws_string        = 65
	sdpParserRULE_token_char           = 66
	sdpParserRULE_token                = 67
	sdpParserRULE_email_safe           = 68
	sdpParserRULE_integer              = 69
	sdpParserRULE_alpha_numeric        = 70
	sdpParserRULE_pos_digit            = 71
	sdpParserRULE_decimal_uchar        = 72
	sdpParserRULE_addr_spec            = 73
	sdpParserRULE_local_part           = 74
	sdpParserRULE_domain               = 75
	sdpParserRULE_domain_literal       = 76
	sdpParserRULE_dtext                = 77
	sdpParserRULE_atext                = 78
	sdpParserRULE_atom                 = 79
	sdpParserRULE_dot_atom_text        = 80
	sdpParserRULE_dot_atom             = 81
	sdpParserRULE_specials             = 82
	sdpParserRULE_qtext                = 83
	sdpParserRULE_qcontent             = 84
	sdpParserRULE_quoted_string        = 85
	sdpParserRULE_word                 = 86
	sdpParserRULE_phrase               = 87
	sdpParserRULE_quoted_pair          = 88
	sdpParserRULE_fws                  = 89
	sdpParserRULE_ctext                = 90
	sdpParserRULE_ccontent             = 91
	sdpParserRULE_comment              = 92
	sdpParserRULE_cfws                 = 93
	sdpParserRULE_obs_ctext            = 94
	sdpParserRULE_obs_qtext            = 95
	sdpParserRULE_obs_utext            = 96
	sdpParserRULE_obs_qp               = 97
	sdpParserRULE_obs_phrase           = 98
	sdpParserRULE_obs_phrase_list      = 99
	sdpParserRULE_obs_angle_addr       = 100
	sdpParserRULE_obs_route            = 101
	sdpParserRULE_obs_domain_list      = 102
	sdpParserRULE_obs_mbox_list        = 103
	sdpParserRULE_obs_addr_list        = 104
	sdpParserRULE_obs_group_list       = 105
	sdpParserRULE_obs_local_part       = 106
	sdpParserRULE_obs_domain           = 107
	sdpParserRULE_obs_dtext            = 108
	sdpParserRULE_obs_fws              = 109
	sdpParserRULE_obs_no_ws_ctl        = 110
	sdpParserRULE_address              = 111
	sdpParserRULE_mailbox              = 112
	sdpParserRULE_name_addr            = 113
	sdpParserRULE_angle_addr           = 114
	sdpParserRULE_group                = 115
	sdpParserRULE_display_name         = 116
	sdpParserRULE_mailbox_list         = 117
	sdpParserRULE_address_list         = 118
	sdpParserRULE_group_list           = 119
	sdpParserRULE_alpha                = 120
	sdpParserRULE_bit                  = 121
	sdpParserRULE_char_1               = 122
	sdpParserRULE_cr                   = 123
	sdpParserRULE_crlf                 = 124
	sdpParserRULE_ctl                  = 125
	sdpParserRULE_digit                = 126
	sdpParserRULE_dquote               = 127
	sdpParserRULE_hexdig               = 128
	sdpParserRULE_htab                 = 129
	sdpParserRULE_lf                   = 130
	sdpParserRULE_lwsp                 = 131
	sdpParserRULE_octet                = 132
	sdpParserRULE_sp                   = 133
	sdpParserRULE_vchar                = 134
	sdpParserRULE_wsp                  = 135
	sdpParserRULE_xxuri                = 136
	sdpParserRULE_hier_part            = 137
	sdpParserRULE_uri_reference        = 138
	sdpParserRULE_absolute_uri         = 139
	sdpParserRULE_relative_ref         = 140
	sdpParserRULE_relative_part        = 141
	sdpParserRULE_scheme               = 142
	sdpParserRULE_authority            = 143
	sdpParserRULE_userinfo             = 144
	sdpParserRULE_host                 = 145
	sdpParserRULE_xport                = 146
	sdpParserRULE_ip_literal           = 147
	sdpParserRULE_ipvfuture            = 148
	sdpParserRULE_ipv6address          = 149
	sdpParserRULE_h16                  = 150
	sdpParserRULE_ls32                 = 151
	sdpParserRULE_ipv4address          = 152
	sdpParserRULE_dec_octet            = 153
	sdpParserRULE_reg_name             = 154
	sdpParserRULE_path                 = 155
	sdpParserRULE_path_abempty         = 156
	sdpParserRULE_path_absolute        = 157
	sdpParserRULE_path_noscheme        = 158
	sdpParserRULE_path_rootless        = 159
	sdpParserRULE_path_empty           = 160
	sdpParserRULE_segment              = 161
	sdpParserRULE_segment_nz           = 162
	sdpParserRULE_segment_nz_nc        = 163
	sdpParserRULE_pchar                = 164
	sdpParserRULE_query                = 165
	sdpParserRULE_fragment_1           = 166
	sdpParserRULE_pct_encoded          = 167
	sdpParserRULE_unreserved           = 168
	sdpParserRULE_reserved             = 169
	sdpParserRULE_gen_delims           = 170
	sdpParserRULE_sub_delims           = 171
)

// ISession_descriptionContext is an interface to support dynamic dispatch.
type ISession_descriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSession_descriptionContext differentiates from other interfaces.
	IsSession_descriptionContext()
}

type Session_descriptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySession_descriptionContext() *Session_descriptionContext {
	var p = new(Session_descriptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_session_description
	return p
}

func (*Session_descriptionContext) IsSession_descriptionContext() {}

func NewSession_descriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_descriptionContext {
	var p = new(Session_descriptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_session_description

	return p
}

func (s *Session_descriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_descriptionContext) Proto_version() IProto_versionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProto_versionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProto_versionContext)
}

func (s *Session_descriptionContext) Origin_field() IOrigin_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrigin_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrigin_fieldContext)
}

func (s *Session_descriptionContext) Session_name_field() ISession_name_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISession_name_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISession_name_fieldContext)
}

func (s *Session_descriptionContext) Information_field() IInformation_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInformation_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInformation_fieldContext)
}

func (s *Session_descriptionContext) Uri_field() IUri_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUri_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUri_fieldContext)
}

func (s *Session_descriptionContext) Email_fields() IEmail_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmail_fieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmail_fieldsContext)
}

func (s *Session_descriptionContext) Phone_fields() IPhone_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPhone_fieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPhone_fieldsContext)
}

func (s *Session_descriptionContext) Bandwidth_fields() IBandwidth_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBandwidth_fieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBandwidth_fieldsContext)
}

func (s *Session_descriptionContext) Time_fields() ITime_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITime_fieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITime_fieldsContext)
}

func (s *Session_descriptionContext) Key_field() IKey_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKey_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKey_fieldContext)
}

func (s *Session_descriptionContext) Attribute_fields() IAttribute_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_fieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttribute_fieldsContext)
}

func (s *Session_descriptionContext) Media_descriptions() IMedia_descriptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMedia_descriptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMedia_descriptionsContext)
}

func (s *Session_descriptionContext) Connection_field() IConnection_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnection_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConnection_fieldContext)
}

func (s *Session_descriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_descriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Session_descriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSession_description(s)
	}
}

func (s *Session_descriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSession_description(s)
	}
}

func (p *sdpParser) Session_description() (localctx ISession_descriptionContext) {
	localctx = NewSession_descriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, sdpParserRULE_session_description)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(344)
		p.Proto_version()
	}
	{
		p.SetState(345)
		p.Origin_field()
	}
	{
		p.SetState(346)
		p.Session_name_field()
	}
	{
		p.SetState(347)
		p.Information_field()
	}
	{
		p.SetState(348)
		p.Uri_field()
	}
	{
		p.SetState(349)
		p.Email_fields()
	}
	{
		p.SetState(350)
		p.Phone_fields()
	}
	p.SetState(352)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserC {
		{
			p.SetState(351)
			p.Connection_field()
		}

	}
	{
		p.SetState(354)
		p.Bandwidth_fields()
	}
	{
		p.SetState(355)
		p.Time_fields()
	}
	{
		p.SetState(356)
		p.Key_field()
	}
	{
		p.SetState(357)
		p.Attribute_fields()
	}
	{
		p.SetState(358)
		p.Media_descriptions()
	}

	return localctx
}

// IProto_versionContext is an interface to support dynamic dispatch.
type IProto_versionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProto_versionContext differentiates from other interfaces.
	IsProto_versionContext()
}

type Proto_versionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProto_versionContext() *Proto_versionContext {
	var p = new(Proto_versionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_proto_version
	return p
}

func (*Proto_versionContext) IsProto_versionContext() {}

func NewProto_versionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Proto_versionContext {
	var p = new(Proto_versionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_proto_version

	return p
}

func (s *Proto_versionContext) GetParser() antlr.Parser { return s.parser }

func (s *Proto_versionContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *Proto_versionContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Proto_versionContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Proto_versionContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *Proto_versionContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Proto_versionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Proto_versionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Proto_versionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterProto_version(s)
	}
}

func (s *Proto_versionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitProto_version(s)
	}
}

func (p *sdpParser) Proto_version() (localctx IProto_versionContext) {
	localctx = NewProto_versionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, sdpParserRULE_proto_version)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(360)
		p.Match(sdpParserV)
	}
	{
		p.SetState(361)
		p.Match(sdpParserEQUALS)
	}
	p.SetState(363)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
		{
			p.SetState(362)
			p.Digit()
		}

		p.SetState(365)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(367)
		p.Crlf()
	}

	return localctx
}

// IOrigin_fieldContext is an interface to support dynamic dispatch.
type IOrigin_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrigin_fieldContext differentiates from other interfaces.
	IsOrigin_fieldContext()
}

type Origin_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrigin_fieldContext() *Origin_fieldContext {
	var p = new(Origin_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_origin_field
	return p
}

func (*Origin_fieldContext) IsOrigin_fieldContext() {}

func NewOrigin_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Origin_fieldContext {
	var p = new(Origin_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_origin_field

	return p
}

func (s *Origin_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Origin_fieldContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *Origin_fieldContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Origin_fieldContext) Username() IUsernameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsernameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsernameContext)
}

func (s *Origin_fieldContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Origin_fieldContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Origin_fieldContext) Sess_id() ISess_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISess_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISess_idContext)
}

func (s *Origin_fieldContext) Sess_version() ISess_versionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISess_versionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISess_versionContext)
}

func (s *Origin_fieldContext) Nettype() INettypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INettypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INettypeContext)
}

func (s *Origin_fieldContext) Addrtype() IAddrtypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddrtypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *Origin_fieldContext) Unicast_address() IUnicast_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnicast_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnicast_addressContext)
}

func (s *Origin_fieldContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Origin_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Origin_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Origin_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterOrigin_field(s)
	}
}

func (s *Origin_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitOrigin_field(s)
	}
}

func (p *sdpParser) Origin_field() (localctx IOrigin_fieldContext) {
	localctx = NewOrigin_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, sdpParserRULE_origin_field)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(369)
		p.Match(sdpParserO)
	}
	{
		p.SetState(370)
		p.Match(sdpParserEQUALS)
	}
	{
		p.SetState(371)
		p.Username()
	}
	{
		p.SetState(372)
		p.Sp()
	}
	{
		p.SetState(373)
		p.Sess_id()
	}
	{
		p.SetState(374)
		p.Sp()
	}
	{
		p.SetState(375)
		p.Sess_version()
	}
	{
		p.SetState(376)
		p.Sp()
	}
	{
		p.SetState(377)
		p.Nettype()
	}
	{
		p.SetState(378)
		p.Sp()
	}
	{
		p.SetState(379)
		p.Addrtype()
	}
	{
		p.SetState(380)
		p.Sp()
	}
	{
		p.SetState(381)
		p.Unicast_address()
	}
	{
		p.SetState(382)
		p.Crlf()
	}

	return localctx
}

// ISession_name_fieldContext is an interface to support dynamic dispatch.
type ISession_name_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSession_name_fieldContext differentiates from other interfaces.
	IsSession_name_fieldContext()
}

type Session_name_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySession_name_fieldContext() *Session_name_fieldContext {
	var p = new(Session_name_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_session_name_field
	return p
}

func (*Session_name_fieldContext) IsSession_name_fieldContext() {}

func NewSession_name_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_name_fieldContext {
	var p = new(Session_name_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_session_name_field

	return p
}

func (s *Session_name_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_name_fieldContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *Session_name_fieldContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Session_name_fieldContext) Text() ITextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextContext)
}

func (s *Session_name_fieldContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Session_name_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_name_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Session_name_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSession_name_field(s)
	}
}

func (s *Session_name_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSession_name_field(s)
	}
}

func (p *sdpParser) Session_name_field() (localctx ISession_name_fieldContext) {
	localctx = NewSession_name_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, sdpParserRULE_session_name_field)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(384)
		p.Match(sdpParserS)
	}
	{
		p.SetState(385)
		p.Match(sdpParserEQUALS)
	}
	{
		p.SetState(386)
		p.Text()
	}
	{
		p.SetState(387)
		p.Crlf()
	}

	return localctx
}

// IInformation_fieldContext is an interface to support dynamic dispatch.
type IInformation_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInformation_fieldContext differentiates from other interfaces.
	IsInformation_fieldContext()
}

type Information_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInformation_fieldContext() *Information_fieldContext {
	var p = new(Information_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_information_field
	return p
}

func (*Information_fieldContext) IsInformation_fieldContext() {}

func NewInformation_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Information_fieldContext {
	var p = new(Information_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_information_field

	return p
}

func (s *Information_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Information_fieldContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *Information_fieldContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Information_fieldContext) Text() ITextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextContext)
}

func (s *Information_fieldContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Information_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Information_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Information_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterInformation_field(s)
	}
}

func (s *Information_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitInformation_field(s)
	}
}

func (p *sdpParser) Information_field() (localctx IInformation_fieldContext) {
	localctx = NewInformation_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, sdpParserRULE_information_field)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserI {
		{
			p.SetState(389)
			p.Match(sdpParserI)
		}
		{
			p.SetState(390)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(391)
			p.Text()
		}
		{
			p.SetState(392)
			p.Crlf()
		}

	}

	return localctx
}

// IUri_fieldContext is an interface to support dynamic dispatch.
type IUri_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUri_fieldContext differentiates from other interfaces.
	IsUri_fieldContext()
}

type Uri_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUri_fieldContext() *Uri_fieldContext {
	var p = new(Uri_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_uri_field
	return p
}

func (*Uri_fieldContext) IsUri_fieldContext() {}

func NewUri_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Uri_fieldContext {
	var p = new(Uri_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_uri_field

	return p
}

func (s *Uri_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Uri_fieldContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *Uri_fieldContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Uri_fieldContext) Uri() IUriContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUriContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUriContext)
}

func (s *Uri_fieldContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Uri_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Uri_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Uri_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterUri_field(s)
	}
}

func (s *Uri_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitUri_field(s)
	}
}

func (p *sdpParser) Uri_field() (localctx IUri_fieldContext) {
	localctx = NewUri_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, sdpParserRULE_uri_field)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserU {
		{
			p.SetState(396)
			p.Match(sdpParserU)
		}
		{
			p.SetState(397)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(398)
			p.Uri()
		}
		{
			p.SetState(399)
			p.Crlf()
		}

	}

	return localctx
}

// IEmail_fieldsContext is an interface to support dynamic dispatch.
type IEmail_fieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmail_fieldsContext differentiates from other interfaces.
	IsEmail_fieldsContext()
}

type Email_fieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmail_fieldsContext() *Email_fieldsContext {
	var p = new(Email_fieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_email_fields
	return p
}

func (*Email_fieldsContext) IsEmail_fieldsContext() {}

func NewEmail_fieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Email_fieldsContext {
	var p = new(Email_fieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_email_fields

	return p
}

func (s *Email_fieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *Email_fieldsContext) AllE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserE)
}

func (s *Email_fieldsContext) E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserE, i)
}

func (s *Email_fieldsContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEQUALS)
}

func (s *Email_fieldsContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, i)
}

func (s *Email_fieldsContext) AllEmail_address() []IEmail_addressContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEmail_addressContext)(nil)).Elem())
	var tst = make([]IEmail_addressContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEmail_addressContext)
		}
	}

	return tst
}

func (s *Email_fieldsContext) Email_address(i int) IEmail_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmail_addressContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEmail_addressContext)
}

func (s *Email_fieldsContext) AllCrlf() []ICrlfContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICrlfContext)(nil)).Elem())
	var tst = make([]ICrlfContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICrlfContext)
		}
	}

	return tst
}

func (s *Email_fieldsContext) Crlf(i int) ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Email_fieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Email_fieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Email_fieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterEmail_fields(s)
	}
}

func (s *Email_fieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitEmail_fields(s)
	}
}

func (p *sdpParser) Email_fields() (localctx IEmail_fieldsContext) {
	localctx = NewEmail_fieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, sdpParserRULE_email_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(410)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserE {
		{
			p.SetState(403)
			p.Match(sdpParserE)
		}
		{
			p.SetState(404)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(405)
			p.Email_address()
		}
		{
			p.SetState(406)
			p.Crlf()
		}

		p.SetState(412)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPhone_fieldsContext is an interface to support dynamic dispatch.
type IPhone_fieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPhone_fieldsContext differentiates from other interfaces.
	IsPhone_fieldsContext()
}

type Phone_fieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPhone_fieldsContext() *Phone_fieldsContext {
	var p = new(Phone_fieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_phone_fields
	return p
}

func (*Phone_fieldsContext) IsPhone_fieldsContext() {}

func NewPhone_fieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Phone_fieldsContext {
	var p = new(Phone_fieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_phone_fields

	return p
}

func (s *Phone_fieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *Phone_fieldsContext) AllP() []antlr.TerminalNode {
	return s.GetTokens(sdpParserP)
}

func (s *Phone_fieldsContext) P(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserP, i)
}

func (s *Phone_fieldsContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEQUALS)
}

func (s *Phone_fieldsContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, i)
}

func (s *Phone_fieldsContext) AllPhone_number() []IPhone_numberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPhone_numberContext)(nil)).Elem())
	var tst = make([]IPhone_numberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPhone_numberContext)
		}
	}

	return tst
}

func (s *Phone_fieldsContext) Phone_number(i int) IPhone_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPhone_numberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPhone_numberContext)
}

func (s *Phone_fieldsContext) AllCrlf() []ICrlfContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICrlfContext)(nil)).Elem())
	var tst = make([]ICrlfContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICrlfContext)
		}
	}

	return tst
}

func (s *Phone_fieldsContext) Crlf(i int) ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Phone_fieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Phone_fieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Phone_fieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPhone_fields(s)
	}
}

func (s *Phone_fieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPhone_fields(s)
	}
}

func (p *sdpParser) Phone_fields() (localctx IPhone_fieldsContext) {
	localctx = NewPhone_fieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, sdpParserRULE_phone_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserP {
		{
			p.SetState(413)
			p.Match(sdpParserP)
		}
		{
			p.SetState(414)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(415)
			p.Phone_number()
		}
		{
			p.SetState(416)
			p.Crlf()
		}

		p.SetState(422)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConnection_fieldContext is an interface to support dynamic dispatch.
type IConnection_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnection_fieldContext differentiates from other interfaces.
	IsConnection_fieldContext()
}

type Connection_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnection_fieldContext() *Connection_fieldContext {
	var p = new(Connection_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_connection_field
	return p
}

func (*Connection_fieldContext) IsConnection_fieldContext() {}

func NewConnection_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Connection_fieldContext {
	var p = new(Connection_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_connection_field

	return p
}

func (s *Connection_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Connection_fieldContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *Connection_fieldContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Connection_fieldContext) Nettype() INettypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INettypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INettypeContext)
}

func (s *Connection_fieldContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Connection_fieldContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Connection_fieldContext) Addrtype() IAddrtypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddrtypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddrtypeContext)
}

func (s *Connection_fieldContext) Connection_address() IConnection_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnection_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConnection_addressContext)
}

func (s *Connection_fieldContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Connection_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Connection_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Connection_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterConnection_field(s)
	}
}

func (s *Connection_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitConnection_field(s)
	}
}

func (p *sdpParser) Connection_field() (localctx IConnection_fieldContext) {
	localctx = NewConnection_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, sdpParserRULE_connection_field)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(423)
		p.Match(sdpParserC)
	}
	{
		p.SetState(424)
		p.Match(sdpParserEQUALS)
	}
	{
		p.SetState(425)
		p.Nettype()
	}
	{
		p.SetState(426)
		p.Sp()
	}
	{
		p.SetState(427)
		p.Addrtype()
	}
	{
		p.SetState(428)
		p.Sp()
	}
	{
		p.SetState(429)
		p.Connection_address()
	}
	{
		p.SetState(430)
		p.Crlf()
	}

	return localctx
}

// IBandwidth_fieldsContext is an interface to support dynamic dispatch.
type IBandwidth_fieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBandwidth_fieldsContext differentiates from other interfaces.
	IsBandwidth_fieldsContext()
}

type Bandwidth_fieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBandwidth_fieldsContext() *Bandwidth_fieldsContext {
	var p = new(Bandwidth_fieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_bandwidth_fields
	return p
}

func (*Bandwidth_fieldsContext) IsBandwidth_fieldsContext() {}

func NewBandwidth_fieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bandwidth_fieldsContext {
	var p = new(Bandwidth_fieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_bandwidth_fields

	return p
}

func (s *Bandwidth_fieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *Bandwidth_fieldsContext) AllB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserB)
}

func (s *Bandwidth_fieldsContext) B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserB, i)
}

func (s *Bandwidth_fieldsContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEQUALS)
}

func (s *Bandwidth_fieldsContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, i)
}

func (s *Bandwidth_fieldsContext) AllBwtype() []IBwtypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBwtypeContext)(nil)).Elem())
	var tst = make([]IBwtypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBwtypeContext)
		}
	}

	return tst
}

func (s *Bandwidth_fieldsContext) Bwtype(i int) IBwtypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBwtypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBwtypeContext)
}

func (s *Bandwidth_fieldsContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOLON)
}

func (s *Bandwidth_fieldsContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, i)
}

func (s *Bandwidth_fieldsContext) AllBandwidth() []IBandwidthContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBandwidthContext)(nil)).Elem())
	var tst = make([]IBandwidthContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBandwidthContext)
		}
	}

	return tst
}

func (s *Bandwidth_fieldsContext) Bandwidth(i int) IBandwidthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBandwidthContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBandwidthContext)
}

func (s *Bandwidth_fieldsContext) AllCrlf() []ICrlfContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICrlfContext)(nil)).Elem())
	var tst = make([]ICrlfContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICrlfContext)
		}
	}

	return tst
}

func (s *Bandwidth_fieldsContext) Crlf(i int) ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Bandwidth_fieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bandwidth_fieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bandwidth_fieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBandwidth_fields(s)
	}
}

func (s *Bandwidth_fieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBandwidth_fields(s)
	}
}

func (p *sdpParser) Bandwidth_fields() (localctx IBandwidth_fieldsContext) {
	localctx = NewBandwidth_fieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, sdpParserRULE_bandwidth_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserB {
		{
			p.SetState(432)
			p.Match(sdpParserB)
		}
		{
			p.SetState(433)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(434)
			p.Bwtype()
		}
		{
			p.SetState(435)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(436)
			p.Bandwidth()
		}
		{
			p.SetState(437)
			p.Crlf()
		}

		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITime_fieldsContext is an interface to support dynamic dispatch.
type ITime_fieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTime_fieldsContext differentiates from other interfaces.
	IsTime_fieldsContext()
}

type Time_fieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTime_fieldsContext() *Time_fieldsContext {
	var p = new(Time_fieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_time_fields
	return p
}

func (*Time_fieldsContext) IsTime_fieldsContext() {}

func NewTime_fieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Time_fieldsContext {
	var p = new(Time_fieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_time_fields

	return p
}

func (s *Time_fieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *Time_fieldsContext) AllT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserT)
}

func (s *Time_fieldsContext) T(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserT, i)
}

func (s *Time_fieldsContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEQUALS)
}

func (s *Time_fieldsContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, i)
}

func (s *Time_fieldsContext) AllStart_time() []IStart_timeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStart_timeContext)(nil)).Elem())
	var tst = make([]IStart_timeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStart_timeContext)
		}
	}

	return tst
}

func (s *Time_fieldsContext) Start_time(i int) IStart_timeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_timeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStart_timeContext)
}

func (s *Time_fieldsContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Time_fieldsContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Time_fieldsContext) AllStop_time() []IStop_timeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStop_timeContext)(nil)).Elem())
	var tst = make([]IStop_timeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStop_timeContext)
		}
	}

	return tst
}

func (s *Time_fieldsContext) Stop_time(i int) IStop_timeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStop_timeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStop_timeContext)
}

func (s *Time_fieldsContext) AllCrlf() []ICrlfContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICrlfContext)(nil)).Elem())
	var tst = make([]ICrlfContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICrlfContext)
		}
	}

	return tst
}

func (s *Time_fieldsContext) Crlf(i int) ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Time_fieldsContext) Zone_adjustments() IZone_adjustmentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IZone_adjustmentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IZone_adjustmentsContext)
}

func (s *Time_fieldsContext) AllRepeat_fields() []IRepeat_fieldsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRepeat_fieldsContext)(nil)).Elem())
	var tst = make([]IRepeat_fieldsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRepeat_fieldsContext)
		}
	}

	return tst
}

func (s *Time_fieldsContext) Repeat_fields(i int) IRepeat_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepeat_fieldsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRepeat_fieldsContext)
}

func (s *Time_fieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Time_fieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Time_fieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterTime_fields(s)
	}
}

func (s *Time_fieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitTime_fields(s)
	}
}

func (p *sdpParser) Time_fields() (localctx ITime_fieldsContext) {
	localctx = NewTime_fieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, sdpParserRULE_time_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == sdpParserT {
		{
			p.SetState(444)
			p.Match(sdpParserT)
		}
		{
			p.SetState(445)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(446)
			p.Start_time()
		}
		{
			p.SetState(447)
			p.Sp()
		}
		{
			p.SetState(448)
			p.Stop_time()
		}
		p.SetState(454)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(449)
					p.Crlf()
				}
				{
					p.SetState(450)
					p.Repeat_fields()
				}

			}
			p.SetState(456)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
		}
		{
			p.SetState(457)
			p.Crlf()
		}

		p.SetState(461)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserZ {
		{
			p.SetState(463)
			p.Zone_adjustments()
		}
		{
			p.SetState(464)
			p.Crlf()
		}

	}

	return localctx
}

// IRepeat_fieldsContext is an interface to support dynamic dispatch.
type IRepeat_fieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeat_fieldsContext differentiates from other interfaces.
	IsRepeat_fieldsContext()
}

type Repeat_fieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeat_fieldsContext() *Repeat_fieldsContext {
	var p = new(Repeat_fieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_repeat_fields
	return p
}

func (*Repeat_fieldsContext) IsRepeat_fieldsContext() {}

func NewRepeat_fieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeat_fieldsContext {
	var p = new(Repeat_fieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_repeat_fields

	return p
}

func (s *Repeat_fieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeat_fieldsContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *Repeat_fieldsContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Repeat_fieldsContext) Repeat_interval() IRepeat_intervalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepeat_intervalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepeat_intervalContext)
}

func (s *Repeat_fieldsContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Repeat_fieldsContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Repeat_fieldsContext) AllTyped_time() []ITyped_timeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITyped_timeContext)(nil)).Elem())
	var tst = make([]ITyped_timeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITyped_timeContext)
		}
	}

	return tst
}

func (s *Repeat_fieldsContext) Typed_time(i int) ITyped_timeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITyped_timeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITyped_timeContext)
}

func (s *Repeat_fieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeat_fieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeat_fieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterRepeat_fields(s)
	}
}

func (s *Repeat_fieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitRepeat_fields(s)
	}
}

func (p *sdpParser) Repeat_fields() (localctx IRepeat_fieldsContext) {
	localctx = NewRepeat_fieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, sdpParserRULE_repeat_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(468)
		p.Match(sdpParserR)
	}
	{
		p.SetState(469)
		p.Match(sdpParserEQUALS)
	}
	{
		p.SetState(470)
		p.Repeat_interval()
	}
	{
		p.SetState(471)
		p.Sp()
	}
	{
		p.SetState(472)
		p.Typed_time()
	}
	p.SetState(476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == sdpParserSPACE {
		{
			p.SetState(473)
			p.Sp()
		}
		{
			p.SetState(474)
			p.Typed_time()
		}

		p.SetState(478)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IZone_adjustmentsContext is an interface to support dynamic dispatch.
type IZone_adjustmentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsZone_adjustmentsContext differentiates from other interfaces.
	IsZone_adjustmentsContext()
}

type Zone_adjustmentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyZone_adjustmentsContext() *Zone_adjustmentsContext {
	var p = new(Zone_adjustmentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_zone_adjustments
	return p
}

func (*Zone_adjustmentsContext) IsZone_adjustmentsContext() {}

func NewZone_adjustmentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Zone_adjustmentsContext {
	var p = new(Zone_adjustmentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_zone_adjustments

	return p
}

func (s *Zone_adjustmentsContext) GetParser() antlr.Parser { return s.parser }

func (s *Zone_adjustmentsContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *Zone_adjustmentsContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Zone_adjustmentsContext) AllTime() []ITimeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITimeContext)(nil)).Elem())
	var tst = make([]ITimeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITimeContext)
		}
	}

	return tst
}

func (s *Zone_adjustmentsContext) Time(i int) ITimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITimeContext)
}

func (s *Zone_adjustmentsContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Zone_adjustmentsContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Zone_adjustmentsContext) AllTyped_time() []ITyped_timeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITyped_timeContext)(nil)).Elem())
	var tst = make([]ITyped_timeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITyped_timeContext)
		}
	}

	return tst
}

func (s *Zone_adjustmentsContext) Typed_time(i int) ITyped_timeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITyped_timeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITyped_timeContext)
}

func (s *Zone_adjustmentsContext) AllDASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserDASH)
}

func (s *Zone_adjustmentsContext) DASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, i)
}

func (s *Zone_adjustmentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Zone_adjustmentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Zone_adjustmentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterZone_adjustments(s)
	}
}

func (s *Zone_adjustmentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitZone_adjustments(s)
	}
}

func (p *sdpParser) Zone_adjustments() (localctx IZone_adjustmentsContext) {
	localctx = NewZone_adjustmentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, sdpParserRULE_zone_adjustments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(480)
		p.Match(sdpParserZ)
	}
	{
		p.SetState(481)
		p.Match(sdpParserEQUALS)
	}
	{
		p.SetState(482)
		p.Time()
	}
	{
		p.SetState(483)
		p.Sp()
	}
	p.SetState(485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserDASH {
		{
			p.SetState(484)
			p.Match(sdpParserDASH)
		}

	}
	{
		p.SetState(487)
		p.Typed_time()
	}
	p.SetState(498)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserSPACE {
		{
			p.SetState(488)
			p.Sp()
		}
		{
			p.SetState(489)
			p.Time()
		}
		{
			p.SetState(490)
			p.Sp()
		}
		p.SetState(492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == sdpParserDASH {
			{
				p.SetState(491)
				p.Match(sdpParserDASH)
			}

		}
		{
			p.SetState(494)
			p.Typed_time()
		}

		p.SetState(500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IKey_fieldContext is an interface to support dynamic dispatch.
type IKey_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKey_fieldContext differentiates from other interfaces.
	IsKey_fieldContext()
}

type Key_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKey_fieldContext() *Key_fieldContext {
	var p = new(Key_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_key_field
	return p
}

func (*Key_fieldContext) IsKey_fieldContext() {}

func NewKey_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Key_fieldContext {
	var p = new(Key_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_key_field

	return p
}

func (s *Key_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Key_fieldContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *Key_fieldContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Key_fieldContext) Key_type() IKey_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKey_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKey_typeContext)
}

func (s *Key_fieldContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Key_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Key_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Key_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterKey_field(s)
	}
}

func (s *Key_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitKey_field(s)
	}
}

func (p *sdpParser) Key_field() (localctx IKey_fieldContext) {
	localctx = NewKey_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, sdpParserRULE_key_field)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(506)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserK {
		{
			p.SetState(501)
			p.Match(sdpParserK)
		}
		{
			p.SetState(502)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(503)
			p.Key_type()
		}
		{
			p.SetState(504)
			p.Crlf()
		}

	}

	return localctx
}

// IAttribute_fieldsContext is an interface to support dynamic dispatch.
type IAttribute_fieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttribute_fieldsContext differentiates from other interfaces.
	IsAttribute_fieldsContext()
}

type Attribute_fieldsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttribute_fieldsContext() *Attribute_fieldsContext {
	var p = new(Attribute_fieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_attribute_fields
	return p
}

func (*Attribute_fieldsContext) IsAttribute_fieldsContext() {}

func NewAttribute_fieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attribute_fieldsContext {
	var p = new(Attribute_fieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_attribute_fields

	return p
}

func (s *Attribute_fieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *Attribute_fieldsContext) AllA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserA)
}

func (s *Attribute_fieldsContext) A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserA, i)
}

func (s *Attribute_fieldsContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEQUALS)
}

func (s *Attribute_fieldsContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, i)
}

func (s *Attribute_fieldsContext) AllAttribute() []IAttributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributeContext)(nil)).Elem())
	var tst = make([]IAttributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributeContext)
		}
	}

	return tst
}

func (s *Attribute_fieldsContext) Attribute(i int) IAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *Attribute_fieldsContext) AllCrlf() []ICrlfContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICrlfContext)(nil)).Elem())
	var tst = make([]ICrlfContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICrlfContext)
		}
	}

	return tst
}

func (s *Attribute_fieldsContext) Crlf(i int) ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Attribute_fieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attribute_fieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attribute_fieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAttribute_fields(s)
	}
}

func (s *Attribute_fieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAttribute_fields(s)
	}
}

func (p *sdpParser) Attribute_fields() (localctx IAttribute_fieldsContext) {
	localctx = NewAttribute_fieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, sdpParserRULE_attribute_fields)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserA {
		{
			p.SetState(508)
			p.Match(sdpParserA)
		}
		{
			p.SetState(509)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(510)
			p.Attribute()
		}
		{
			p.SetState(511)
			p.Crlf()
		}

		p.SetState(517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMedia_descriptionsContext is an interface to support dynamic dispatch.
type IMedia_descriptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMedia_descriptionsContext differentiates from other interfaces.
	IsMedia_descriptionsContext()
}

type Media_descriptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMedia_descriptionsContext() *Media_descriptionsContext {
	var p = new(Media_descriptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_media_descriptions
	return p
}

func (*Media_descriptionsContext) IsMedia_descriptionsContext() {}

func NewMedia_descriptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Media_descriptionsContext {
	var p = new(Media_descriptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_media_descriptions

	return p
}

func (s *Media_descriptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Media_descriptionsContext) AllMedia_field() []IMedia_fieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMedia_fieldContext)(nil)).Elem())
	var tst = make([]IMedia_fieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMedia_fieldContext)
		}
	}

	return tst
}

func (s *Media_descriptionsContext) Media_field(i int) IMedia_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMedia_fieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMedia_fieldContext)
}

func (s *Media_descriptionsContext) AllInformation_field() []IInformation_fieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInformation_fieldContext)(nil)).Elem())
	var tst = make([]IInformation_fieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInformation_fieldContext)
		}
	}

	return tst
}

func (s *Media_descriptionsContext) Information_field(i int) IInformation_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInformation_fieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInformation_fieldContext)
}

func (s *Media_descriptionsContext) AllBandwidth_fields() []IBandwidth_fieldsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBandwidth_fieldsContext)(nil)).Elem())
	var tst = make([]IBandwidth_fieldsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBandwidth_fieldsContext)
		}
	}

	return tst
}

func (s *Media_descriptionsContext) Bandwidth_fields(i int) IBandwidth_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBandwidth_fieldsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBandwidth_fieldsContext)
}

func (s *Media_descriptionsContext) AllKey_field() []IKey_fieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKey_fieldContext)(nil)).Elem())
	var tst = make([]IKey_fieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKey_fieldContext)
		}
	}

	return tst
}

func (s *Media_descriptionsContext) Key_field(i int) IKey_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKey_fieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKey_fieldContext)
}

func (s *Media_descriptionsContext) AllAttribute_fields() []IAttribute_fieldsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttribute_fieldsContext)(nil)).Elem())
	var tst = make([]IAttribute_fieldsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttribute_fieldsContext)
		}
	}

	return tst
}

func (s *Media_descriptionsContext) Attribute_fields(i int) IAttribute_fieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_fieldsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttribute_fieldsContext)
}

func (s *Media_descriptionsContext) AllConnection_field() []IConnection_fieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConnection_fieldContext)(nil)).Elem())
	var tst = make([]IConnection_fieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConnection_fieldContext)
		}
	}

	return tst
}

func (s *Media_descriptionsContext) Connection_field(i int) IConnection_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnection_fieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConnection_fieldContext)
}

func (s *Media_descriptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Media_descriptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Media_descriptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterMedia_descriptions(s)
	}
}

func (s *Media_descriptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitMedia_descriptions(s)
	}
}

func (p *sdpParser) Media_descriptions() (localctx IMedia_descriptionsContext) {
	localctx = NewMedia_descriptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, sdpParserRULE_media_descriptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserM {
		{
			p.SetState(518)
			p.Media_field()
		}
		{
			p.SetState(519)
			p.Information_field()
		}
		p.SetState(523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == sdpParserC {
			{
				p.SetState(520)
				p.Connection_field()
			}

			p.SetState(525)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(526)
			p.Bandwidth_fields()
		}
		{
			p.SetState(527)
			p.Key_field()
		}
		{
			p.SetState(528)
			p.Attribute_fields()
		}

		p.SetState(534)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMedia_fieldContext is an interface to support dynamic dispatch.
type IMedia_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMedia_fieldContext differentiates from other interfaces.
	IsMedia_fieldContext()
}

type Media_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMedia_fieldContext() *Media_fieldContext {
	var p = new(Media_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_media_field
	return p
}

func (*Media_fieldContext) IsMedia_fieldContext() {}

func NewMedia_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Media_fieldContext {
	var p = new(Media_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_media_field

	return p
}

func (s *Media_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Media_fieldContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *Media_fieldContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Media_fieldContext) Media() IMediaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMediaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMediaContext)
}

func (s *Media_fieldContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Media_fieldContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Media_fieldContext) Port() IPortContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPortContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPortContext)
}

func (s *Media_fieldContext) Proto() IProtoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtoContext)
}

func (s *Media_fieldContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Media_fieldContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *Media_fieldContext) Integer() IIntegerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *Media_fieldContext) AllFmt() []IFmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFmtContext)(nil)).Elem())
	var tst = make([]IFmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFmtContext)
		}
	}

	return tst
}

func (s *Media_fieldContext) Fmt(i int) IFmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFmtContext)
}

func (s *Media_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Media_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Media_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterMedia_field(s)
	}
}

func (s *Media_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitMedia_field(s)
	}
}

func (p *sdpParser) Media_field() (localctx IMedia_fieldContext) {
	localctx = NewMedia_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, sdpParserRULE_media_field)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(535)
		p.Match(sdpParserM)
	}
	{
		p.SetState(536)
		p.Match(sdpParserEQUALS)
	}
	{
		p.SetState(537)
		p.Media()
	}
	{
		p.SetState(538)
		p.Sp()
	}
	{
		p.SetState(539)
		p.Port()
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserSLASH {
		{
			p.SetState(540)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(541)
			p.Integer()
		}

	}
	{
		p.SetState(544)
		p.Sp()
	}
	{
		p.SetState(545)
		p.Proto()
	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == sdpParserSPACE {
		{
			p.SetState(546)
			p.Sp()
		}
		{
			p.SetState(547)
			p.Fmt()
		}

		p.SetState(551)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(553)
		p.Crlf()
	}

	return localctx
}

// IUsernameContext is an interface to support dynamic dispatch.
type IUsernameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsernameContext differentiates from other interfaces.
	IsUsernameContext()
}

type UsernameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsernameContext() *UsernameContext {
	var p = new(UsernameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_username
	return p
}

func (*UsernameContext) IsUsernameContext() {}

func NewUsernameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsernameContext {
	var p = new(UsernameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_username

	return p
}

func (s *UsernameContext) GetParser() antlr.Parser { return s.parser }

func (s *UsernameContext) Non_ws_string() INon_ws_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_ws_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_ws_stringContext)
}

func (s *UsernameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsernameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsernameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterUsername(s)
	}
}

func (s *UsernameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitUsername(s)
	}
}

func (p *sdpParser) Username() (localctx IUsernameContext) {
	localctx = NewUsernameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, sdpParserRULE_username)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(555)
		p.Non_ws_string()
	}

	return localctx
}

// ISess_idContext is an interface to support dynamic dispatch.
type ISess_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSess_idContext differentiates from other interfaces.
	IsSess_idContext()
}

type Sess_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySess_idContext() *Sess_idContext {
	var p = new(Sess_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_sess_id
	return p
}

func (*Sess_idContext) IsSess_idContext() {}

func NewSess_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sess_idContext {
	var p = new(Sess_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_sess_id

	return p
}

func (s *Sess_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Sess_idContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *Sess_idContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Sess_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sess_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sess_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSess_id(s)
	}
}

func (s *Sess_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSess_id(s)
	}
}

func (p *sdpParser) Sess_id() (localctx ISess_idContext) {
	localctx = NewSess_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, sdpParserRULE_sess_id)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(558)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
		{
			p.SetState(557)
			p.Digit()
		}

		p.SetState(560)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISess_versionContext is an interface to support dynamic dispatch.
type ISess_versionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSess_versionContext differentiates from other interfaces.
	IsSess_versionContext()
}

type Sess_versionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySess_versionContext() *Sess_versionContext {
	var p = new(Sess_versionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_sess_version
	return p
}

func (*Sess_versionContext) IsSess_versionContext() {}

func NewSess_versionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sess_versionContext {
	var p = new(Sess_versionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_sess_version

	return p
}

func (s *Sess_versionContext) GetParser() antlr.Parser { return s.parser }

func (s *Sess_versionContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *Sess_versionContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Sess_versionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sess_versionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sess_versionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSess_version(s)
	}
}

func (s *Sess_versionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSess_version(s)
	}
}

func (p *sdpParser) Sess_version() (localctx ISess_versionContext) {
	localctx = NewSess_versionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, sdpParserRULE_sess_version)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(563)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
		{
			p.SetState(562)
			p.Digit()
		}

		p.SetState(565)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INettypeContext is an interface to support dynamic dispatch.
type INettypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNettypeContext differentiates from other interfaces.
	IsNettypeContext()
}

type NettypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNettypeContext() *NettypeContext {
	var p = new(NettypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_nettype
	return p
}

func (*NettypeContext) IsNettypeContext() {}

func NewNettypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NettypeContext {
	var p = new(NettypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_nettype

	return p
}

func (s *NettypeContext) GetParser() antlr.Parser { return s.parser }

func (s *NettypeContext) Token() ITokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokenContext)
}

func (s *NettypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NettypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NettypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterNettype(s)
	}
}

func (s *NettypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitNettype(s)
	}
}

func (p *sdpParser) Nettype() (localctx INettypeContext) {
	localctx = NewNettypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, sdpParserRULE_nettype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(567)
		p.Token()
	}

	return localctx
}

// IAddrtypeContext is an interface to support dynamic dispatch.
type IAddrtypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAddrtypeContext differentiates from other interfaces.
	IsAddrtypeContext()
}

type AddrtypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAddrtypeContext() *AddrtypeContext {
	var p = new(AddrtypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_addrtype
	return p
}

func (*AddrtypeContext) IsAddrtypeContext() {}

func NewAddrtypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddrtypeContext {
	var p = new(AddrtypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_addrtype

	return p
}

func (s *AddrtypeContext) GetParser() antlr.Parser { return s.parser }

func (s *AddrtypeContext) Token() ITokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokenContext)
}

func (s *AddrtypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddrtypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddrtypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAddrtype(s)
	}
}

func (s *AddrtypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAddrtype(s)
	}
}

func (p *sdpParser) Addrtype() (localctx IAddrtypeContext) {
	localctx = NewAddrtypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, sdpParserRULE_addrtype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(569)
		p.Token()
	}

	return localctx
}

// IUriContext is an interface to support dynamic dispatch.
type IUriContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUriContext differentiates from other interfaces.
	IsUriContext()
}

type UriContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUriContext() *UriContext {
	var p = new(UriContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_uri
	return p
}

func (*UriContext) IsUriContext() {}

func NewUriContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UriContext {
	var p = new(UriContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_uri

	return p
}

func (s *UriContext) GetParser() antlr.Parser { return s.parser }

func (s *UriContext) Uri_reference() IUri_referenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUri_referenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUri_referenceContext)
}

func (s *UriContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UriContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UriContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterUri(s)
	}
}

func (s *UriContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitUri(s)
	}
}

func (p *sdpParser) Uri() (localctx IUriContext) {
	localctx = NewUriContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, sdpParserRULE_uri)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(571)
		p.Uri_reference()
	}

	return localctx
}

// IEmail_addressContext is an interface to support dynamic dispatch.
type IEmail_addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmail_addressContext differentiates from other interfaces.
	IsEmail_addressContext()
}

type Email_addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmail_addressContext() *Email_addressContext {
	var p = new(Email_addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_email_address
	return p
}

func (*Email_addressContext) IsEmail_addressContext() {}

func NewEmail_addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Email_addressContext {
	var p = new(Email_addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_email_address

	return p
}

func (s *Email_addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Email_addressContext) Address_and_comment() IAddress_and_commentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddress_and_commentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddress_and_commentContext)
}

func (s *Email_addressContext) Dispname_and_address() IDispname_and_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDispname_and_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDispname_and_addressContext)
}

func (s *Email_addressContext) Addr_spec() IAddr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddr_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddr_specContext)
}

func (s *Email_addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Email_addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Email_addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterEmail_address(s)
	}
}

func (s *Email_addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitEmail_address(s)
	}
}

func (p *sdpParser) Email_address() (localctx IEmail_addressContext) {
	localctx = NewEmail_addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, sdpParserRULE_email_address)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(576)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(573)
			p.Address_and_comment()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(574)
			p.Dispname_and_address()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(575)
			p.Addr_spec()
		}

	}

	return localctx
}

// IAddress_and_commentContext is an interface to support dynamic dispatch.
type IAddress_and_commentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAddress_and_commentContext differentiates from other interfaces.
	IsAddress_and_commentContext()
}

type Address_and_commentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAddress_and_commentContext() *Address_and_commentContext {
	var p = new(Address_and_commentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_address_and_comment
	return p
}

func (*Address_and_commentContext) IsAddress_and_commentContext() {}

func NewAddress_and_commentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Address_and_commentContext {
	var p = new(Address_and_commentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_address_and_comment

	return p
}

func (s *Address_and_commentContext) GetParser() antlr.Parser { return s.parser }

func (s *Address_and_commentContext) Addr_spec() IAddr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddr_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddr_specContext)
}

func (s *Address_and_commentContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *Address_and_commentContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *Address_and_commentContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Address_and_commentContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Address_and_commentContext) AllEmail_safe() []IEmail_safeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEmail_safeContext)(nil)).Elem())
	var tst = make([]IEmail_safeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEmail_safeContext)
		}
	}

	return tst
}

func (s *Address_and_commentContext) Email_safe(i int) IEmail_safeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmail_safeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEmail_safeContext)
}

func (s *Address_and_commentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Address_and_commentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Address_and_commentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAddress_and_comment(s)
	}
}

func (s *Address_and_commentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAddress_and_comment(s)
	}
}

func (p *sdpParser) Address_and_comment() (localctx IAddress_and_commentContext) {
	localctx = NewAddress_and_commentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, sdpParserRULE_address_and_comment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(578)
		p.Addr_spec()
	}
	p.SetState(580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == sdpParserSPACE {
		{
			p.SetState(579)
			p.Sp()
		}

		p.SetState(582)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(584)
		p.Match(sdpParserLEFT_PAREN)
	}
	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserSPACE)|(1<<sdpParserEXCLAMATION)|(1<<sdpParserQUOTE)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33))|(1<<(sdpParserLEFT_BRACE-33))|(1<<(sdpParserBACKSLASH-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(sdpParserRIGHT_CURLY_BRACE-97))|(1<<(sdpParserTILDE-97))|(1<<(sdpParserU_0001-97))|(1<<(sdpParserU_0002-97))|(1<<(sdpParserU_0003-97))|(1<<(sdpParserU_0004-97))|(1<<(sdpParserU_0005-97))|(1<<(sdpParserU_0006-97))|(1<<(sdpParserU_0007-97))|(1<<(sdpParserU_0008-97))|(1<<(sdpParserU_000B-97))|(1<<(sdpParserU_000C-97))|(1<<(sdpParserU_000E-97))|(1<<(sdpParserU_000F-97))|(1<<(sdpParserU_0010-97))|(1<<(sdpParserU_0011-97))|(1<<(sdpParserU_0012-97))|(1<<(sdpParserU_0013-97))|(1<<(sdpParserU_0014-97))|(1<<(sdpParserU_0015-97))|(1<<(sdpParserU_0016-97))|(1<<(sdpParserU_0017-97))|(1<<(sdpParserU_0018-97))|(1<<(sdpParserU_0019-97))|(1<<(sdpParserU_001A-97))|(1<<(sdpParserU_001B-97))|(1<<(sdpParserU_001C-97))|(1<<(sdpParserU_001D-97))|(1<<(sdpParserU_001E-97))|(1<<(sdpParserU_001F-97))|(1<<(sdpParserU_007F-97)))) != 0) || (((_la-129)&-(0x1f+1)) == 0 && ((1<<uint((_la-129)))&((1<<(sdpParserU_0080-129))|(1<<(sdpParserU_0081-129))|(1<<(sdpParserU_0082-129))|(1<<(sdpParserU_0083-129))|(1<<(sdpParserU_0084-129))|(1<<(sdpParserU_0085-129))|(1<<(sdpParserU_0086-129))|(1<<(sdpParserU_0087-129))|(1<<(sdpParserU_0088-129))|(1<<(sdpParserU_0089-129))|(1<<(sdpParserU_008A-129))|(1<<(sdpParserU_008B-129))|(1<<(sdpParserU_008C-129))|(1<<(sdpParserU_008D-129))|(1<<(sdpParserU_008E-129))|(1<<(sdpParserU_008F-129))|(1<<(sdpParserU_0090-129))|(1<<(sdpParserU_0091-129))|(1<<(sdpParserU_0092-129))|(1<<(sdpParserU_0093-129))|(1<<(sdpParserU_0094-129))|(1<<(sdpParserU_0095-129))|(1<<(sdpParserU_0096-129))|(1<<(sdpParserU_0097-129))|(1<<(sdpParserU_0098-129))|(1<<(sdpParserU_0099-129))|(1<<(sdpParserU_009A-129))|(1<<(sdpParserU_009B-129))|(1<<(sdpParserU_009C-129))|(1<<(sdpParserU_009D-129))|(1<<(sdpParserU_009E-129))|(1<<(sdpParserU_009F-129)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(sdpParserU_00A0-161))|(1<<(sdpParserU_00A1-161))|(1<<(sdpParserU_00A2-161))|(1<<(sdpParserU_00A3-161))|(1<<(sdpParserU_00A4-161))|(1<<(sdpParserU_00A5-161))|(1<<(sdpParserU_00A6-161))|(1<<(sdpParserU_00A7-161))|(1<<(sdpParserU_00A8-161))|(1<<(sdpParserU_00A9-161))|(1<<(sdpParserU_00AA-161))|(1<<(sdpParserU_00AB-161))|(1<<(sdpParserU_00AC-161))|(1<<(sdpParserU_00AD-161))|(1<<(sdpParserU_00AE-161))|(1<<(sdpParserU_00AF-161))|(1<<(sdpParserU_00B0-161))|(1<<(sdpParserU_00B1-161))|(1<<(sdpParserU_00B2-161))|(1<<(sdpParserU_00B3-161))|(1<<(sdpParserU_00B4-161))|(1<<(sdpParserU_00B5-161))|(1<<(sdpParserU_00B6-161))|(1<<(sdpParserU_00B7-161))|(1<<(sdpParserU_00B8-161))|(1<<(sdpParserU_00B9-161))|(1<<(sdpParserU_00BA-161))|(1<<(sdpParserU_00BB-161))|(1<<(sdpParserU_00BC-161))|(1<<(sdpParserU_00BD-161))|(1<<(sdpParserU_00BE-161))|(1<<(sdpParserU_00BF-161)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(sdpParserU_00C0-193))|(1<<(sdpParserU_00C1-193))|(1<<(sdpParserU_00C2-193))|(1<<(sdpParserU_00C3-193))|(1<<(sdpParserU_00C4-193))|(1<<(sdpParserU_00C5-193))|(1<<(sdpParserU_00C6-193))|(1<<(sdpParserU_00C7-193))|(1<<(sdpParserU_00C8-193))|(1<<(sdpParserU_00C9-193))|(1<<(sdpParserU_00CA-193))|(1<<(sdpParserU_00CB-193))|(1<<(sdpParserU_00CC-193))|(1<<(sdpParserU_00CD-193))|(1<<(sdpParserU_00CE-193))|(1<<(sdpParserU_00CF-193))|(1<<(sdpParserU_00D0-193))|(1<<(sdpParserU_00D1-193))|(1<<(sdpParserU_00D2-193))|(1<<(sdpParserU_00D3-193))|(1<<(sdpParserU_00D4-193))|(1<<(sdpParserU_00D5-193))|(1<<(sdpParserU_00D6-193))|(1<<(sdpParserU_00D7-193))|(1<<(sdpParserU_00D8-193))|(1<<(sdpParserU_00D9-193))|(1<<(sdpParserU_00DA-193))|(1<<(sdpParserU_00DB-193))|(1<<(sdpParserU_00DC-193))|(1<<(sdpParserU_00DD-193))|(1<<(sdpParserU_00DE-193))|(1<<(sdpParserU_00DF-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(sdpParserU_00E0-225))|(1<<(sdpParserU_00E1-225))|(1<<(sdpParserU_00E2-225))|(1<<(sdpParserU_00E3-225))|(1<<(sdpParserU_00E4-225))|(1<<(sdpParserU_00E5-225))|(1<<(sdpParserU_00E6-225))|(1<<(sdpParserU_00E7-225))|(1<<(sdpParserU_00E8-225))|(1<<(sdpParserU_00E9-225))|(1<<(sdpParserU_00EA-225))|(1<<(sdpParserU_00EB-225))|(1<<(sdpParserU_00EC-225))|(1<<(sdpParserU_00ED-225))|(1<<(sdpParserU_00EE-225))|(1<<(sdpParserU_00EF-225))|(1<<(sdpParserU_00F0-225))|(1<<(sdpParserU_00F1-225))|(1<<(sdpParserU_00F2-225))|(1<<(sdpParserU_00F3-225))|(1<<(sdpParserU_00F4-225))|(1<<(sdpParserU_00F5-225))|(1<<(sdpParserU_00F6-225))|(1<<(sdpParserU_00F7-225))|(1<<(sdpParserU_00F8-225))|(1<<(sdpParserU_00F9-225))|(1<<(sdpParserU_00FA-225))|(1<<(sdpParserU_00FB-225))|(1<<(sdpParserU_00FC-225))|(1<<(sdpParserU_00FD-225))|(1<<(sdpParserU_00FE-225))|(1<<(sdpParserU_00FF-225)))) != 0) {
		{
			p.SetState(585)
			p.Email_safe()
		}

		p.SetState(588)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(590)
		p.Match(sdpParserRIGHT_PAREN)
	}

	return localctx
}

// IDispname_and_addressContext is an interface to support dynamic dispatch.
type IDispname_and_addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDispname_and_addressContext differentiates from other interfaces.
	IsDispname_and_addressContext()
}

type Dispname_and_addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDispname_and_addressContext() *Dispname_and_addressContext {
	var p = new(Dispname_and_addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_dispname_and_address
	return p
}

func (*Dispname_and_addressContext) IsDispname_and_addressContext() {}

func NewDispname_and_addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dispname_and_addressContext {
	var p = new(Dispname_and_addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_dispname_and_address

	return p
}

func (s *Dispname_and_addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Dispname_and_addressContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *Dispname_and_addressContext) Addr_spec() IAddr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddr_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddr_specContext)
}

func (s *Dispname_and_addressContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *Dispname_and_addressContext) AllEmail_safe() []IEmail_safeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEmail_safeContext)(nil)).Elem())
	var tst = make([]IEmail_safeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEmail_safeContext)
		}
	}

	return tst
}

func (s *Dispname_and_addressContext) Email_safe(i int) IEmail_safeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmail_safeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEmail_safeContext)
}

func (s *Dispname_and_addressContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Dispname_and_addressContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Dispname_and_addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dispname_and_addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dispname_and_addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDispname_and_address(s)
	}
}

func (s *Dispname_and_addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDispname_and_address(s)
	}
}

func (p *sdpParser) Dispname_and_address() (localctx IDispname_and_addressContext) {
	localctx = NewDispname_and_addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, sdpParserRULE_dispname_and_address)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(593)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(592)
				p.Email_safe()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(595)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext())
	}
	p.SetState(598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == sdpParserSPACE {
		{
			p.SetState(597)
			p.Sp()
		}

		p.SetState(600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(602)
		p.Match(sdpParserLESS_THAN)
	}
	{
		p.SetState(603)
		p.Addr_spec()
	}
	{
		p.SetState(604)
		p.Match(sdpParserGREATER_THAN)
	}

	return localctx
}

// IPhone_numberContext is an interface to support dynamic dispatch.
type IPhone_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPhone_numberContext differentiates from other interfaces.
	IsPhone_numberContext()
}

type Phone_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPhone_numberContext() *Phone_numberContext {
	var p = new(Phone_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_phone_number
	return p
}

func (*Phone_numberContext) IsPhone_numberContext() {}

func NewPhone_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Phone_numberContext {
	var p = new(Phone_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_phone_number

	return p
}

func (s *Phone_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Phone_numberContext) Phone() IPhoneContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPhoneContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPhoneContext)
}

func (s *Phone_numberContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *Phone_numberContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *Phone_numberContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *Phone_numberContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *Phone_numberContext) AllEmail_safe() []IEmail_safeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEmail_safeContext)(nil)).Elem())
	var tst = make([]IEmail_safeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEmail_safeContext)
		}
	}

	return tst
}

func (s *Phone_numberContext) Email_safe(i int) IEmail_safeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmail_safeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEmail_safeContext)
}

func (s *Phone_numberContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *Phone_numberContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *Phone_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Phone_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Phone_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPhone_number(s)
	}
}

func (s *Phone_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPhone_number(s)
	}
}

func (p *sdpParser) Phone_number() (localctx IPhone_numberContext) {
	localctx = NewPhone_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, sdpParserRULE_phone_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(631)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(606)
			p.Phone()
		}
		p.SetState(610)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == sdpParserSPACE {
			{
				p.SetState(607)
				p.Sp()
			}

			p.SetState(612)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(613)
			p.Match(sdpParserLEFT_PAREN)
		}
		p.SetState(615)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserSPACE)|(1<<sdpParserEXCLAMATION)|(1<<sdpParserQUOTE)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33))|(1<<(sdpParserLEFT_BRACE-33))|(1<<(sdpParserBACKSLASH-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(sdpParserRIGHT_CURLY_BRACE-97))|(1<<(sdpParserTILDE-97))|(1<<(sdpParserU_0001-97))|(1<<(sdpParserU_0002-97))|(1<<(sdpParserU_0003-97))|(1<<(sdpParserU_0004-97))|(1<<(sdpParserU_0005-97))|(1<<(sdpParserU_0006-97))|(1<<(sdpParserU_0007-97))|(1<<(sdpParserU_0008-97))|(1<<(sdpParserU_000B-97))|(1<<(sdpParserU_000C-97))|(1<<(sdpParserU_000E-97))|(1<<(sdpParserU_000F-97))|(1<<(sdpParserU_0010-97))|(1<<(sdpParserU_0011-97))|(1<<(sdpParserU_0012-97))|(1<<(sdpParserU_0013-97))|(1<<(sdpParserU_0014-97))|(1<<(sdpParserU_0015-97))|(1<<(sdpParserU_0016-97))|(1<<(sdpParserU_0017-97))|(1<<(sdpParserU_0018-97))|(1<<(sdpParserU_0019-97))|(1<<(sdpParserU_001A-97))|(1<<(sdpParserU_001B-97))|(1<<(sdpParserU_001C-97))|(1<<(sdpParserU_001D-97))|(1<<(sdpParserU_001E-97))|(1<<(sdpParserU_001F-97))|(1<<(sdpParserU_007F-97)))) != 0) || (((_la-129)&-(0x1f+1)) == 0 && ((1<<uint((_la-129)))&((1<<(sdpParserU_0080-129))|(1<<(sdpParserU_0081-129))|(1<<(sdpParserU_0082-129))|(1<<(sdpParserU_0083-129))|(1<<(sdpParserU_0084-129))|(1<<(sdpParserU_0085-129))|(1<<(sdpParserU_0086-129))|(1<<(sdpParserU_0087-129))|(1<<(sdpParserU_0088-129))|(1<<(sdpParserU_0089-129))|(1<<(sdpParserU_008A-129))|(1<<(sdpParserU_008B-129))|(1<<(sdpParserU_008C-129))|(1<<(sdpParserU_008D-129))|(1<<(sdpParserU_008E-129))|(1<<(sdpParserU_008F-129))|(1<<(sdpParserU_0090-129))|(1<<(sdpParserU_0091-129))|(1<<(sdpParserU_0092-129))|(1<<(sdpParserU_0093-129))|(1<<(sdpParserU_0094-129))|(1<<(sdpParserU_0095-129))|(1<<(sdpParserU_0096-129))|(1<<(sdpParserU_0097-129))|(1<<(sdpParserU_0098-129))|(1<<(sdpParserU_0099-129))|(1<<(sdpParserU_009A-129))|(1<<(sdpParserU_009B-129))|(1<<(sdpParserU_009C-129))|(1<<(sdpParserU_009D-129))|(1<<(sdpParserU_009E-129))|(1<<(sdpParserU_009F-129)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(sdpParserU_00A0-161))|(1<<(sdpParserU_00A1-161))|(1<<(sdpParserU_00A2-161))|(1<<(sdpParserU_00A3-161))|(1<<(sdpParserU_00A4-161))|(1<<(sdpParserU_00A5-161))|(1<<(sdpParserU_00A6-161))|(1<<(sdpParserU_00A7-161))|(1<<(sdpParserU_00A8-161))|(1<<(sdpParserU_00A9-161))|(1<<(sdpParserU_00AA-161))|(1<<(sdpParserU_00AB-161))|(1<<(sdpParserU_00AC-161))|(1<<(sdpParserU_00AD-161))|(1<<(sdpParserU_00AE-161))|(1<<(sdpParserU_00AF-161))|(1<<(sdpParserU_00B0-161))|(1<<(sdpParserU_00B1-161))|(1<<(sdpParserU_00B2-161))|(1<<(sdpParserU_00B3-161))|(1<<(sdpParserU_00B4-161))|(1<<(sdpParserU_00B5-161))|(1<<(sdpParserU_00B6-161))|(1<<(sdpParserU_00B7-161))|(1<<(sdpParserU_00B8-161))|(1<<(sdpParserU_00B9-161))|(1<<(sdpParserU_00BA-161))|(1<<(sdpParserU_00BB-161))|(1<<(sdpParserU_00BC-161))|(1<<(sdpParserU_00BD-161))|(1<<(sdpParserU_00BE-161))|(1<<(sdpParserU_00BF-161)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(sdpParserU_00C0-193))|(1<<(sdpParserU_00C1-193))|(1<<(sdpParserU_00C2-193))|(1<<(sdpParserU_00C3-193))|(1<<(sdpParserU_00C4-193))|(1<<(sdpParserU_00C5-193))|(1<<(sdpParserU_00C6-193))|(1<<(sdpParserU_00C7-193))|(1<<(sdpParserU_00C8-193))|(1<<(sdpParserU_00C9-193))|(1<<(sdpParserU_00CA-193))|(1<<(sdpParserU_00CB-193))|(1<<(sdpParserU_00CC-193))|(1<<(sdpParserU_00CD-193))|(1<<(sdpParserU_00CE-193))|(1<<(sdpParserU_00CF-193))|(1<<(sdpParserU_00D0-193))|(1<<(sdpParserU_00D1-193))|(1<<(sdpParserU_00D2-193))|(1<<(sdpParserU_00D3-193))|(1<<(sdpParserU_00D4-193))|(1<<(sdpParserU_00D5-193))|(1<<(sdpParserU_00D6-193))|(1<<(sdpParserU_00D7-193))|(1<<(sdpParserU_00D8-193))|(1<<(sdpParserU_00D9-193))|(1<<(sdpParserU_00DA-193))|(1<<(sdpParserU_00DB-193))|(1<<(sdpParserU_00DC-193))|(1<<(sdpParserU_00DD-193))|(1<<(sdpParserU_00DE-193))|(1<<(sdpParserU_00DF-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(sdpParserU_00E0-225))|(1<<(sdpParserU_00E1-225))|(1<<(sdpParserU_00E2-225))|(1<<(sdpParserU_00E3-225))|(1<<(sdpParserU_00E4-225))|(1<<(sdpParserU_00E5-225))|(1<<(sdpParserU_00E6-225))|(1<<(sdpParserU_00E7-225))|(1<<(sdpParserU_00E8-225))|(1<<(sdpParserU_00E9-225))|(1<<(sdpParserU_00EA-225))|(1<<(sdpParserU_00EB-225))|(1<<(sdpParserU_00EC-225))|(1<<(sdpParserU_00ED-225))|(1<<(sdpParserU_00EE-225))|(1<<(sdpParserU_00EF-225))|(1<<(sdpParserU_00F0-225))|(1<<(sdpParserU_00F1-225))|(1<<(sdpParserU_00F2-225))|(1<<(sdpParserU_00F3-225))|(1<<(sdpParserU_00F4-225))|(1<<(sdpParserU_00F5-225))|(1<<(sdpParserU_00F6-225))|(1<<(sdpParserU_00F7-225))|(1<<(sdpParserU_00F8-225))|(1<<(sdpParserU_00F9-225))|(1<<(sdpParserU_00FA-225))|(1<<(sdpParserU_00FB-225))|(1<<(sdpParserU_00FC-225))|(1<<(sdpParserU_00FD-225))|(1<<(sdpParserU_00FE-225))|(1<<(sdpParserU_00FF-225)))) != 0) {
			{
				p.SetState(614)
				p.Email_safe()
			}

			p.SetState(617)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(619)
			p.Match(sdpParserRIGHT_PAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserSPACE)|(1<<sdpParserEXCLAMATION)|(1<<sdpParserQUOTE)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33))|(1<<(sdpParserLEFT_BRACE-33))|(1<<(sdpParserBACKSLASH-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(sdpParserRIGHT_CURLY_BRACE-97))|(1<<(sdpParserTILDE-97))|(1<<(sdpParserU_0001-97))|(1<<(sdpParserU_0002-97))|(1<<(sdpParserU_0003-97))|(1<<(sdpParserU_0004-97))|(1<<(sdpParserU_0005-97))|(1<<(sdpParserU_0006-97))|(1<<(sdpParserU_0007-97))|(1<<(sdpParserU_0008-97))|(1<<(sdpParserU_000B-97))|(1<<(sdpParserU_000C-97))|(1<<(sdpParserU_000E-97))|(1<<(sdpParserU_000F-97))|(1<<(sdpParserU_0010-97))|(1<<(sdpParserU_0011-97))|(1<<(sdpParserU_0012-97))|(1<<(sdpParserU_0013-97))|(1<<(sdpParserU_0014-97))|(1<<(sdpParserU_0015-97))|(1<<(sdpParserU_0016-97))|(1<<(sdpParserU_0017-97))|(1<<(sdpParserU_0018-97))|(1<<(sdpParserU_0019-97))|(1<<(sdpParserU_001A-97))|(1<<(sdpParserU_001B-97))|(1<<(sdpParserU_001C-97))|(1<<(sdpParserU_001D-97))|(1<<(sdpParserU_001E-97))|(1<<(sdpParserU_001F-97))|(1<<(sdpParserU_007F-97)))) != 0) || (((_la-129)&-(0x1f+1)) == 0 && ((1<<uint((_la-129)))&((1<<(sdpParserU_0080-129))|(1<<(sdpParserU_0081-129))|(1<<(sdpParserU_0082-129))|(1<<(sdpParserU_0083-129))|(1<<(sdpParserU_0084-129))|(1<<(sdpParserU_0085-129))|(1<<(sdpParserU_0086-129))|(1<<(sdpParserU_0087-129))|(1<<(sdpParserU_0088-129))|(1<<(sdpParserU_0089-129))|(1<<(sdpParserU_008A-129))|(1<<(sdpParserU_008B-129))|(1<<(sdpParserU_008C-129))|(1<<(sdpParserU_008D-129))|(1<<(sdpParserU_008E-129))|(1<<(sdpParserU_008F-129))|(1<<(sdpParserU_0090-129))|(1<<(sdpParserU_0091-129))|(1<<(sdpParserU_0092-129))|(1<<(sdpParserU_0093-129))|(1<<(sdpParserU_0094-129))|(1<<(sdpParserU_0095-129))|(1<<(sdpParserU_0096-129))|(1<<(sdpParserU_0097-129))|(1<<(sdpParserU_0098-129))|(1<<(sdpParserU_0099-129))|(1<<(sdpParserU_009A-129))|(1<<(sdpParserU_009B-129))|(1<<(sdpParserU_009C-129))|(1<<(sdpParserU_009D-129))|(1<<(sdpParserU_009E-129))|(1<<(sdpParserU_009F-129)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(sdpParserU_00A0-161))|(1<<(sdpParserU_00A1-161))|(1<<(sdpParserU_00A2-161))|(1<<(sdpParserU_00A3-161))|(1<<(sdpParserU_00A4-161))|(1<<(sdpParserU_00A5-161))|(1<<(sdpParserU_00A6-161))|(1<<(sdpParserU_00A7-161))|(1<<(sdpParserU_00A8-161))|(1<<(sdpParserU_00A9-161))|(1<<(sdpParserU_00AA-161))|(1<<(sdpParserU_00AB-161))|(1<<(sdpParserU_00AC-161))|(1<<(sdpParserU_00AD-161))|(1<<(sdpParserU_00AE-161))|(1<<(sdpParserU_00AF-161))|(1<<(sdpParserU_00B0-161))|(1<<(sdpParserU_00B1-161))|(1<<(sdpParserU_00B2-161))|(1<<(sdpParserU_00B3-161))|(1<<(sdpParserU_00B4-161))|(1<<(sdpParserU_00B5-161))|(1<<(sdpParserU_00B6-161))|(1<<(sdpParserU_00B7-161))|(1<<(sdpParserU_00B8-161))|(1<<(sdpParserU_00B9-161))|(1<<(sdpParserU_00BA-161))|(1<<(sdpParserU_00BB-161))|(1<<(sdpParserU_00BC-161))|(1<<(sdpParserU_00BD-161))|(1<<(sdpParserU_00BE-161))|(1<<(sdpParserU_00BF-161)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(sdpParserU_00C0-193))|(1<<(sdpParserU_00C1-193))|(1<<(sdpParserU_00C2-193))|(1<<(sdpParserU_00C3-193))|(1<<(sdpParserU_00C4-193))|(1<<(sdpParserU_00C5-193))|(1<<(sdpParserU_00C6-193))|(1<<(sdpParserU_00C7-193))|(1<<(sdpParserU_00C8-193))|(1<<(sdpParserU_00C9-193))|(1<<(sdpParserU_00CA-193))|(1<<(sdpParserU_00CB-193))|(1<<(sdpParserU_00CC-193))|(1<<(sdpParserU_00CD-193))|(1<<(sdpParserU_00CE-193))|(1<<(sdpParserU_00CF-193))|(1<<(sdpParserU_00D0-193))|(1<<(sdpParserU_00D1-193))|(1<<(sdpParserU_00D2-193))|(1<<(sdpParserU_00D3-193))|(1<<(sdpParserU_00D4-193))|(1<<(sdpParserU_00D5-193))|(1<<(sdpParserU_00D6-193))|(1<<(sdpParserU_00D7-193))|(1<<(sdpParserU_00D8-193))|(1<<(sdpParserU_00D9-193))|(1<<(sdpParserU_00DA-193))|(1<<(sdpParserU_00DB-193))|(1<<(sdpParserU_00DC-193))|(1<<(sdpParserU_00DD-193))|(1<<(sdpParserU_00DE-193))|(1<<(sdpParserU_00DF-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(sdpParserU_00E0-225))|(1<<(sdpParserU_00E1-225))|(1<<(sdpParserU_00E2-225))|(1<<(sdpParserU_00E3-225))|(1<<(sdpParserU_00E4-225))|(1<<(sdpParserU_00E5-225))|(1<<(sdpParserU_00E6-225))|(1<<(sdpParserU_00E7-225))|(1<<(sdpParserU_00E8-225))|(1<<(sdpParserU_00E9-225))|(1<<(sdpParserU_00EA-225))|(1<<(sdpParserU_00EB-225))|(1<<(sdpParserU_00EC-225))|(1<<(sdpParserU_00ED-225))|(1<<(sdpParserU_00EE-225))|(1<<(sdpParserU_00EF-225))|(1<<(sdpParserU_00F0-225))|(1<<(sdpParserU_00F1-225))|(1<<(sdpParserU_00F2-225))|(1<<(sdpParserU_00F3-225))|(1<<(sdpParserU_00F4-225))|(1<<(sdpParserU_00F5-225))|(1<<(sdpParserU_00F6-225))|(1<<(sdpParserU_00F7-225))|(1<<(sdpParserU_00F8-225))|(1<<(sdpParserU_00F9-225))|(1<<(sdpParserU_00FA-225))|(1<<(sdpParserU_00FB-225))|(1<<(sdpParserU_00FC-225))|(1<<(sdpParserU_00FD-225))|(1<<(sdpParserU_00FE-225))|(1<<(sdpParserU_00FF-225)))) != 0) {
			{
				p.SetState(621)
				p.Email_safe()
			}

			p.SetState(624)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(626)
			p.Match(sdpParserLESS_THAN)
		}
		{
			p.SetState(627)
			p.Phone()
		}
		{
			p.SetState(628)
			p.Match(sdpParserGREATER_THAN)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(630)
			p.Phone()
		}

	}

	return localctx
}

// IPhoneContext is an interface to support dynamic dispatch.
type IPhoneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPhoneContext differentiates from other interfaces.
	IsPhoneContext()
}

type PhoneContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPhoneContext() *PhoneContext {
	var p = new(PhoneContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_phone
	return p
}

func (*PhoneContext) IsPhoneContext() {}

func NewPhoneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PhoneContext {
	var p = new(PhoneContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_phone

	return p
}

func (s *PhoneContext) GetParser() antlr.Parser { return s.parser }

func (s *PhoneContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *PhoneContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *PhoneContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *PhoneContext) AllSp() []ISpContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISpContext)(nil)).Elem())
	var tst = make([]ISpContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISpContext)
		}
	}

	return tst
}

func (s *PhoneContext) Sp(i int) ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *PhoneContext) AllDASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserDASH)
}

func (s *PhoneContext) DASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, i)
}

func (s *PhoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PhoneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PhoneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPhone(s)
	}
}

func (s *PhoneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPhone(s)
	}
}

func (p *sdpParser) Phone() (localctx IPhoneContext) {
	localctx = NewPhoneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, sdpParserRULE_phone)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(634)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserPLUS {
		{
			p.SetState(633)
			p.Match(sdpParserPLUS)
		}

	}
	{
		p.SetState(636)
		p.Digit()
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(640)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case sdpParserSPACE:
				{
					p.SetState(637)
					p.Sp()
				}

			case sdpParserDASH:
				{
					p.SetState(638)
					p.Match(sdpParserDASH)
				}

			case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
				{
					p.SetState(639)
					p.Digit()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(642)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext())
	}

	return localctx
}

// IConnection_addressContext is an interface to support dynamic dispatch.
type IConnection_addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnection_addressContext differentiates from other interfaces.
	IsConnection_addressContext()
}

type Connection_addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnection_addressContext() *Connection_addressContext {
	var p = new(Connection_addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_connection_address
	return p
}

func (*Connection_addressContext) IsConnection_addressContext() {}

func NewConnection_addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Connection_addressContext {
	var p = new(Connection_addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_connection_address

	return p
}

func (s *Connection_addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Connection_addressContext) Multicast_address() IMulticast_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMulticast_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMulticast_addressContext)
}

func (s *Connection_addressContext) Unicast_address() IUnicast_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnicast_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnicast_addressContext)
}

func (s *Connection_addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Connection_addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Connection_addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterConnection_address(s)
	}
}

func (s *Connection_addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitConnection_address(s)
	}
}

func (p *sdpParser) Connection_address() (localctx IConnection_addressContext) {
	localctx = NewConnection_addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, sdpParserRULE_connection_address)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(644)
			p.Multicast_address()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(645)
			p.Unicast_address()
		}

	}

	return localctx
}

// IBwtypeContext is an interface to support dynamic dispatch.
type IBwtypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBwtypeContext differentiates from other interfaces.
	IsBwtypeContext()
}

type BwtypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBwtypeContext() *BwtypeContext {
	var p = new(BwtypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_bwtype
	return p
}

func (*BwtypeContext) IsBwtypeContext() {}

func NewBwtypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BwtypeContext {
	var p = new(BwtypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_bwtype

	return p
}

func (s *BwtypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BwtypeContext) Token() ITokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokenContext)
}

func (s *BwtypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BwtypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BwtypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBwtype(s)
	}
}

func (s *BwtypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBwtype(s)
	}
}

func (p *sdpParser) Bwtype() (localctx IBwtypeContext) {
	localctx = NewBwtypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, sdpParserRULE_bwtype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.Token()
	}

	return localctx
}

// IBandwidthContext is an interface to support dynamic dispatch.
type IBandwidthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBandwidthContext differentiates from other interfaces.
	IsBandwidthContext()
}

type BandwidthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBandwidthContext() *BandwidthContext {
	var p = new(BandwidthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_bandwidth
	return p
}

func (*BandwidthContext) IsBandwidthContext() {}

func NewBandwidthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BandwidthContext {
	var p = new(BandwidthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_bandwidth

	return p
}

func (s *BandwidthContext) GetParser() antlr.Parser { return s.parser }

func (s *BandwidthContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *BandwidthContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *BandwidthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BandwidthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BandwidthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBandwidth(s)
	}
}

func (s *BandwidthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBandwidth(s)
	}
}

func (p *sdpParser) Bandwidth() (localctx IBandwidthContext) {
	localctx = NewBandwidthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, sdpParserRULE_bandwidth)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(651)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
		{
			p.SetState(650)
			p.Digit()
		}

		p.SetState(653)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStart_timeContext is an interface to support dynamic dispatch.
type IStart_timeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_timeContext differentiates from other interfaces.
	IsStart_timeContext()
}

type Start_timeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_timeContext() *Start_timeContext {
	var p = new(Start_timeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_start_time
	return p
}

func (*Start_timeContext) IsStart_timeContext() {}

func NewStart_timeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_timeContext {
	var p = new(Start_timeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_start_time

	return p
}

func (s *Start_timeContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_timeContext) Time() ITimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeContext)
}

func (s *Start_timeContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *Start_timeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_timeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_timeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterStart_time(s)
	}
}

func (s *Start_timeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitStart_time(s)
	}
}

func (p *sdpParser) Start_time() (localctx IStart_timeContext) {
	localctx = NewStart_timeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, sdpParserRULE_start_time)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(657)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(655)
			p.Time()
		}

	case sdpParserZERO:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(656)
			p.Match(sdpParserZERO)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStop_timeContext is an interface to support dynamic dispatch.
type IStop_timeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStop_timeContext differentiates from other interfaces.
	IsStop_timeContext()
}

type Stop_timeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStop_timeContext() *Stop_timeContext {
	var p = new(Stop_timeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_stop_time
	return p
}

func (*Stop_timeContext) IsStop_timeContext() {}

func NewStop_timeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stop_timeContext {
	var p = new(Stop_timeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_stop_time

	return p
}

func (s *Stop_timeContext) GetParser() antlr.Parser { return s.parser }

func (s *Stop_timeContext) Time() ITimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeContext)
}

func (s *Stop_timeContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *Stop_timeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stop_timeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stop_timeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterStop_time(s)
	}
}

func (s *Stop_timeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitStop_time(s)
	}
}

func (p *sdpParser) Stop_time() (localctx IStop_timeContext) {
	localctx = NewStop_timeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, sdpParserRULE_stop_time)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(661)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(659)
			p.Time()
		}

	case sdpParserZERO:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(660)
			p.Match(sdpParserZERO)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimeContext is an interface to support dynamic dispatch.
type ITimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimeContext differentiates from other interfaces.
	IsTimeContext()
}

type TimeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeContext() *TimeContext {
	var p = new(TimeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_time
	return p
}

func (*TimeContext) IsTimeContext() {}

func NewTimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimeContext {
	var p = new(TimeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_time

	return p
}

func (s *TimeContext) GetParser() antlr.Parser { return s.parser }

func (s *TimeContext) Pos_digit() IPos_digitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPos_digitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPos_digitContext)
}

func (s *TimeContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *TimeContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *TimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterTime(s)
	}
}

func (s *TimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitTime(s)
	}
}

func (p *sdpParser) Time() (localctx ITimeContext) {
	localctx = NewTimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, sdpParserRULE_time)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(663)
		p.Pos_digit()
	}

	{
		p.SetState(664)
		p.Digit()
	}
	{
		p.SetState(665)
		p.Digit()
	}
	{
		p.SetState(666)
		p.Digit()
	}
	{
		p.SetState(667)
		p.Digit()
	}
	{
		p.SetState(668)
		p.Digit()
	}
	{
		p.SetState(669)
		p.Digit()
	}
	{
		p.SetState(670)
		p.Digit()
	}
	{
		p.SetState(671)
		p.Digit()
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
		{
			p.SetState(672)
			p.Digit()
		}

		p.SetState(675)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRepeat_intervalContext is an interface to support dynamic dispatch.
type IRepeat_intervalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeat_intervalContext differentiates from other interfaces.
	IsRepeat_intervalContext()
}

type Repeat_intervalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeat_intervalContext() *Repeat_intervalContext {
	var p = new(Repeat_intervalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_repeat_interval
	return p
}

func (*Repeat_intervalContext) IsRepeat_intervalContext() {}

func NewRepeat_intervalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeat_intervalContext {
	var p = new(Repeat_intervalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_repeat_interval

	return p
}

func (s *Repeat_intervalContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeat_intervalContext) Pos_digit() IPos_digitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPos_digitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPos_digitContext)
}

func (s *Repeat_intervalContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *Repeat_intervalContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Repeat_intervalContext) Fixed_len_time_unit() IFixed_len_time_unitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFixed_len_time_unitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFixed_len_time_unitContext)
}

func (s *Repeat_intervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeat_intervalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeat_intervalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterRepeat_interval(s)
	}
}

func (s *Repeat_intervalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitRepeat_interval(s)
	}
}

func (p *sdpParser) Repeat_interval() (localctx IRepeat_intervalContext) {
	localctx = NewRepeat_intervalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, sdpParserRULE_repeat_interval)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(677)
		p.Pos_digit()
	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0 {
		{
			p.SetState(678)
			p.Digit()
		}

		p.SetState(683)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(685)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-72)&-(0x1f+1)) == 0 && ((1<<uint((_la-72)))&((1<<(sdpParserD-72))|(1<<(sdpParserH-72))|(1<<(sdpParserM-72))|(1<<(sdpParserS-72)))) != 0 {
		{
			p.SetState(684)
			p.Fixed_len_time_unit()
		}

	}

	return localctx
}

// ITyped_timeContext is an interface to support dynamic dispatch.
type ITyped_timeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTyped_timeContext differentiates from other interfaces.
	IsTyped_timeContext()
}

type Typed_timeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTyped_timeContext() *Typed_timeContext {
	var p = new(Typed_timeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_typed_time
	return p
}

func (*Typed_timeContext) IsTyped_timeContext() {}

func NewTyped_timeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Typed_timeContext {
	var p = new(Typed_timeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_typed_time

	return p
}

func (s *Typed_timeContext) GetParser() antlr.Parser { return s.parser }

func (s *Typed_timeContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *Typed_timeContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Typed_timeContext) Fixed_len_time_unit() IFixed_len_time_unitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFixed_len_time_unitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFixed_len_time_unitContext)
}

func (s *Typed_timeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Typed_timeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Typed_timeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterTyped_time(s)
	}
}

func (s *Typed_timeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitTyped_time(s)
	}
}

func (p *sdpParser) Typed_time() (localctx ITyped_timeContext) {
	localctx = NewTyped_timeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, sdpParserRULE_typed_time)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
		{
			p.SetState(687)
			p.Digit()
		}

		p.SetState(690)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(693)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-72)&-(0x1f+1)) == 0 && ((1<<uint((_la-72)))&((1<<(sdpParserD-72))|(1<<(sdpParserH-72))|(1<<(sdpParserM-72))|(1<<(sdpParserS-72)))) != 0 {
		{
			p.SetState(692)
			p.Fixed_len_time_unit()
		}

	}

	return localctx
}

// IFixed_len_time_unitContext is an interface to support dynamic dispatch.
type IFixed_len_time_unitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFixed_len_time_unitContext differentiates from other interfaces.
	IsFixed_len_time_unitContext()
}

type Fixed_len_time_unitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFixed_len_time_unitContext() *Fixed_len_time_unitContext {
	var p = new(Fixed_len_time_unitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_fixed_len_time_unit
	return p
}

func (*Fixed_len_time_unitContext) IsFixed_len_time_unitContext() {}

func NewFixed_len_time_unitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fixed_len_time_unitContext {
	var p = new(Fixed_len_time_unitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_fixed_len_time_unit

	return p
}

func (s *Fixed_len_time_unitContext) GetParser() antlr.Parser { return s.parser }

func (s *Fixed_len_time_unitContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *Fixed_len_time_unitContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *Fixed_len_time_unitContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *Fixed_len_time_unitContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *Fixed_len_time_unitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fixed_len_time_unitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fixed_len_time_unitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterFixed_len_time_unit(s)
	}
}

func (s *Fixed_len_time_unitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitFixed_len_time_unit(s)
	}
}

func (p *sdpParser) Fixed_len_time_unit() (localctx IFixed_len_time_unitContext) {
	localctx = NewFixed_len_time_unitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, sdpParserRULE_fixed_len_time_unit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(695)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-72)&-(0x1f+1)) == 0 && ((1<<uint((_la-72)))&((1<<(sdpParserD-72))|(1<<(sdpParserH-72))|(1<<(sdpParserM-72))|(1<<(sdpParserS-72)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKey_typeContext is an interface to support dynamic dispatch.
type IKey_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKey_typeContext differentiates from other interfaces.
	IsKey_typeContext()
}

type Key_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKey_typeContext() *Key_typeContext {
	var p = new(Key_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_key_type
	return p
}

func (*Key_typeContext) IsKey_typeContext() {}

func NewKey_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Key_typeContext {
	var p = new(Key_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_key_type

	return p
}

func (s *Key_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Key_typeContext) AllP() []antlr.TerminalNode {
	return s.GetTokens(sdpParserP)
}

func (s *Key_typeContext) P(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserP, i)
}

func (s *Key_typeContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *Key_typeContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *Key_typeContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *Key_typeContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *Key_typeContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *Key_typeContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *Key_typeContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *Key_typeContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *Key_typeContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Key_typeContext) Text() ITextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITextContext)
}

func (s *Key_typeContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *Key_typeContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *Key_typeContext) Base64() IBase64Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBase64Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBase64Context)
}

func (s *Key_typeContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *Key_typeContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *Key_typeContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *Key_typeContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *Key_typeContext) Uri() IUriContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUriContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUriContext)
}

func (s *Key_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Key_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Key_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterKey_type(s)
	}
}

func (s *Key_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitKey_type(s)
	}
}

func (p *sdpParser) Key_type() (localctx IKey_typeContext) {
	localctx = NewKey_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, sdpParserRULE_key_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(724)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(697)
			p.Match(sdpParserP)
		}
		{
			p.SetState(698)
			p.Match(sdpParserR)
		}
		{
			p.SetState(699)
			p.Match(sdpParserO)
		}
		{
			p.SetState(700)
			p.Match(sdpParserM)
		}
		{
			p.SetState(701)
			p.Match(sdpParserP)
		}
		{
			p.SetState(702)
			p.Match(sdpParserT)
		}

	case sdpParserC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(703)
			p.Match(sdpParserC)
		}
		{
			p.SetState(704)
			p.Match(sdpParserL)
		}
		{
			p.SetState(705)
			p.Match(sdpParserE)
		}
		{
			p.SetState(706)
			p.Match(sdpParserA)
		}
		{
			p.SetState(707)
			p.Match(sdpParserR)
		}
		{
			p.SetState(708)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(709)
			p.Text()
		}

	case sdpParserB:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(710)
			p.Match(sdpParserB)
		}
		{
			p.SetState(711)
			p.Match(sdpParserA)
		}
		{
			p.SetState(712)
			p.Match(sdpParserS)
		}
		{
			p.SetState(713)
			p.Match(sdpParserE)
		}

		{
			p.SetState(714)
			p.Match(sdpParserSIX)
		}
		{
			p.SetState(715)
			p.Match(sdpParserFOUR)
		}
		{
			p.SetState(716)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(718)
			p.Base64()
		}

	case sdpParserU:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(719)
			p.Match(sdpParserU)
		}
		{
			p.SetState(720)
			p.Match(sdpParserR)
		}
		{
			p.SetState(721)
			p.Match(sdpParserI)
		}
		{
			p.SetState(722)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(723)
			p.Uri()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBase64Context is an interface to support dynamic dispatch.
type IBase64Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBase64Context differentiates from other interfaces.
	IsBase64Context()
}

type Base64Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase64Context() *Base64Context {
	var p = new(Base64Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_base64
	return p
}

func (*Base64Context) IsBase64Context() {}

func NewBase64Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base64Context {
	var p = new(Base64Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_base64

	return p
}

func (s *Base64Context) GetParser() antlr.Parser { return s.parser }

func (s *Base64Context) AllBase64_unit() []IBase64_unitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBase64_unitContext)(nil)).Elem())
	var tst = make([]IBase64_unitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBase64_unitContext)
		}
	}

	return tst
}

func (s *Base64Context) Base64_unit(i int) IBase64_unitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBase64_unitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBase64_unitContext)
}

func (s *Base64Context) Base64_pad() IBase64_padContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBase64_padContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBase64_padContext)
}

func (s *Base64Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base64Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Base64Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBase64(s)
	}
}

func (s *Base64Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBase64(s)
	}
}

func (p *sdpParser) Base64() (localctx IBase64Context) {
	localctx = NewBase64Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, sdpParserRULE_base64)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(729)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(726)
				p.Base64_unit()
			}

		}
		p.SetState(731)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())
	}
	p.SetState(733)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserPLUS)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69)))) != 0) {
		{
			p.SetState(732)
			p.Base64_pad()
		}

	}

	return localctx
}

// IBase64_unitContext is an interface to support dynamic dispatch.
type IBase64_unitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBase64_unitContext differentiates from other interfaces.
	IsBase64_unitContext()
}

type Base64_unitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase64_unitContext() *Base64_unitContext {
	var p = new(Base64_unitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_base64_unit
	return p
}

func (*Base64_unitContext) IsBase64_unitContext() {}

func NewBase64_unitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base64_unitContext {
	var p = new(Base64_unitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_base64_unit

	return p
}

func (s *Base64_unitContext) GetParser() antlr.Parser { return s.parser }

func (s *Base64_unitContext) AllBase64_char() []IBase64_charContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBase64_charContext)(nil)).Elem())
	var tst = make([]IBase64_charContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBase64_charContext)
		}
	}

	return tst
}

func (s *Base64_unitContext) Base64_char(i int) IBase64_charContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBase64_charContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBase64_charContext)
}

func (s *Base64_unitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base64_unitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Base64_unitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBase64_unit(s)
	}
}

func (s *Base64_unitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBase64_unit(s)
	}
}

func (p *sdpParser) Base64_unit() (localctx IBase64_unitContext) {
	localctx = NewBase64_unitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, sdpParserRULE_base64_unit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(735)
		p.Base64_char()
	}
	{
		p.SetState(736)
		p.Base64_char()
	}
	{
		p.SetState(737)
		p.Base64_char()
	}
	{
		p.SetState(738)
		p.Base64_char()
	}

	return localctx
}

// IBase64_padContext is an interface to support dynamic dispatch.
type IBase64_padContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBase64_padContext differentiates from other interfaces.
	IsBase64_padContext()
}

type Base64_padContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase64_padContext() *Base64_padContext {
	var p = new(Base64_padContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_base64_pad
	return p
}

func (*Base64_padContext) IsBase64_padContext() {}

func NewBase64_padContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base64_padContext {
	var p = new(Base64_padContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_base64_pad

	return p
}

func (s *Base64_padContext) GetParser() antlr.Parser { return s.parser }

func (s *Base64_padContext) AllBase64_char() []IBase64_charContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBase64_charContext)(nil)).Elem())
	var tst = make([]IBase64_charContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBase64_charContext)
		}
	}

	return tst
}

func (s *Base64_padContext) Base64_char(i int) IBase64_charContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBase64_charContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBase64_charContext)
}

func (s *Base64_padContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEQUALS)
}

func (s *Base64_padContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, i)
}

func (s *Base64_padContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base64_padContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Base64_padContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBase64_pad(s)
	}
}

func (s *Base64_padContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBase64_pad(s)
	}
}

func (p *sdpParser) Base64_pad() (localctx IBase64_padContext) {
	localctx = NewBase64_padContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, sdpParserRULE_base64_pad)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(740)
			p.Base64_char()
		}
		{
			p.SetState(741)
			p.Base64_char()
		}

		{
			p.SetState(743)
			p.Match(sdpParserEQUALS)
		}
		{
			p.SetState(744)
			p.Match(sdpParserEQUALS)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(746)
			p.Base64_char()
		}
		{
			p.SetState(747)
			p.Base64_char()
		}
		{
			p.SetState(748)
			p.Base64_char()
		}

		{
			p.SetState(750)
			p.Match(sdpParserEQUALS)
		}

	}

	return localctx
}

// IBase64_charContext is an interface to support dynamic dispatch.
type IBase64_charContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBase64_charContext differentiates from other interfaces.
	IsBase64_charContext()
}

type Base64_charContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase64_charContext() *Base64_charContext {
	var p = new(Base64_charContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_base64_char
	return p
}

func (*Base64_charContext) IsBase64_charContext() {}

func NewBase64_charContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base64_charContext {
	var p = new(Base64_charContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_base64_char

	return p
}

func (s *Base64_charContext) GetParser() antlr.Parser { return s.parser }

func (s *Base64_charContext) Alpha() IAlphaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlphaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlphaContext)
}

func (s *Base64_charContext) Digit() IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Base64_charContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *Base64_charContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *Base64_charContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base64_charContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Base64_charContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBase64_char(s)
	}
}

func (s *Base64_charContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBase64_char(s)
	}
}

func (p *sdpParser) Base64_char() (localctx IBase64_charContext) {
	localctx = NewBase64_charContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, sdpParserRULE_base64_char)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(758)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(754)
			p.Alpha()
		}

	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(755)
			p.Digit()
		}

	case sdpParserPLUS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(756)
			p.Match(sdpParserPLUS)
		}

	case sdpParserSLASH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(757)
			p.Match(sdpParserSLASH)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_attribute
	return p
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) Att_field() IAtt_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtt_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtt_fieldContext)
}

func (s *AttributeContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *AttributeContext) Att_value() IAtt_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtt_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtt_valueContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAttribute(s)
	}
}

func (s *AttributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAttribute(s)
	}
}

func (p *sdpParser) Attribute() (localctx IAttributeContext) {
	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, sdpParserRULE_attribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(765)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(760)
			p.Att_field()
		}
		{
			p.SetState(761)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(762)
			p.Att_value()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(764)
			p.Att_field()
		}

	}

	return localctx
}

// IAtt_fieldContext is an interface to support dynamic dispatch.
type IAtt_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtt_fieldContext differentiates from other interfaces.
	IsAtt_fieldContext()
}

type Att_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtt_fieldContext() *Att_fieldContext {
	var p = new(Att_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_att_field
	return p
}

func (*Att_fieldContext) IsAtt_fieldContext() {}

func NewAtt_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Att_fieldContext {
	var p = new(Att_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_att_field

	return p
}

func (s *Att_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Att_fieldContext) Token() ITokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokenContext)
}

func (s *Att_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Att_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Att_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAtt_field(s)
	}
}

func (s *Att_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAtt_field(s)
	}
}

func (p *sdpParser) Att_field() (localctx IAtt_fieldContext) {
	localctx = NewAtt_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, sdpParserRULE_att_field)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(767)
		p.Token()
	}

	return localctx
}

// IAtt_valueContext is an interface to support dynamic dispatch.
type IAtt_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtt_valueContext differentiates from other interfaces.
	IsAtt_valueContext()
}

type Att_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtt_valueContext() *Att_valueContext {
	var p = new(Att_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_att_value
	return p
}

func (*Att_valueContext) IsAtt_valueContext() {}

func NewAtt_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Att_valueContext {
	var p = new(Att_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_att_value

	return p
}

func (s *Att_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Att_valueContext) Byte_string() IByte_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IByte_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IByte_stringContext)
}

func (s *Att_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Att_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Att_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAtt_value(s)
	}
}

func (s *Att_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAtt_value(s)
	}
}

func (p *sdpParser) Att_value() (localctx IAtt_valueContext) {
	localctx = NewAtt_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, sdpParserRULE_att_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(769)
		p.Byte_string()
	}

	return localctx
}

// IMediaContext is an interface to support dynamic dispatch.
type IMediaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMediaContext differentiates from other interfaces.
	IsMediaContext()
}

type MediaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMediaContext() *MediaContext {
	var p = new(MediaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_media
	return p
}

func (*MediaContext) IsMediaContext() {}

func NewMediaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MediaContext {
	var p = new(MediaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_media

	return p
}

func (s *MediaContext) GetParser() antlr.Parser { return s.parser }

func (s *MediaContext) Token() ITokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokenContext)
}

func (s *MediaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MediaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MediaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterMedia(s)
	}
}

func (s *MediaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitMedia(s)
	}
}

func (p *sdpParser) Media() (localctx IMediaContext) {
	localctx = NewMediaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, sdpParserRULE_media)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(771)
		p.Token()
	}

	return localctx
}

// IFmtContext is an interface to support dynamic dispatch.
type IFmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFmtContext differentiates from other interfaces.
	IsFmtContext()
}

type FmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFmtContext() *FmtContext {
	var p = new(FmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_fmt
	return p
}

func (*FmtContext) IsFmtContext() {}

func NewFmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FmtContext {
	var p = new(FmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_fmt

	return p
}

func (s *FmtContext) GetParser() antlr.Parser { return s.parser }

func (s *FmtContext) Token() ITokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokenContext)
}

func (s *FmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterFmt(s)
	}
}

func (s *FmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitFmt(s)
	}
}

func (p *sdpParser) Fmt() (localctx IFmtContext) {
	localctx = NewFmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, sdpParserRULE_fmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(773)
		p.Token()
	}

	return localctx
}

// IProtoContext is an interface to support dynamic dispatch.
type IProtoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtoContext differentiates from other interfaces.
	IsProtoContext()
}

type ProtoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtoContext() *ProtoContext {
	var p = new(ProtoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_proto
	return p
}

func (*ProtoContext) IsProtoContext() {}

func NewProtoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtoContext {
	var p = new(ProtoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_proto

	return p
}

func (s *ProtoContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtoContext) AllToken() []ITokenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITokenContext)(nil)).Elem())
	var tst = make([]ITokenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITokenContext)
		}
	}

	return tst
}

func (s *ProtoContext) Token(i int) ITokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITokenContext)
}

func (s *ProtoContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *ProtoContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *ProtoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterProto(s)
	}
}

func (s *ProtoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitProto(s)
	}
}

func (p *sdpParser) Proto() (localctx IProtoContext) {
	localctx = NewProtoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, sdpParserRULE_proto)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(775)
		p.Token()
	}
	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserSLASH {
		{
			p.SetState(776)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(777)
			p.Token()
		}

		p.SetState(782)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPortContext is an interface to support dynamic dispatch.
type IPortContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPortContext differentiates from other interfaces.
	IsPortContext()
}

type PortContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPortContext() *PortContext {
	var p = new(PortContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_port
	return p
}

func (*PortContext) IsPortContext() {}

func NewPortContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PortContext {
	var p = new(PortContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_port

	return p
}

func (s *PortContext) GetParser() antlr.Parser { return s.parser }

func (s *PortContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *PortContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *PortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PortContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPort(s)
	}
}

func (s *PortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPort(s)
	}
}

func (p *sdpParser) Port() (localctx IPortContext) {
	localctx = NewPortContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, sdpParserRULE_port)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
		{
			p.SetState(783)
			p.Digit()
		}

		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUnicast_addressContext is an interface to support dynamic dispatch.
type IUnicast_addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnicast_addressContext differentiates from other interfaces.
	IsUnicast_addressContext()
}

type Unicast_addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnicast_addressContext() *Unicast_addressContext {
	var p = new(Unicast_addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_unicast_address
	return p
}

func (*Unicast_addressContext) IsUnicast_addressContext() {}

func NewUnicast_addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unicast_addressContext {
	var p = new(Unicast_addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_unicast_address

	return p
}

func (s *Unicast_addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Unicast_addressContext) Ip4_address() IIp4_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIp4_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIp4_addressContext)
}

func (s *Unicast_addressContext) Ip6_address() IIp6_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIp6_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIp6_addressContext)
}

func (s *Unicast_addressContext) Fqdn() IFqdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFqdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFqdnContext)
}

func (s *Unicast_addressContext) Extn_addr() IExtn_addrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtn_addrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtn_addrContext)
}

func (s *Unicast_addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unicast_addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unicast_addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterUnicast_address(s)
	}
}

func (s *Unicast_addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitUnicast_address(s)
	}
}

func (p *sdpParser) Unicast_address() (localctx IUnicast_addressContext) {
	localctx = NewUnicast_addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, sdpParserRULE_unicast_address)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(788)
			p.Ip4_address()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(789)
			p.Ip6_address()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(790)
			p.Fqdn()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(791)
			p.Extn_addr()
		}

	}

	return localctx
}

// IMulticast_addressContext is an interface to support dynamic dispatch.
type IMulticast_addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMulticast_addressContext differentiates from other interfaces.
	IsMulticast_addressContext()
}

type Multicast_addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMulticast_addressContext() *Multicast_addressContext {
	var p = new(Multicast_addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_multicast_address
	return p
}

func (*Multicast_addressContext) IsMulticast_addressContext() {}

func NewMulticast_addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multicast_addressContext {
	var p = new(Multicast_addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_multicast_address

	return p
}

func (s *Multicast_addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Multicast_addressContext) Ip4_multicast() IIp4_multicastContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIp4_multicastContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIp4_multicastContext)
}

func (s *Multicast_addressContext) Ip6_multicast() IIp6_multicastContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIp6_multicastContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIp6_multicastContext)
}

func (s *Multicast_addressContext) Fqdn() IFqdnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFqdnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFqdnContext)
}

func (s *Multicast_addressContext) Extn_addr() IExtn_addrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtn_addrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtn_addrContext)
}

func (s *Multicast_addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multicast_addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multicast_addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterMulticast_address(s)
	}
}

func (s *Multicast_addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitMulticast_address(s)
	}
}

func (p *sdpParser) Multicast_address() (localctx IMulticast_addressContext) {
	localctx = NewMulticast_addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, sdpParserRULE_multicast_address)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(798)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(794)
			p.Ip4_multicast()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(795)
			p.Ip6_multicast()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(796)
			p.Fqdn()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(797)
			p.Extn_addr()
		}

	}

	return localctx
}

// IIp4_multicastContext is an interface to support dynamic dispatch.
type IIp4_multicastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIp4_multicastContext differentiates from other interfaces.
	IsIp4_multicastContext()
}

type Ip4_multicastContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIp4_multicastContext() *Ip4_multicastContext {
	var p = new(Ip4_multicastContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ip4_multicast
	return p
}

func (*Ip4_multicastContext) IsIp4_multicastContext() {}

func NewIp4_multicastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ip4_multicastContext {
	var p = new(Ip4_multicastContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ip4_multicast

	return p
}

func (s *Ip4_multicastContext) GetParser() antlr.Parser { return s.parser }

func (s *Ip4_multicastContext) M1() IM1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IM1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IM1Context)
}

func (s *Ip4_multicastContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Ip4_multicastContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Ip4_multicastContext) Ttl() ITtlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITtlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITtlContext)
}

func (s *Ip4_multicastContext) Integer() IIntegerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *Ip4_multicastContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Ip4_multicastContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Ip4_multicastContext) AllDecimal_uchar() []IDecimal_ucharContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_ucharContext)(nil)).Elem())
	var tst = make([]IDecimal_ucharContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_ucharContext)
		}
	}

	return tst
}

func (s *Ip4_multicastContext) Decimal_uchar(i int) IDecimal_ucharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_ucharContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_ucharContext)
}

func (s *Ip4_multicastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ip4_multicastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ip4_multicastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIp4_multicast(s)
	}
}

func (s *Ip4_multicastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIp4_multicast(s)
	}
}

func (p *sdpParser) Ip4_multicast() (localctx IIp4_multicastContext) {
	localctx = NewIp4_multicastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, sdpParserRULE_ip4_multicast)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(800)
		p.M1()
	}

	{
		p.SetState(801)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(802)
		p.Decimal_uchar()
	}

	{
		p.SetState(804)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(805)
		p.Decimal_uchar()
	}

	{
		p.SetState(807)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(808)
		p.Decimal_uchar()
	}

	{
		p.SetState(810)
		p.Match(sdpParserSLASH)
	}
	{
		p.SetState(811)
		p.Ttl()
	}
	p.SetState(814)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserSLASH {
		{
			p.SetState(812)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(813)
			p.Integer()
		}

	}

	return localctx
}

// IM1Context is an interface to support dynamic dispatch.
type IM1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsM1Context differentiates from other interfaces.
	IsM1Context()
}

type M1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyM1Context() *M1Context {
	var p = new(M1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_m1
	return p
}

func (*M1Context) IsM1Context() {}

func NewM1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *M1Context {
	var p = new(M1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_m1

	return p
}

func (s *M1Context) GetParser() antlr.Parser { return s.parser }

func (s *M1Context) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *M1Context) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *M1Context) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *M1Context) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *M1Context) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *M1Context) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *M1Context) AllTWO() []antlr.TerminalNode {
	return s.GetTokens(sdpParserTWO)
}

func (s *M1Context) TWO(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, i)
}

func (s *M1Context) Digit() IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *M1Context) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *M1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *M1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *M1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterM1(s)
	}
}

func (s *M1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitM1(s)
	}
}

func (p *sdpParser) M1() (localctx IM1Context) {
	localctx = NewM1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, sdpParserRULE_m1)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(824)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(816)
			p.Match(sdpParserTWO)
		}
		{
			p.SetState(817)
			p.Match(sdpParserTWO)
		}

		{
			p.SetState(819)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(820)
			p.Match(sdpParserTWO)
		}
		{
			p.SetState(821)
			p.Match(sdpParserTHREE)
		}

		{
			p.SetState(823)
			p.Digit()
		}

	}

	return localctx
}

// IIp6_multicastContext is an interface to support dynamic dispatch.
type IIp6_multicastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIp6_multicastContext differentiates from other interfaces.
	IsIp6_multicastContext()
}

type Ip6_multicastContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIp6_multicastContext() *Ip6_multicastContext {
	var p = new(Ip6_multicastContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ip6_multicast
	return p
}

func (*Ip6_multicastContext) IsIp6_multicastContext() {}

func NewIp6_multicastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ip6_multicastContext {
	var p = new(Ip6_multicastContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ip6_multicast

	return p
}

func (s *Ip6_multicastContext) GetParser() antlr.Parser { return s.parser }

func (s *Ip6_multicastContext) Hexpart() IHexpartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexpartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexpartContext)
}

func (s *Ip6_multicastContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *Ip6_multicastContext) Integer() IIntegerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *Ip6_multicastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ip6_multicastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ip6_multicastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIp6_multicast(s)
	}
}

func (s *Ip6_multicastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIp6_multicast(s)
	}
}

func (p *sdpParser) Ip6_multicast() (localctx IIp6_multicastContext) {
	localctx = NewIp6_multicastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, sdpParserRULE_ip6_multicast)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(826)
		p.Hexpart()
	}
	p.SetState(829)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserSLASH {
		{
			p.SetState(827)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(828)
			p.Integer()
		}

	}

	return localctx
}

// ITtlContext is an interface to support dynamic dispatch.
type ITtlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTtlContext differentiates from other interfaces.
	IsTtlContext()
}

type TtlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTtlContext() *TtlContext {
	var p = new(TtlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ttl
	return p
}

func (*TtlContext) IsTtlContext() {}

func NewTtlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TtlContext {
	var p = new(TtlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ttl

	return p
}

func (s *TtlContext) GetParser() antlr.Parser { return s.parser }

func (s *TtlContext) Pos_digit() IPos_digitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPos_digitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPos_digitContext)
}

func (s *TtlContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *TtlContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *TtlContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *TtlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TtlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TtlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterTtl(s)
	}
}

func (s *TtlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitTtl(s)
	}
}

func (p *sdpParser) Ttl() (localctx ITtlContext) {
	localctx = NewTtlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, sdpParserRULE_ttl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(841)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(831)
			p.Pos_digit()
		}

		p.SetState(838)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(832)
				p.Digit()
			}
			{
				p.SetState(833)
				p.Digit()
			}

		case 2:
			p.SetState(836)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0 {
				{
					p.SetState(835)
					p.Digit()
				}

			}

		}

	case sdpParserZERO:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(840)
			p.Match(sdpParserZERO)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFqdnContext is an interface to support dynamic dispatch.
type IFqdnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFqdnContext differentiates from other interfaces.
	IsFqdnContext()
}

type FqdnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFqdnContext() *FqdnContext {
	var p = new(FqdnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_fqdn
	return p
}

func (*FqdnContext) IsFqdnContext() {}

func NewFqdnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FqdnContext {
	var p = new(FqdnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_fqdn

	return p
}

func (s *FqdnContext) GetParser() antlr.Parser { return s.parser }

func (s *FqdnContext) AllAlpha_numeric() []IAlpha_numericContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlpha_numericContext)(nil)).Elem())
	var tst = make([]IAlpha_numericContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlpha_numericContext)
		}
	}

	return tst
}

func (s *FqdnContext) Alpha_numeric(i int) IAlpha_numericContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlpha_numericContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlpha_numericContext)
}

func (s *FqdnContext) AllDASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserDASH)
}

func (s *FqdnContext) DASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, i)
}

func (s *FqdnContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *FqdnContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *FqdnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FqdnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FqdnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterFqdn(s)
	}
}

func (s *FqdnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitFqdn(s)
	}
}

func (p *sdpParser) Fqdn() (localctx IFqdnContext) {
	localctx = NewFqdnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, sdpParserRULE_fqdn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(846)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		{
			p.SetState(843)
			p.Alpha_numeric()
		}

	case sdpParserDASH:
		{
			p.SetState(844)
			p.Match(sdpParserDASH)
		}

	case sdpParserPERIOD:
		{
			p.SetState(845)
			p.Match(sdpParserPERIOD)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		{
			p.SetState(848)
			p.Alpha_numeric()
		}

	case sdpParserDASH:
		{
			p.SetState(849)
			p.Match(sdpParserDASH)
		}

	case sdpParserPERIOD:
		{
			p.SetState(850)
			p.Match(sdpParserPERIOD)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		{
			p.SetState(853)
			p.Alpha_numeric()
		}

	case sdpParserDASH:
		{
			p.SetState(854)
			p.Match(sdpParserDASH)
		}

	case sdpParserPERIOD:
		{
			p.SetState(855)
			p.Match(sdpParserPERIOD)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69)))) != 0) {
		p.SetState(861)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
			{
				p.SetState(858)
				p.Alpha_numeric()
			}

		case sdpParserDASH:
			{
				p.SetState(859)
				p.Match(sdpParserDASH)
			}

		case sdpParserPERIOD:
			{
				p.SetState(860)
				p.Match(sdpParserPERIOD)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(863)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIp4_addressContext is an interface to support dynamic dispatch.
type IIp4_addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIp4_addressContext differentiates from other interfaces.
	IsIp4_addressContext()
}

type Ip4_addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIp4_addressContext() *Ip4_addressContext {
	var p = new(Ip4_addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ip4_address
	return p
}

func (*Ip4_addressContext) IsIp4_addressContext() {}

func NewIp4_addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ip4_addressContext {
	var p = new(Ip4_addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ip4_address

	return p
}

func (s *Ip4_addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Ip4_addressContext) B1() IB1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IB1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IB1Context)
}

func (s *Ip4_addressContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Ip4_addressContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Ip4_addressContext) AllDecimal_uchar() []IDecimal_ucharContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_ucharContext)(nil)).Elem())
	var tst = make([]IDecimal_ucharContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_ucharContext)
		}
	}

	return tst
}

func (s *Ip4_addressContext) Decimal_uchar(i int) IDecimal_ucharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_ucharContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_ucharContext)
}

func (s *Ip4_addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ip4_addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ip4_addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIp4_address(s)
	}
}

func (s *Ip4_addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIp4_address(s)
	}
}

func (p *sdpParser) Ip4_address() (localctx IIp4_addressContext) {
	localctx = NewIp4_addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, sdpParserRULE_ip4_address)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(865)
		p.B1()
	}

	{
		p.SetState(866)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(867)
		p.Decimal_uchar()
	}

	{
		p.SetState(869)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(870)
		p.Decimal_uchar()
	}

	{
		p.SetState(872)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(873)
		p.Decimal_uchar()
	}

	return localctx
}

// IB1Context is an interface to support dynamic dispatch.
type IB1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsB1Context differentiates from other interfaces.
	IsB1Context()
}

type B1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyB1Context() *B1Context {
	var p = new(B1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_b1
	return p
}

func (*B1Context) IsB1Context() {}

func NewB1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *B1Context {
	var p = new(B1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_b1

	return p
}

func (s *B1Context) GetParser() antlr.Parser { return s.parser }

func (s *B1Context) Decimal_uchar() IDecimal_ucharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_ucharContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_ucharContext)
}

func (s *B1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *B1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *B1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterB1(s)
	}
}

func (s *B1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitB1(s)
	}
}

func (p *sdpParser) B1() (localctx IB1Context) {
	localctx = NewB1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, sdpParserRULE_b1)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		p.Decimal_uchar()
	}

	return localctx
}

// IIp6_addressContext is an interface to support dynamic dispatch.
type IIp6_addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIp6_addressContext differentiates from other interfaces.
	IsIp6_addressContext()
}

type Ip6_addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIp6_addressContext() *Ip6_addressContext {
	var p = new(Ip6_addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ip6_address
	return p
}

func (*Ip6_addressContext) IsIp6_addressContext() {}

func NewIp6_addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ip6_addressContext {
	var p = new(Ip6_addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ip6_address

	return p
}

func (s *Ip6_addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Ip6_addressContext) Hexpart() IHexpartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexpartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexpartContext)
}

func (s *Ip6_addressContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Ip6_addressContext) Ip4_address() IIp4_addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIp4_addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIp4_addressContext)
}

func (s *Ip6_addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ip6_addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ip6_addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIp6_address(s)
	}
}

func (s *Ip6_addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIp6_address(s)
	}
}

func (p *sdpParser) Ip6_address() (localctx IIp6_addressContext) {
	localctx = NewIp6_addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, sdpParserRULE_ip6_address)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(877)
		p.Hexpart()
	}
	p.SetState(880)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserCOLON {
		{
			p.SetState(878)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(879)
			p.Ip4_address()
		}

	}

	return localctx
}

// IHexpartContext is an interface to support dynamic dispatch.
type IHexpartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexpartContext differentiates from other interfaces.
	IsHexpartContext()
}

type HexpartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexpartContext() *HexpartContext {
	var p = new(HexpartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_hexpart
	return p
}

func (*HexpartContext) IsHexpartContext() {}

func NewHexpartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexpartContext {
	var p = new(HexpartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_hexpart

	return p
}

func (s *HexpartContext) GetParser() antlr.Parser { return s.parser }

func (s *HexpartContext) AllHexseq() []IHexseqContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHexseqContext)(nil)).Elem())
	var tst = make([]IHexseqContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHexseqContext)
		}
	}

	return tst
}

func (s *HexpartContext) Hexseq(i int) IHexseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexseqContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHexseqContext)
}

func (s *HexpartContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOLON)
}

func (s *HexpartContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, i)
}

func (s *HexpartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexpartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HexpartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterHexpart(s)
	}
}

func (s *HexpartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitHexpart(s)
	}
}

func (p *sdpParser) Hexpart() (localctx IHexpartContext) {
	localctx = NewHexpartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, sdpParserRULE_hexpart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(896)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(882)
			p.Hexseq()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(883)
			p.Hexseq()
		}

		{
			p.SetState(884)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(885)
			p.Match(sdpParserCOLON)
		}

		p.SetState(888)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			{
				p.SetState(887)
				p.Hexseq()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(890)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(891)
			p.Match(sdpParserCOLON)
		}

		p.SetState(894)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			{
				p.SetState(893)
				p.Hexseq()
			}

		}

	}

	return localctx
}

// IHexseqContext is an interface to support dynamic dispatch.
type IHexseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexseqContext differentiates from other interfaces.
	IsHexseqContext()
}

type HexseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexseqContext() *HexseqContext {
	var p = new(HexseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_hexseq
	return p
}

func (*HexseqContext) IsHexseqContext() {}

func NewHexseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexseqContext {
	var p = new(HexseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_hexseq

	return p
}

func (s *HexseqContext) GetParser() antlr.Parser { return s.parser }

func (s *HexseqContext) AllHex4() []IHex4Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHex4Context)(nil)).Elem())
	var tst = make([]IHex4Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHex4Context)
		}
	}

	return tst
}

func (s *HexseqContext) Hex4(i int) IHex4Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHex4Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHex4Context)
}

func (s *HexseqContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOLON)
}

func (s *HexseqContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, i)
}

func (s *HexseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HexseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterHexseq(s)
	}
}

func (s *HexseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitHexseq(s)
	}
}

func (p *sdpParser) Hexseq() (localctx IHexseqContext) {
	localctx = NewHexseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, sdpParserRULE_hexseq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(898)
		p.Hex4()
	}
	p.SetState(903)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(899)
				p.Match(sdpParserCOLON)
			}
			{
				p.SetState(900)
				p.Hex4()
			}

		}
		p.SetState(905)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())
	}

	return localctx
}

// IHex4Context is an interface to support dynamic dispatch.
type IHex4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHex4Context differentiates from other interfaces.
	IsHex4Context()
}

type Hex4Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHex4Context() *Hex4Context {
	var p = new(Hex4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_hex4
	return p
}

func (*Hex4Context) IsHex4Context() {}

func NewHex4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hex4Context {
	var p = new(Hex4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_hex4

	return p
}

func (s *Hex4Context) GetParser() antlr.Parser { return s.parser }

func (s *Hex4Context) AllHexdig() []IHexdigContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHexdigContext)(nil)).Elem())
	var tst = make([]IHexdigContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHexdigContext)
		}
	}

	return tst
}

func (s *Hex4Context) Hexdig(i int) IHexdigContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexdigContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHexdigContext)
}

func (s *Hex4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hex4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hex4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterHex4(s)
	}
}

func (s *Hex4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitHex4(s)
	}
}

func (p *sdpParser) Hex4() (localctx IHex4Context) {
	localctx = NewHex4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, sdpParserRULE_hex4)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(906)
		p.Hexdig()
	}
	p.SetState(917)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(907)
			p.Hexdig()
		}
		{
			p.SetState(908)
			p.Hexdig()
		}
		{
			p.SetState(909)
			p.Hexdig()
		}

	case 2:
		{
			p.SetState(911)
			p.Hexdig()
		}
		{
			p.SetState(912)
			p.Hexdig()
		}

	case 3:
		p.SetState(915)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			{
				p.SetState(914)
				p.Hexdig()
			}

		}

	}

	return localctx
}

// IExtn_addrContext is an interface to support dynamic dispatch.
type IExtn_addrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtn_addrContext differentiates from other interfaces.
	IsExtn_addrContext()
}

type Extn_addrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtn_addrContext() *Extn_addrContext {
	var p = new(Extn_addrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_extn_addr
	return p
}

func (*Extn_addrContext) IsExtn_addrContext() {}

func NewExtn_addrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extn_addrContext {
	var p = new(Extn_addrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_extn_addr

	return p
}

func (s *Extn_addrContext) GetParser() antlr.Parser { return s.parser }

func (s *Extn_addrContext) Non_ws_string() INon_ws_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_ws_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_ws_stringContext)
}

func (s *Extn_addrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extn_addrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extn_addrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterExtn_addr(s)
	}
}

func (s *Extn_addrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitExtn_addr(s)
	}
}

func (p *sdpParser) Extn_addr() (localctx IExtn_addrContext) {
	localctx = NewExtn_addrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, sdpParserRULE_extn_addr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(919)
		p.Non_ws_string()
	}

	return localctx
}

// ITextContext is an interface to support dynamic dispatch.
type ITextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTextContext differentiates from other interfaces.
	IsTextContext()
}

type TextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTextContext() *TextContext {
	var p = new(TextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_text
	return p
}

func (*TextContext) IsTextContext() {}

func NewTextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TextContext {
	var p = new(TextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_text

	return p
}

func (s *TextContext) GetParser() antlr.Parser { return s.parser }

func (s *TextContext) Byte_string() IByte_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IByte_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IByte_stringContext)
}

func (s *TextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterText(s)
	}
}

func (s *TextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitText(s)
	}
}

func (p *sdpParser) Text() (localctx ITextContext) {
	localctx = NewTextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, sdpParserRULE_text)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(921)
		p.Byte_string()
	}

	return localctx
}

// IByte_stringContext is an interface to support dynamic dispatch.
type IByte_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsByte_stringContext differentiates from other interfaces.
	IsByte_stringContext()
}

type Byte_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyByte_stringContext() *Byte_stringContext {
	var p = new(Byte_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_byte_string
	return p
}

func (*Byte_stringContext) IsByte_stringContext() {}

func NewByte_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Byte_stringContext {
	var p = new(Byte_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_byte_string

	return p
}

func (s *Byte_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Byte_stringContext) AllU_0001() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0001)
}

func (s *Byte_stringContext) U_0001(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0001, i)
}

func (s *Byte_stringContext) AllU_0002() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0002)
}

func (s *Byte_stringContext) U_0002(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0002, i)
}

func (s *Byte_stringContext) AllU_0003() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0003)
}

func (s *Byte_stringContext) U_0003(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0003, i)
}

func (s *Byte_stringContext) AllU_0004() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0004)
}

func (s *Byte_stringContext) U_0004(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0004, i)
}

func (s *Byte_stringContext) AllU_0005() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0005)
}

func (s *Byte_stringContext) U_0005(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0005, i)
}

func (s *Byte_stringContext) AllU_0006() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0006)
}

func (s *Byte_stringContext) U_0006(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0006, i)
}

func (s *Byte_stringContext) AllU_0007() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0007)
}

func (s *Byte_stringContext) U_0007(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0007, i)
}

func (s *Byte_stringContext) AllU_0008() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0008)
}

func (s *Byte_stringContext) U_0008(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0008, i)
}

func (s *Byte_stringContext) AllTAB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserTAB)
}

func (s *Byte_stringContext) TAB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserTAB, i)
}

func (s *Byte_stringContext) AllU_000B() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_000B)
}

func (s *Byte_stringContext) U_000B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_000B, i)
}

func (s *Byte_stringContext) AllU_000C() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_000C)
}

func (s *Byte_stringContext) U_000C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_000C, i)
}

func (s *Byte_stringContext) AllU_000E() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_000E)
}

func (s *Byte_stringContext) U_000E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_000E, i)
}

func (s *Byte_stringContext) AllU_000F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_000F)
}

func (s *Byte_stringContext) U_000F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_000F, i)
}

func (s *Byte_stringContext) AllU_0010() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0010)
}

func (s *Byte_stringContext) U_0010(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0010, i)
}

func (s *Byte_stringContext) AllU_0011() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0011)
}

func (s *Byte_stringContext) U_0011(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0011, i)
}

func (s *Byte_stringContext) AllU_0012() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0012)
}

func (s *Byte_stringContext) U_0012(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0012, i)
}

func (s *Byte_stringContext) AllU_0013() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0013)
}

func (s *Byte_stringContext) U_0013(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0013, i)
}

func (s *Byte_stringContext) AllU_0014() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0014)
}

func (s *Byte_stringContext) U_0014(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0014, i)
}

func (s *Byte_stringContext) AllU_0015() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0015)
}

func (s *Byte_stringContext) U_0015(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0015, i)
}

func (s *Byte_stringContext) AllU_0016() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0016)
}

func (s *Byte_stringContext) U_0016(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0016, i)
}

func (s *Byte_stringContext) AllU_0017() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0017)
}

func (s *Byte_stringContext) U_0017(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0017, i)
}

func (s *Byte_stringContext) AllU_0018() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0018)
}

func (s *Byte_stringContext) U_0018(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0018, i)
}

func (s *Byte_stringContext) AllU_0019() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0019)
}

func (s *Byte_stringContext) U_0019(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0019, i)
}

func (s *Byte_stringContext) AllU_001A() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_001A)
}

func (s *Byte_stringContext) U_001A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_001A, i)
}

func (s *Byte_stringContext) AllU_001B() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_001B)
}

func (s *Byte_stringContext) U_001B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_001B, i)
}

func (s *Byte_stringContext) AllU_001C() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_001C)
}

func (s *Byte_stringContext) U_001C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_001C, i)
}

func (s *Byte_stringContext) AllU_001D() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_001D)
}

func (s *Byte_stringContext) U_001D(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_001D, i)
}

func (s *Byte_stringContext) AllU_001E() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_001E)
}

func (s *Byte_stringContext) U_001E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_001E, i)
}

func (s *Byte_stringContext) AllU_001F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_001F)
}

func (s *Byte_stringContext) U_001F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_001F, i)
}

func (s *Byte_stringContext) AllSPACE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSPACE)
}

func (s *Byte_stringContext) SPACE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSPACE, i)
}

func (s *Byte_stringContext) AllEXCLAMATION() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEXCLAMATION)
}

func (s *Byte_stringContext) EXCLAMATION(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, i)
}

func (s *Byte_stringContext) AllQUOTE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserQUOTE)
}

func (s *Byte_stringContext) QUOTE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, i)
}

func (s *Byte_stringContext) AllHASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserHASH)
}

func (s *Byte_stringContext) HASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, i)
}

func (s *Byte_stringContext) AllDOLLAR() []antlr.TerminalNode {
	return s.GetTokens(sdpParserDOLLAR)
}

func (s *Byte_stringContext) DOLLAR(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, i)
}

func (s *Byte_stringContext) AllPERCENT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERCENT)
}

func (s *Byte_stringContext) PERCENT(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, i)
}

func (s *Byte_stringContext) AllAMPERSAND() []antlr.TerminalNode {
	return s.GetTokens(sdpParserAMPERSAND)
}

func (s *Byte_stringContext) AMPERSAND(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, i)
}

func (s *Byte_stringContext) AllAPOSTROPHE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserAPOSTROPHE)
}

func (s *Byte_stringContext) APOSTROPHE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, i)
}

func (s *Byte_stringContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(sdpParserLEFT_PAREN)
}

func (s *Byte_stringContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, i)
}

func (s *Byte_stringContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(sdpParserRIGHT_PAREN)
}

func (s *Byte_stringContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, i)
}

func (s *Byte_stringContext) AllASTERISK() []antlr.TerminalNode {
	return s.GetTokens(sdpParserASTERISK)
}

func (s *Byte_stringContext) ASTERISK(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, i)
}

func (s *Byte_stringContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPLUS)
}

func (s *Byte_stringContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, i)
}

func (s *Byte_stringContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Byte_stringContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Byte_stringContext) AllDASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserDASH)
}

func (s *Byte_stringContext) DASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, i)
}

func (s *Byte_stringContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Byte_stringContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Byte_stringContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Byte_stringContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Byte_stringContext) AllZERO() []antlr.TerminalNode {
	return s.GetTokens(sdpParserZERO)
}

func (s *Byte_stringContext) ZERO(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, i)
}

func (s *Byte_stringContext) AllONE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserONE)
}

func (s *Byte_stringContext) ONE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserONE, i)
}

func (s *Byte_stringContext) AllTWO() []antlr.TerminalNode {
	return s.GetTokens(sdpParserTWO)
}

func (s *Byte_stringContext) TWO(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, i)
}

func (s *Byte_stringContext) AllTHREE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserTHREE)
}

func (s *Byte_stringContext) THREE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, i)
}

func (s *Byte_stringContext) AllFOUR() []antlr.TerminalNode {
	return s.GetTokens(sdpParserFOUR)
}

func (s *Byte_stringContext) FOUR(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, i)
}

func (s *Byte_stringContext) AllFIVE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserFIVE)
}

func (s *Byte_stringContext) FIVE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, i)
}

func (s *Byte_stringContext) AllSIX() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSIX)
}

func (s *Byte_stringContext) SIX(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, i)
}

func (s *Byte_stringContext) AllSEVEN() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSEVEN)
}

func (s *Byte_stringContext) SEVEN(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, i)
}

func (s *Byte_stringContext) AllEIGHT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEIGHT)
}

func (s *Byte_stringContext) EIGHT(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, i)
}

func (s *Byte_stringContext) AllNINE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserNINE)
}

func (s *Byte_stringContext) NINE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, i)
}

func (s *Byte_stringContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOLON)
}

func (s *Byte_stringContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, i)
}

func (s *Byte_stringContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSEMICOLON)
}

func (s *Byte_stringContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, i)
}

func (s *Byte_stringContext) AllLESS_THAN() []antlr.TerminalNode {
	return s.GetTokens(sdpParserLESS_THAN)
}

func (s *Byte_stringContext) LESS_THAN(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, i)
}

func (s *Byte_stringContext) AllEQUALS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserEQUALS)
}

func (s *Byte_stringContext) EQUALS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, i)
}

func (s *Byte_stringContext) AllGREATER_THAN() []antlr.TerminalNode {
	return s.GetTokens(sdpParserGREATER_THAN)
}

func (s *Byte_stringContext) GREATER_THAN(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, i)
}

func (s *Byte_stringContext) AllQUESTION() []antlr.TerminalNode {
	return s.GetTokens(sdpParserQUESTION)
}

func (s *Byte_stringContext) QUESTION(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, i)
}

func (s *Byte_stringContext) AllAT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserAT)
}

func (s *Byte_stringContext) AT(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserAT, i)
}

func (s *Byte_stringContext) AllCAP_A() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_A)
}

func (s *Byte_stringContext) CAP_A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, i)
}

func (s *Byte_stringContext) AllCAP_B() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_B)
}

func (s *Byte_stringContext) CAP_B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, i)
}

func (s *Byte_stringContext) AllCAP_C() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_C)
}

func (s *Byte_stringContext) CAP_C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, i)
}

func (s *Byte_stringContext) AllCAP_D() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_D)
}

func (s *Byte_stringContext) CAP_D(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, i)
}

func (s *Byte_stringContext) AllCAP_E() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_E)
}

func (s *Byte_stringContext) CAP_E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, i)
}

func (s *Byte_stringContext) AllCAP_F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_F)
}

func (s *Byte_stringContext) CAP_F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, i)
}

func (s *Byte_stringContext) AllCAP_G() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_G)
}

func (s *Byte_stringContext) CAP_G(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, i)
}

func (s *Byte_stringContext) AllCAP_H() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_H)
}

func (s *Byte_stringContext) CAP_H(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, i)
}

func (s *Byte_stringContext) AllCAP_I() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_I)
}

func (s *Byte_stringContext) CAP_I(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, i)
}

func (s *Byte_stringContext) AllCAP_J() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_J)
}

func (s *Byte_stringContext) CAP_J(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, i)
}

func (s *Byte_stringContext) AllCAP_K() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_K)
}

func (s *Byte_stringContext) CAP_K(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, i)
}

func (s *Byte_stringContext) AllCAP_L() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_L)
}

func (s *Byte_stringContext) CAP_L(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, i)
}

func (s *Byte_stringContext) AllCAP_M() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_M)
}

func (s *Byte_stringContext) CAP_M(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, i)
}

func (s *Byte_stringContext) AllCAP_N() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_N)
}

func (s *Byte_stringContext) CAP_N(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, i)
}

func (s *Byte_stringContext) AllCAP_O() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_O)
}

func (s *Byte_stringContext) CAP_O(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, i)
}

func (s *Byte_stringContext) AllCAP_P() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_P)
}

func (s *Byte_stringContext) CAP_P(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, i)
}

func (s *Byte_stringContext) AllCAP_Q() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_Q)
}

func (s *Byte_stringContext) CAP_Q(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, i)
}

func (s *Byte_stringContext) AllCAP_R() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_R)
}

func (s *Byte_stringContext) CAP_R(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, i)
}

func (s *Byte_stringContext) AllCAP_S() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_S)
}

func (s *Byte_stringContext) CAP_S(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, i)
}

func (s *Byte_stringContext) AllCAP_T() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_T)
}

func (s *Byte_stringContext) CAP_T(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, i)
}

func (s *Byte_stringContext) AllCAP_U() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_U)
}

func (s *Byte_stringContext) CAP_U(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, i)
}

func (s *Byte_stringContext) AllCAP_V() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_V)
}

func (s *Byte_stringContext) CAP_V(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, i)
}

func (s *Byte_stringContext) AllCAP_W() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_W)
}

func (s *Byte_stringContext) CAP_W(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, i)
}

func (s *Byte_stringContext) AllCAP_X() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_X)
}

func (s *Byte_stringContext) CAP_X(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, i)
}

func (s *Byte_stringContext) AllCAP_Y() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_Y)
}

func (s *Byte_stringContext) CAP_Y(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, i)
}

func (s *Byte_stringContext) AllCAP_Z() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCAP_Z)
}

func (s *Byte_stringContext) CAP_Z(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, i)
}

func (s *Byte_stringContext) AllLEFT_BRACE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserLEFT_BRACE)
}

func (s *Byte_stringContext) LEFT_BRACE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, i)
}

func (s *Byte_stringContext) AllBACKSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserBACKSLASH)
}

func (s *Byte_stringContext) BACKSLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, i)
}

func (s *Byte_stringContext) AllRIGHT_BRACE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserRIGHT_BRACE)
}

func (s *Byte_stringContext) RIGHT_BRACE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, i)
}

func (s *Byte_stringContext) AllCARAT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCARAT)
}

func (s *Byte_stringContext) CARAT(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, i)
}

func (s *Byte_stringContext) AllUNDERSCORE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserUNDERSCORE)
}

func (s *Byte_stringContext) UNDERSCORE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, i)
}

func (s *Byte_stringContext) AllACCENT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserACCENT)
}

func (s *Byte_stringContext) ACCENT(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, i)
}

func (s *Byte_stringContext) AllA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserA)
}

func (s *Byte_stringContext) A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserA, i)
}

func (s *Byte_stringContext) AllB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserB)
}

func (s *Byte_stringContext) B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserB, i)
}

func (s *Byte_stringContext) AllC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserC)
}

func (s *Byte_stringContext) C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserC, i)
}

func (s *Byte_stringContext) AllD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserD)
}

func (s *Byte_stringContext) D(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserD, i)
}

func (s *Byte_stringContext) AllE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserE)
}

func (s *Byte_stringContext) E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserE, i)
}

func (s *Byte_stringContext) AllF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserF)
}

func (s *Byte_stringContext) F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserF, i)
}

func (s *Byte_stringContext) AllG() []antlr.TerminalNode {
	return s.GetTokens(sdpParserG)
}

func (s *Byte_stringContext) G(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserG, i)
}

func (s *Byte_stringContext) AllH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserH)
}

func (s *Byte_stringContext) H(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserH, i)
}

func (s *Byte_stringContext) AllI() []antlr.TerminalNode {
	return s.GetTokens(sdpParserI)
}

func (s *Byte_stringContext) I(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserI, i)
}

func (s *Byte_stringContext) AllJ() []antlr.TerminalNode {
	return s.GetTokens(sdpParserJ)
}

func (s *Byte_stringContext) J(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserJ, i)
}

func (s *Byte_stringContext) AllK() []antlr.TerminalNode {
	return s.GetTokens(sdpParserK)
}

func (s *Byte_stringContext) K(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserK, i)
}

func (s *Byte_stringContext) AllL() []antlr.TerminalNode {
	return s.GetTokens(sdpParserL)
}

func (s *Byte_stringContext) L(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserL, i)
}

func (s *Byte_stringContext) AllM() []antlr.TerminalNode {
	return s.GetTokens(sdpParserM)
}

func (s *Byte_stringContext) M(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserM, i)
}

func (s *Byte_stringContext) AllN() []antlr.TerminalNode {
	return s.GetTokens(sdpParserN)
}

func (s *Byte_stringContext) N(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserN, i)
}

func (s *Byte_stringContext) AllO() []antlr.TerminalNode {
	return s.GetTokens(sdpParserO)
}

func (s *Byte_stringContext) O(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserO, i)
}

func (s *Byte_stringContext) AllP() []antlr.TerminalNode {
	return s.GetTokens(sdpParserP)
}

func (s *Byte_stringContext) P(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserP, i)
}

func (s *Byte_stringContext) AllQ() []antlr.TerminalNode {
	return s.GetTokens(sdpParserQ)
}

func (s *Byte_stringContext) Q(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserQ, i)
}

func (s *Byte_stringContext) AllR() []antlr.TerminalNode {
	return s.GetTokens(sdpParserR)
}

func (s *Byte_stringContext) R(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserR, i)
}

func (s *Byte_stringContext) AllS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserS)
}

func (s *Byte_stringContext) S(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserS, i)
}

func (s *Byte_stringContext) AllT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserT)
}

func (s *Byte_stringContext) T(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserT, i)
}

func (s *Byte_stringContext) AllU() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU)
}

func (s *Byte_stringContext) U(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU, i)
}

func (s *Byte_stringContext) AllV() []antlr.TerminalNode {
	return s.GetTokens(sdpParserV)
}

func (s *Byte_stringContext) V(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserV, i)
}

func (s *Byte_stringContext) AllW() []antlr.TerminalNode {
	return s.GetTokens(sdpParserW)
}

func (s *Byte_stringContext) W(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserW, i)
}

func (s *Byte_stringContext) AllX() []antlr.TerminalNode {
	return s.GetTokens(sdpParserX)
}

func (s *Byte_stringContext) X(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserX, i)
}

func (s *Byte_stringContext) AllY() []antlr.TerminalNode {
	return s.GetTokens(sdpParserY)
}

func (s *Byte_stringContext) Y(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserY, i)
}

func (s *Byte_stringContext) AllZ() []antlr.TerminalNode {
	return s.GetTokens(sdpParserZ)
}

func (s *Byte_stringContext) Z(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserZ, i)
}

func (s *Byte_stringContext) AllLEFT_CURLY_BRACE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserLEFT_CURLY_BRACE)
}

func (s *Byte_stringContext) LEFT_CURLY_BRACE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, i)
}

func (s *Byte_stringContext) AllPIPE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPIPE)
}

func (s *Byte_stringContext) PIPE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, i)
}

func (s *Byte_stringContext) AllRIGHT_CURLY_BRACE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserRIGHT_CURLY_BRACE)
}

func (s *Byte_stringContext) RIGHT_CURLY_BRACE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, i)
}

func (s *Byte_stringContext) AllTILDE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserTILDE)
}

func (s *Byte_stringContext) TILDE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, i)
}

func (s *Byte_stringContext) AllU_007F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_007F)
}

func (s *Byte_stringContext) U_007F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_007F, i)
}

func (s *Byte_stringContext) AllU_0080() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0080)
}

func (s *Byte_stringContext) U_0080(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0080, i)
}

func (s *Byte_stringContext) AllU_0081() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0081)
}

func (s *Byte_stringContext) U_0081(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0081, i)
}

func (s *Byte_stringContext) AllU_0082() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0082)
}

func (s *Byte_stringContext) U_0082(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0082, i)
}

func (s *Byte_stringContext) AllU_0083() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0083)
}

func (s *Byte_stringContext) U_0083(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0083, i)
}

func (s *Byte_stringContext) AllU_0084() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0084)
}

func (s *Byte_stringContext) U_0084(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0084, i)
}

func (s *Byte_stringContext) AllU_0085() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0085)
}

func (s *Byte_stringContext) U_0085(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0085, i)
}

func (s *Byte_stringContext) AllU_0086() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0086)
}

func (s *Byte_stringContext) U_0086(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0086, i)
}

func (s *Byte_stringContext) AllU_0087() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0087)
}

func (s *Byte_stringContext) U_0087(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0087, i)
}

func (s *Byte_stringContext) AllU_0088() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0088)
}

func (s *Byte_stringContext) U_0088(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0088, i)
}

func (s *Byte_stringContext) AllU_0089() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0089)
}

func (s *Byte_stringContext) U_0089(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0089, i)
}

func (s *Byte_stringContext) AllU_008A() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008A)
}

func (s *Byte_stringContext) U_008A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008A, i)
}

func (s *Byte_stringContext) AllU_008B() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008B)
}

func (s *Byte_stringContext) U_008B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008B, i)
}

func (s *Byte_stringContext) AllU_008C() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008C)
}

func (s *Byte_stringContext) U_008C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008C, i)
}

func (s *Byte_stringContext) AllU_008D() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008D)
}

func (s *Byte_stringContext) U_008D(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008D, i)
}

func (s *Byte_stringContext) AllU_008E() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008E)
}

func (s *Byte_stringContext) U_008E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008E, i)
}

func (s *Byte_stringContext) AllU_008F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008F)
}

func (s *Byte_stringContext) U_008F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008F, i)
}

func (s *Byte_stringContext) AllU_0090() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0090)
}

func (s *Byte_stringContext) U_0090(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0090, i)
}

func (s *Byte_stringContext) AllU_0091() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0091)
}

func (s *Byte_stringContext) U_0091(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0091, i)
}

func (s *Byte_stringContext) AllU_0092() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0092)
}

func (s *Byte_stringContext) U_0092(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0092, i)
}

func (s *Byte_stringContext) AllU_0093() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0093)
}

func (s *Byte_stringContext) U_0093(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0093, i)
}

func (s *Byte_stringContext) AllU_0094() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0094)
}

func (s *Byte_stringContext) U_0094(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0094, i)
}

func (s *Byte_stringContext) AllU_0095() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0095)
}

func (s *Byte_stringContext) U_0095(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0095, i)
}

func (s *Byte_stringContext) AllU_0096() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0096)
}

func (s *Byte_stringContext) U_0096(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0096, i)
}

func (s *Byte_stringContext) AllU_0097() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0097)
}

func (s *Byte_stringContext) U_0097(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0097, i)
}

func (s *Byte_stringContext) AllU_0098() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0098)
}

func (s *Byte_stringContext) U_0098(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0098, i)
}

func (s *Byte_stringContext) AllU_0099() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0099)
}

func (s *Byte_stringContext) U_0099(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0099, i)
}

func (s *Byte_stringContext) AllU_009A() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009A)
}

func (s *Byte_stringContext) U_009A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009A, i)
}

func (s *Byte_stringContext) AllU_009B() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009B)
}

func (s *Byte_stringContext) U_009B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009B, i)
}

func (s *Byte_stringContext) AllU_009C() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009C)
}

func (s *Byte_stringContext) U_009C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009C, i)
}

func (s *Byte_stringContext) AllU_009D() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009D)
}

func (s *Byte_stringContext) U_009D(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009D, i)
}

func (s *Byte_stringContext) AllU_009E() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009E)
}

func (s *Byte_stringContext) U_009E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009E, i)
}

func (s *Byte_stringContext) AllU_009F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009F)
}

func (s *Byte_stringContext) U_009F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009F, i)
}

func (s *Byte_stringContext) AllU_00A0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A0)
}

func (s *Byte_stringContext) U_00A0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A0, i)
}

func (s *Byte_stringContext) AllU_00A1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A1)
}

func (s *Byte_stringContext) U_00A1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A1, i)
}

func (s *Byte_stringContext) AllU_00A2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A2)
}

func (s *Byte_stringContext) U_00A2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A2, i)
}

func (s *Byte_stringContext) AllU_00A3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A3)
}

func (s *Byte_stringContext) U_00A3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A3, i)
}

func (s *Byte_stringContext) AllU_00A4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A4)
}

func (s *Byte_stringContext) U_00A4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A4, i)
}

func (s *Byte_stringContext) AllU_00A5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A5)
}

func (s *Byte_stringContext) U_00A5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A5, i)
}

func (s *Byte_stringContext) AllU_00A6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A6)
}

func (s *Byte_stringContext) U_00A6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A6, i)
}

func (s *Byte_stringContext) AllU_00A7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A7)
}

func (s *Byte_stringContext) U_00A7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A7, i)
}

func (s *Byte_stringContext) AllU_00A8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A8)
}

func (s *Byte_stringContext) U_00A8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A8, i)
}

func (s *Byte_stringContext) AllU_00A9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A9)
}

func (s *Byte_stringContext) U_00A9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A9, i)
}

func (s *Byte_stringContext) AllU_00AA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AA)
}

func (s *Byte_stringContext) U_00AA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AA, i)
}

func (s *Byte_stringContext) AllU_00AB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AB)
}

func (s *Byte_stringContext) U_00AB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AB, i)
}

func (s *Byte_stringContext) AllU_00AC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AC)
}

func (s *Byte_stringContext) U_00AC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AC, i)
}

func (s *Byte_stringContext) AllU_00AD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AD)
}

func (s *Byte_stringContext) U_00AD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AD, i)
}

func (s *Byte_stringContext) AllU_00AE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AE)
}

func (s *Byte_stringContext) U_00AE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AE, i)
}

func (s *Byte_stringContext) AllU_00AF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AF)
}

func (s *Byte_stringContext) U_00AF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AF, i)
}

func (s *Byte_stringContext) AllU_00B0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B0)
}

func (s *Byte_stringContext) U_00B0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B0, i)
}

func (s *Byte_stringContext) AllU_00B1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B1)
}

func (s *Byte_stringContext) U_00B1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B1, i)
}

func (s *Byte_stringContext) AllU_00B2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B2)
}

func (s *Byte_stringContext) U_00B2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B2, i)
}

func (s *Byte_stringContext) AllU_00B3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B3)
}

func (s *Byte_stringContext) U_00B3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B3, i)
}

func (s *Byte_stringContext) AllU_00B4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B4)
}

func (s *Byte_stringContext) U_00B4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B4, i)
}

func (s *Byte_stringContext) AllU_00B5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B5)
}

func (s *Byte_stringContext) U_00B5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B5, i)
}

func (s *Byte_stringContext) AllU_00B6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B6)
}

func (s *Byte_stringContext) U_00B6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B6, i)
}

func (s *Byte_stringContext) AllU_00B7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B7)
}

func (s *Byte_stringContext) U_00B7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B7, i)
}

func (s *Byte_stringContext) AllU_00B8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B8)
}

func (s *Byte_stringContext) U_00B8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B8, i)
}

func (s *Byte_stringContext) AllU_00B9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B9)
}

func (s *Byte_stringContext) U_00B9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B9, i)
}

func (s *Byte_stringContext) AllU_00BA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BA)
}

func (s *Byte_stringContext) U_00BA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BA, i)
}

func (s *Byte_stringContext) AllU_00BB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BB)
}

func (s *Byte_stringContext) U_00BB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BB, i)
}

func (s *Byte_stringContext) AllU_00BC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BC)
}

func (s *Byte_stringContext) U_00BC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BC, i)
}

func (s *Byte_stringContext) AllU_00BD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BD)
}

func (s *Byte_stringContext) U_00BD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BD, i)
}

func (s *Byte_stringContext) AllU_00BE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BE)
}

func (s *Byte_stringContext) U_00BE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BE, i)
}

func (s *Byte_stringContext) AllU_00BF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BF)
}

func (s *Byte_stringContext) U_00BF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BF, i)
}

func (s *Byte_stringContext) AllU_00C0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C0)
}

func (s *Byte_stringContext) U_00C0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C0, i)
}

func (s *Byte_stringContext) AllU_00C1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C1)
}

func (s *Byte_stringContext) U_00C1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C1, i)
}

func (s *Byte_stringContext) AllU_00C2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C2)
}

func (s *Byte_stringContext) U_00C2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C2, i)
}

func (s *Byte_stringContext) AllU_00C3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C3)
}

func (s *Byte_stringContext) U_00C3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C3, i)
}

func (s *Byte_stringContext) AllU_00C4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C4)
}

func (s *Byte_stringContext) U_00C4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C4, i)
}

func (s *Byte_stringContext) AllU_00C5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C5)
}

func (s *Byte_stringContext) U_00C5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C5, i)
}

func (s *Byte_stringContext) AllU_00C6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C6)
}

func (s *Byte_stringContext) U_00C6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C6, i)
}

func (s *Byte_stringContext) AllU_00C7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C7)
}

func (s *Byte_stringContext) U_00C7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C7, i)
}

func (s *Byte_stringContext) AllU_00C8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C8)
}

func (s *Byte_stringContext) U_00C8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C8, i)
}

func (s *Byte_stringContext) AllU_00C9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C9)
}

func (s *Byte_stringContext) U_00C9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C9, i)
}

func (s *Byte_stringContext) AllU_00CA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CA)
}

func (s *Byte_stringContext) U_00CA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CA, i)
}

func (s *Byte_stringContext) AllU_00CB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CB)
}

func (s *Byte_stringContext) U_00CB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CB, i)
}

func (s *Byte_stringContext) AllU_00CC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CC)
}

func (s *Byte_stringContext) U_00CC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CC, i)
}

func (s *Byte_stringContext) AllU_00CD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CD)
}

func (s *Byte_stringContext) U_00CD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CD, i)
}

func (s *Byte_stringContext) AllU_00CE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CE)
}

func (s *Byte_stringContext) U_00CE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CE, i)
}

func (s *Byte_stringContext) AllU_00CF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CF)
}

func (s *Byte_stringContext) U_00CF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CF, i)
}

func (s *Byte_stringContext) AllU_00D0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D0)
}

func (s *Byte_stringContext) U_00D0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D0, i)
}

func (s *Byte_stringContext) AllU_00D1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D1)
}

func (s *Byte_stringContext) U_00D1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D1, i)
}

func (s *Byte_stringContext) AllU_00D2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D2)
}

func (s *Byte_stringContext) U_00D2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D2, i)
}

func (s *Byte_stringContext) AllU_00D3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D3)
}

func (s *Byte_stringContext) U_00D3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D3, i)
}

func (s *Byte_stringContext) AllU_00D4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D4)
}

func (s *Byte_stringContext) U_00D4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D4, i)
}

func (s *Byte_stringContext) AllU_00D5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D5)
}

func (s *Byte_stringContext) U_00D5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D5, i)
}

func (s *Byte_stringContext) AllU_00D6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D6)
}

func (s *Byte_stringContext) U_00D6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D6, i)
}

func (s *Byte_stringContext) AllU_00D7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D7)
}

func (s *Byte_stringContext) U_00D7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D7, i)
}

func (s *Byte_stringContext) AllU_00D8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D8)
}

func (s *Byte_stringContext) U_00D8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D8, i)
}

func (s *Byte_stringContext) AllU_00D9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D9)
}

func (s *Byte_stringContext) U_00D9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D9, i)
}

func (s *Byte_stringContext) AllU_00DA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DA)
}

func (s *Byte_stringContext) U_00DA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DA, i)
}

func (s *Byte_stringContext) AllU_00DB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DB)
}

func (s *Byte_stringContext) U_00DB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DB, i)
}

func (s *Byte_stringContext) AllU_00DC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DC)
}

func (s *Byte_stringContext) U_00DC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DC, i)
}

func (s *Byte_stringContext) AllU_00DD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DD)
}

func (s *Byte_stringContext) U_00DD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DD, i)
}

func (s *Byte_stringContext) AllU_00DE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DE)
}

func (s *Byte_stringContext) U_00DE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DE, i)
}

func (s *Byte_stringContext) AllU_00DF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DF)
}

func (s *Byte_stringContext) U_00DF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DF, i)
}

func (s *Byte_stringContext) AllU_00E0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E0)
}

func (s *Byte_stringContext) U_00E0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E0, i)
}

func (s *Byte_stringContext) AllU_00E1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E1)
}

func (s *Byte_stringContext) U_00E1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E1, i)
}

func (s *Byte_stringContext) AllU_00E2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E2)
}

func (s *Byte_stringContext) U_00E2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E2, i)
}

func (s *Byte_stringContext) AllU_00E3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E3)
}

func (s *Byte_stringContext) U_00E3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E3, i)
}

func (s *Byte_stringContext) AllU_00E4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E4)
}

func (s *Byte_stringContext) U_00E4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E4, i)
}

func (s *Byte_stringContext) AllU_00E5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E5)
}

func (s *Byte_stringContext) U_00E5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E5, i)
}

func (s *Byte_stringContext) AllU_00E6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E6)
}

func (s *Byte_stringContext) U_00E6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E6, i)
}

func (s *Byte_stringContext) AllU_00E7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E7)
}

func (s *Byte_stringContext) U_00E7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E7, i)
}

func (s *Byte_stringContext) AllU_00E8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E8)
}

func (s *Byte_stringContext) U_00E8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E8, i)
}

func (s *Byte_stringContext) AllU_00E9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E9)
}

func (s *Byte_stringContext) U_00E9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E9, i)
}

func (s *Byte_stringContext) AllU_00EA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EA)
}

func (s *Byte_stringContext) U_00EA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EA, i)
}

func (s *Byte_stringContext) AllU_00EB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EB)
}

func (s *Byte_stringContext) U_00EB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EB, i)
}

func (s *Byte_stringContext) AllU_00EC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EC)
}

func (s *Byte_stringContext) U_00EC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EC, i)
}

func (s *Byte_stringContext) AllU_00ED() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00ED)
}

func (s *Byte_stringContext) U_00ED(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00ED, i)
}

func (s *Byte_stringContext) AllU_00EE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EE)
}

func (s *Byte_stringContext) U_00EE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EE, i)
}

func (s *Byte_stringContext) AllU_00EF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EF)
}

func (s *Byte_stringContext) U_00EF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EF, i)
}

func (s *Byte_stringContext) AllU_00F0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F0)
}

func (s *Byte_stringContext) U_00F0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F0, i)
}

func (s *Byte_stringContext) AllU_00F1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F1)
}

func (s *Byte_stringContext) U_00F1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F1, i)
}

func (s *Byte_stringContext) AllU_00F2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F2)
}

func (s *Byte_stringContext) U_00F2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F2, i)
}

func (s *Byte_stringContext) AllU_00F3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F3)
}

func (s *Byte_stringContext) U_00F3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F3, i)
}

func (s *Byte_stringContext) AllU_00F4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F4)
}

func (s *Byte_stringContext) U_00F4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F4, i)
}

func (s *Byte_stringContext) AllU_00F5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F5)
}

func (s *Byte_stringContext) U_00F5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F5, i)
}

func (s *Byte_stringContext) AllU_00F6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F6)
}

func (s *Byte_stringContext) U_00F6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F6, i)
}

func (s *Byte_stringContext) AllU_00F7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F7)
}

func (s *Byte_stringContext) U_00F7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F7, i)
}

func (s *Byte_stringContext) AllU_00F8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F8)
}

func (s *Byte_stringContext) U_00F8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F8, i)
}

func (s *Byte_stringContext) AllU_00F9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F9)
}

func (s *Byte_stringContext) U_00F9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F9, i)
}

func (s *Byte_stringContext) AllU_00FA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FA)
}

func (s *Byte_stringContext) U_00FA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FA, i)
}

func (s *Byte_stringContext) AllU_00FB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FB)
}

func (s *Byte_stringContext) U_00FB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FB, i)
}

func (s *Byte_stringContext) AllU_00FC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FC)
}

func (s *Byte_stringContext) U_00FC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FC, i)
}

func (s *Byte_stringContext) AllU_00FD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FD)
}

func (s *Byte_stringContext) U_00FD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FD, i)
}

func (s *Byte_stringContext) AllU_00FE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FE)
}

func (s *Byte_stringContext) U_00FE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FE, i)
}

func (s *Byte_stringContext) AllU_00FF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FF)
}

func (s *Byte_stringContext) U_00FF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FF, i)
}

func (s *Byte_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Byte_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Byte_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterByte_string(s)
	}
}

func (s *Byte_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitByte_string(s)
	}
}

func (p *sdpParser) Byte_string() (localctx IByte_stringContext) {
	localctx = NewByte_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, sdpParserRULE_byte_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(926)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-1)&-(0x1f+1)) == 0 && ((1<<uint((_la-1)))&((1<<(sdpParserTAB-1))|(1<<(sdpParserSPACE-1))|(1<<(sdpParserEXCLAMATION-1))|(1<<(sdpParserQUOTE-1))|(1<<(sdpParserHASH-1))|(1<<(sdpParserDOLLAR-1))|(1<<(sdpParserPERCENT-1))|(1<<(sdpParserAMPERSAND-1))|(1<<(sdpParserAPOSTROPHE-1))|(1<<(sdpParserLEFT_PAREN-1))|(1<<(sdpParserRIGHT_PAREN-1))|(1<<(sdpParserASTERISK-1))|(1<<(sdpParserPLUS-1))|(1<<(sdpParserCOMMA-1))|(1<<(sdpParserDASH-1))|(1<<(sdpParserPERIOD-1))|(1<<(sdpParserSLASH-1))|(1<<(sdpParserZERO-1))|(1<<(sdpParserONE-1))|(1<<(sdpParserTWO-1))|(1<<(sdpParserTHREE-1))|(1<<(sdpParserFOUR-1))|(1<<(sdpParserFIVE-1))|(1<<(sdpParserSIX-1))|(1<<(sdpParserSEVEN-1))|(1<<(sdpParserEIGHT-1))|(1<<(sdpParserNINE-1))|(1<<(sdpParserCOLON-1))|(1<<(sdpParserSEMICOLON-1))|(1<<(sdpParserLESS_THAN-1)))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserGREATER_THAN-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33))|(1<<(sdpParserLEFT_BRACE-33))|(1<<(sdpParserBACKSLASH-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(sdpParserRIGHT_CURLY_BRACE-97))|(1<<(sdpParserTILDE-97))|(1<<(sdpParserU_0001-97))|(1<<(sdpParserU_0002-97))|(1<<(sdpParserU_0003-97))|(1<<(sdpParserU_0004-97))|(1<<(sdpParserU_0005-97))|(1<<(sdpParserU_0006-97))|(1<<(sdpParserU_0007-97))|(1<<(sdpParserU_0008-97))|(1<<(sdpParserU_000B-97))|(1<<(sdpParserU_000C-97))|(1<<(sdpParserU_000E-97))|(1<<(sdpParserU_000F-97))|(1<<(sdpParserU_0010-97))|(1<<(sdpParserU_0011-97))|(1<<(sdpParserU_0012-97))|(1<<(sdpParserU_0013-97))|(1<<(sdpParserU_0014-97))|(1<<(sdpParserU_0015-97))|(1<<(sdpParserU_0016-97))|(1<<(sdpParserU_0017-97))|(1<<(sdpParserU_0018-97))|(1<<(sdpParserU_0019-97))|(1<<(sdpParserU_001A-97))|(1<<(sdpParserU_001B-97))|(1<<(sdpParserU_001C-97))|(1<<(sdpParserU_001D-97))|(1<<(sdpParserU_001E-97))|(1<<(sdpParserU_001F-97))|(1<<(sdpParserU_007F-97)))) != 0) || (((_la-129)&-(0x1f+1)) == 0 && ((1<<uint((_la-129)))&((1<<(sdpParserU_0080-129))|(1<<(sdpParserU_0081-129))|(1<<(sdpParserU_0082-129))|(1<<(sdpParserU_0083-129))|(1<<(sdpParserU_0084-129))|(1<<(sdpParserU_0085-129))|(1<<(sdpParserU_0086-129))|(1<<(sdpParserU_0087-129))|(1<<(sdpParserU_0088-129))|(1<<(sdpParserU_0089-129))|(1<<(sdpParserU_008A-129))|(1<<(sdpParserU_008B-129))|(1<<(sdpParserU_008C-129))|(1<<(sdpParserU_008D-129))|(1<<(sdpParserU_008E-129))|(1<<(sdpParserU_008F-129))|(1<<(sdpParserU_0090-129))|(1<<(sdpParserU_0091-129))|(1<<(sdpParserU_0092-129))|(1<<(sdpParserU_0093-129))|(1<<(sdpParserU_0094-129))|(1<<(sdpParserU_0095-129))|(1<<(sdpParserU_0096-129))|(1<<(sdpParserU_0097-129))|(1<<(sdpParserU_0098-129))|(1<<(sdpParserU_0099-129))|(1<<(sdpParserU_009A-129))|(1<<(sdpParserU_009B-129))|(1<<(sdpParserU_009C-129))|(1<<(sdpParserU_009D-129))|(1<<(sdpParserU_009E-129))|(1<<(sdpParserU_009F-129)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(sdpParserU_00A0-161))|(1<<(sdpParserU_00A1-161))|(1<<(sdpParserU_00A2-161))|(1<<(sdpParserU_00A3-161))|(1<<(sdpParserU_00A4-161))|(1<<(sdpParserU_00A5-161))|(1<<(sdpParserU_00A6-161))|(1<<(sdpParserU_00A7-161))|(1<<(sdpParserU_00A8-161))|(1<<(sdpParserU_00A9-161))|(1<<(sdpParserU_00AA-161))|(1<<(sdpParserU_00AB-161))|(1<<(sdpParserU_00AC-161))|(1<<(sdpParserU_00AD-161))|(1<<(sdpParserU_00AE-161))|(1<<(sdpParserU_00AF-161))|(1<<(sdpParserU_00B0-161))|(1<<(sdpParserU_00B1-161))|(1<<(sdpParserU_00B2-161))|(1<<(sdpParserU_00B3-161))|(1<<(sdpParserU_00B4-161))|(1<<(sdpParserU_00B5-161))|(1<<(sdpParserU_00B6-161))|(1<<(sdpParserU_00B7-161))|(1<<(sdpParserU_00B8-161))|(1<<(sdpParserU_00B9-161))|(1<<(sdpParserU_00BA-161))|(1<<(sdpParserU_00BB-161))|(1<<(sdpParserU_00BC-161))|(1<<(sdpParserU_00BD-161))|(1<<(sdpParserU_00BE-161))|(1<<(sdpParserU_00BF-161)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(sdpParserU_00C0-193))|(1<<(sdpParserU_00C1-193))|(1<<(sdpParserU_00C2-193))|(1<<(sdpParserU_00C3-193))|(1<<(sdpParserU_00C4-193))|(1<<(sdpParserU_00C5-193))|(1<<(sdpParserU_00C6-193))|(1<<(sdpParserU_00C7-193))|(1<<(sdpParserU_00C8-193))|(1<<(sdpParserU_00C9-193))|(1<<(sdpParserU_00CA-193))|(1<<(sdpParserU_00CB-193))|(1<<(sdpParserU_00CC-193))|(1<<(sdpParserU_00CD-193))|(1<<(sdpParserU_00CE-193))|(1<<(sdpParserU_00CF-193))|(1<<(sdpParserU_00D0-193))|(1<<(sdpParserU_00D1-193))|(1<<(sdpParserU_00D2-193))|(1<<(sdpParserU_00D3-193))|(1<<(sdpParserU_00D4-193))|(1<<(sdpParserU_00D5-193))|(1<<(sdpParserU_00D6-193))|(1<<(sdpParserU_00D7-193))|(1<<(sdpParserU_00D8-193))|(1<<(sdpParserU_00D9-193))|(1<<(sdpParserU_00DA-193))|(1<<(sdpParserU_00DB-193))|(1<<(sdpParserU_00DC-193))|(1<<(sdpParserU_00DD-193))|(1<<(sdpParserU_00DE-193))|(1<<(sdpParserU_00DF-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(sdpParserU_00E0-225))|(1<<(sdpParserU_00E1-225))|(1<<(sdpParserU_00E2-225))|(1<<(sdpParserU_00E3-225))|(1<<(sdpParserU_00E4-225))|(1<<(sdpParserU_00E5-225))|(1<<(sdpParserU_00E6-225))|(1<<(sdpParserU_00E7-225))|(1<<(sdpParserU_00E8-225))|(1<<(sdpParserU_00E9-225))|(1<<(sdpParserU_00EA-225))|(1<<(sdpParserU_00EB-225))|(1<<(sdpParserU_00EC-225))|(1<<(sdpParserU_00ED-225))|(1<<(sdpParserU_00EE-225))|(1<<(sdpParserU_00EF-225))|(1<<(sdpParserU_00F0-225))|(1<<(sdpParserU_00F1-225))|(1<<(sdpParserU_00F2-225))|(1<<(sdpParserU_00F3-225))|(1<<(sdpParserU_00F4-225))|(1<<(sdpParserU_00F5-225))|(1<<(sdpParserU_00F6-225))|(1<<(sdpParserU_00F7-225))|(1<<(sdpParserU_00F8-225))|(1<<(sdpParserU_00F9-225))|(1<<(sdpParserU_00FA-225))|(1<<(sdpParserU_00FB-225))|(1<<(sdpParserU_00FC-225))|(1<<(sdpParserU_00FD-225))|(1<<(sdpParserU_00FE-225))|(1<<(sdpParserU_00FF-225)))) != 0) {
		p.SetState(926)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserTAB, sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008:
			{
				p.SetState(923)
				_la = p.GetTokenStream().LA(1)

				if !(_la == sdpParserTAB || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(sdpParserU_0001-100))|(1<<(sdpParserU_0002-100))|(1<<(sdpParserU_0003-100))|(1<<(sdpParserU_0004-100))|(1<<(sdpParserU_0005-100))|(1<<(sdpParserU_0006-100))|(1<<(sdpParserU_0007-100))|(1<<(sdpParserU_0008-100)))) != 0)) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		case sdpParserU_000B, sdpParserU_000C:
			{
				p.SetState(924)
				_la = p.GetTokenStream().LA(1)

				if !(_la == sdpParserU_000B || _la == sdpParserU_000C) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		case sdpParserSPACE, sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE, sdpParserBACKSLASH, sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F, sdpParserU_0080, sdpParserU_0081, sdpParserU_0082, sdpParserU_0083, sdpParserU_0084, sdpParserU_0085, sdpParserU_0086, sdpParserU_0087, sdpParserU_0088, sdpParserU_0089, sdpParserU_008A, sdpParserU_008B, sdpParserU_008C, sdpParserU_008D, sdpParserU_008E, sdpParserU_008F, sdpParserU_0090, sdpParserU_0091, sdpParserU_0092, sdpParserU_0093, sdpParserU_0094, sdpParserU_0095, sdpParserU_0096, sdpParserU_0097, sdpParserU_0098, sdpParserU_0099, sdpParserU_009A, sdpParserU_009B, sdpParserU_009C, sdpParserU_009D, sdpParserU_009E, sdpParserU_009F, sdpParserU_00A0, sdpParserU_00A1, sdpParserU_00A2, sdpParserU_00A3, sdpParserU_00A4, sdpParserU_00A5, sdpParserU_00A6, sdpParserU_00A7, sdpParserU_00A8, sdpParserU_00A9, sdpParserU_00AA, sdpParserU_00AB, sdpParserU_00AC, sdpParserU_00AD, sdpParserU_00AE, sdpParserU_00AF, sdpParserU_00B0, sdpParserU_00B1, sdpParserU_00B2, sdpParserU_00B3, sdpParserU_00B4, sdpParserU_00B5, sdpParserU_00B6, sdpParserU_00B7, sdpParserU_00B8, sdpParserU_00B9, sdpParserU_00BA, sdpParserU_00BB, sdpParserU_00BC, sdpParserU_00BD, sdpParserU_00BE, sdpParserU_00BF, sdpParserU_00C0, sdpParserU_00C1, sdpParserU_00C2, sdpParserU_00C3, sdpParserU_00C4, sdpParserU_00C5, sdpParserU_00C6, sdpParserU_00C7, sdpParserU_00C8, sdpParserU_00C9, sdpParserU_00CA, sdpParserU_00CB, sdpParserU_00CC, sdpParserU_00CD, sdpParserU_00CE, sdpParserU_00CF, sdpParserU_00D0, sdpParserU_00D1, sdpParserU_00D2, sdpParserU_00D3, sdpParserU_00D4, sdpParserU_00D5, sdpParserU_00D6, sdpParserU_00D7, sdpParserU_00D8, sdpParserU_00D9, sdpParserU_00DA, sdpParserU_00DB, sdpParserU_00DC, sdpParserU_00DD, sdpParserU_00DE, sdpParserU_00DF, sdpParserU_00E0, sdpParserU_00E1, sdpParserU_00E2, sdpParserU_00E3, sdpParserU_00E4, sdpParserU_00E5, sdpParserU_00E6, sdpParserU_00E7, sdpParserU_00E8, sdpParserU_00E9, sdpParserU_00EA, sdpParserU_00EB, sdpParserU_00EC, sdpParserU_00ED, sdpParserU_00EE, sdpParserU_00EF, sdpParserU_00F0, sdpParserU_00F1, sdpParserU_00F2, sdpParserU_00F3, sdpParserU_00F4, sdpParserU_00F5, sdpParserU_00F6, sdpParserU_00F7, sdpParserU_00F8, sdpParserU_00F9, sdpParserU_00FA, sdpParserU_00FB, sdpParserU_00FC, sdpParserU_00FD, sdpParserU_00FE, sdpParserU_00FF:
			{
				p.SetState(925)
				_la = p.GetTokenStream().LA(1)

				if !((((_la-4)&-(0x1f+1)) == 0 && ((1<<uint((_la-4)))&((1<<(sdpParserSPACE-4))|(1<<(sdpParserEXCLAMATION-4))|(1<<(sdpParserQUOTE-4))|(1<<(sdpParserHASH-4))|(1<<(sdpParserDOLLAR-4))|(1<<(sdpParserPERCENT-4))|(1<<(sdpParserAMPERSAND-4))|(1<<(sdpParserAPOSTROPHE-4))|(1<<(sdpParserLEFT_PAREN-4))|(1<<(sdpParserRIGHT_PAREN-4))|(1<<(sdpParserASTERISK-4))|(1<<(sdpParserPLUS-4))|(1<<(sdpParserCOMMA-4))|(1<<(sdpParserDASH-4))|(1<<(sdpParserPERIOD-4))|(1<<(sdpParserSLASH-4))|(1<<(sdpParserZERO-4))|(1<<(sdpParserONE-4))|(1<<(sdpParserTWO-4))|(1<<(sdpParserTHREE-4))|(1<<(sdpParserFOUR-4))|(1<<(sdpParserFIVE-4))|(1<<(sdpParserSIX-4))|(1<<(sdpParserSEVEN-4))|(1<<(sdpParserEIGHT-4))|(1<<(sdpParserNINE-4))|(1<<(sdpParserCOLON-4))|(1<<(sdpParserSEMICOLON-4))|(1<<(sdpParserLESS_THAN-4))|(1<<(sdpParserEQUALS-4))|(1<<(sdpParserGREATER_THAN-4))|(1<<(sdpParserQUESTION-4)))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(sdpParserAT-36))|(1<<(sdpParserCAP_A-36))|(1<<(sdpParserCAP_B-36))|(1<<(sdpParserCAP_C-36))|(1<<(sdpParserCAP_D-36))|(1<<(sdpParserCAP_E-36))|(1<<(sdpParserCAP_F-36))|(1<<(sdpParserCAP_G-36))|(1<<(sdpParserCAP_H-36))|(1<<(sdpParserCAP_I-36))|(1<<(sdpParserCAP_J-36))|(1<<(sdpParserCAP_K-36))|(1<<(sdpParserCAP_L-36))|(1<<(sdpParserCAP_M-36))|(1<<(sdpParserCAP_N-36))|(1<<(sdpParserCAP_O-36))|(1<<(sdpParserCAP_P-36))|(1<<(sdpParserCAP_Q-36))|(1<<(sdpParserCAP_R-36))|(1<<(sdpParserCAP_S-36))|(1<<(sdpParserCAP_T-36))|(1<<(sdpParserCAP_U-36))|(1<<(sdpParserCAP_V-36))|(1<<(sdpParserCAP_W-36))|(1<<(sdpParserCAP_X-36))|(1<<(sdpParserCAP_Y-36))|(1<<(sdpParserCAP_Z-36))|(1<<(sdpParserLEFT_BRACE-36))|(1<<(sdpParserBACKSLASH-36))|(1<<(sdpParserRIGHT_BRACE-36))|(1<<(sdpParserCARAT-36))|(1<<(sdpParserUNDERSCORE-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(sdpParserACCENT-68))|(1<<(sdpParserA-68))|(1<<(sdpParserB-68))|(1<<(sdpParserC-68))|(1<<(sdpParserD-68))|(1<<(sdpParserE-68))|(1<<(sdpParserF-68))|(1<<(sdpParserG-68))|(1<<(sdpParserH-68))|(1<<(sdpParserI-68))|(1<<(sdpParserJ-68))|(1<<(sdpParserK-68))|(1<<(sdpParserL-68))|(1<<(sdpParserM-68))|(1<<(sdpParserN-68))|(1<<(sdpParserO-68))|(1<<(sdpParserP-68))|(1<<(sdpParserQ-68))|(1<<(sdpParserR-68))|(1<<(sdpParserS-68))|(1<<(sdpParserT-68))|(1<<(sdpParserU-68))|(1<<(sdpParserV-68))|(1<<(sdpParserW-68))|(1<<(sdpParserX-68))|(1<<(sdpParserY-68))|(1<<(sdpParserZ-68))|(1<<(sdpParserLEFT_CURLY_BRACE-68))|(1<<(sdpParserPIPE-68))|(1<<(sdpParserRIGHT_CURLY_BRACE-68))|(1<<(sdpParserTILDE-68)))) != 0) || (((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(sdpParserU_000E-110))|(1<<(sdpParserU_000F-110))|(1<<(sdpParserU_0010-110))|(1<<(sdpParserU_0011-110))|(1<<(sdpParserU_0012-110))|(1<<(sdpParserU_0013-110))|(1<<(sdpParserU_0014-110))|(1<<(sdpParserU_0015-110))|(1<<(sdpParserU_0016-110))|(1<<(sdpParserU_0017-110))|(1<<(sdpParserU_0018-110))|(1<<(sdpParserU_0019-110))|(1<<(sdpParserU_001A-110))|(1<<(sdpParserU_001B-110))|(1<<(sdpParserU_001C-110))|(1<<(sdpParserU_001D-110))|(1<<(sdpParserU_001E-110))|(1<<(sdpParserU_001F-110))|(1<<(sdpParserU_007F-110))|(1<<(sdpParserU_0080-110))|(1<<(sdpParserU_0081-110))|(1<<(sdpParserU_0082-110))|(1<<(sdpParserU_0083-110))|(1<<(sdpParserU_0084-110))|(1<<(sdpParserU_0085-110))|(1<<(sdpParserU_0086-110))|(1<<(sdpParserU_0087-110))|(1<<(sdpParserU_0088-110))|(1<<(sdpParserU_0089-110))|(1<<(sdpParserU_008A-110))|(1<<(sdpParserU_008B-110))|(1<<(sdpParserU_008C-110)))) != 0) || (((_la-142)&-(0x1f+1)) == 0 && ((1<<uint((_la-142)))&((1<<(sdpParserU_008D-142))|(1<<(sdpParserU_008E-142))|(1<<(sdpParserU_008F-142))|(1<<(sdpParserU_0090-142))|(1<<(sdpParserU_0091-142))|(1<<(sdpParserU_0092-142))|(1<<(sdpParserU_0093-142))|(1<<(sdpParserU_0094-142))|(1<<(sdpParserU_0095-142))|(1<<(sdpParserU_0096-142))|(1<<(sdpParserU_0097-142))|(1<<(sdpParserU_0098-142))|(1<<(sdpParserU_0099-142))|(1<<(sdpParserU_009A-142))|(1<<(sdpParserU_009B-142))|(1<<(sdpParserU_009C-142))|(1<<(sdpParserU_009D-142))|(1<<(sdpParserU_009E-142))|(1<<(sdpParserU_009F-142))|(1<<(sdpParserU_00A0-142))|(1<<(sdpParserU_00A1-142))|(1<<(sdpParserU_00A2-142))|(1<<(sdpParserU_00A3-142))|(1<<(sdpParserU_00A4-142))|(1<<(sdpParserU_00A5-142))|(1<<(sdpParserU_00A6-142))|(1<<(sdpParserU_00A7-142))|(1<<(sdpParserU_00A8-142))|(1<<(sdpParserU_00A9-142))|(1<<(sdpParserU_00AA-142))|(1<<(sdpParserU_00AB-142))|(1<<(sdpParserU_00AC-142)))) != 0) || (((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(sdpParserU_00AD-174))|(1<<(sdpParserU_00AE-174))|(1<<(sdpParserU_00AF-174))|(1<<(sdpParserU_00B0-174))|(1<<(sdpParserU_00B1-174))|(1<<(sdpParserU_00B2-174))|(1<<(sdpParserU_00B3-174))|(1<<(sdpParserU_00B4-174))|(1<<(sdpParserU_00B5-174))|(1<<(sdpParserU_00B6-174))|(1<<(sdpParserU_00B7-174))|(1<<(sdpParserU_00B8-174))|(1<<(sdpParserU_00B9-174))|(1<<(sdpParserU_00BA-174))|(1<<(sdpParserU_00BB-174))|(1<<(sdpParserU_00BC-174))|(1<<(sdpParserU_00BD-174))|(1<<(sdpParserU_00BE-174))|(1<<(sdpParserU_00BF-174))|(1<<(sdpParserU_00C0-174))|(1<<(sdpParserU_00C1-174))|(1<<(sdpParserU_00C2-174))|(1<<(sdpParserU_00C3-174))|(1<<(sdpParserU_00C4-174))|(1<<(sdpParserU_00C5-174))|(1<<(sdpParserU_00C6-174))|(1<<(sdpParserU_00C7-174))|(1<<(sdpParserU_00C8-174))|(1<<(sdpParserU_00C9-174))|(1<<(sdpParserU_00CA-174))|(1<<(sdpParserU_00CB-174))|(1<<(sdpParserU_00CC-174)))) != 0) || (((_la-206)&-(0x1f+1)) == 0 && ((1<<uint((_la-206)))&((1<<(sdpParserU_00CD-206))|(1<<(sdpParserU_00CE-206))|(1<<(sdpParserU_00CF-206))|(1<<(sdpParserU_00D0-206))|(1<<(sdpParserU_00D1-206))|(1<<(sdpParserU_00D2-206))|(1<<(sdpParserU_00D3-206))|(1<<(sdpParserU_00D4-206))|(1<<(sdpParserU_00D5-206))|(1<<(sdpParserU_00D6-206))|(1<<(sdpParserU_00D7-206))|(1<<(sdpParserU_00D8-206))|(1<<(sdpParserU_00D9-206))|(1<<(sdpParserU_00DA-206))|(1<<(sdpParserU_00DB-206))|(1<<(sdpParserU_00DC-206))|(1<<(sdpParserU_00DD-206))|(1<<(sdpParserU_00DE-206))|(1<<(sdpParserU_00DF-206))|(1<<(sdpParserU_00E0-206))|(1<<(sdpParserU_00E1-206))|(1<<(sdpParserU_00E2-206))|(1<<(sdpParserU_00E3-206))|(1<<(sdpParserU_00E4-206))|(1<<(sdpParserU_00E5-206))|(1<<(sdpParserU_00E6-206))|(1<<(sdpParserU_00E7-206))|(1<<(sdpParserU_00E8-206))|(1<<(sdpParserU_00E9-206))|(1<<(sdpParserU_00EA-206))|(1<<(sdpParserU_00EB-206))|(1<<(sdpParserU_00EC-206)))) != 0) || (((_la-238)&-(0x1f+1)) == 0 && ((1<<uint((_la-238)))&((1<<(sdpParserU_00ED-238))|(1<<(sdpParserU_00EE-238))|(1<<(sdpParserU_00EF-238))|(1<<(sdpParserU_00F0-238))|(1<<(sdpParserU_00F1-238))|(1<<(sdpParserU_00F2-238))|(1<<(sdpParserU_00F3-238))|(1<<(sdpParserU_00F4-238))|(1<<(sdpParserU_00F5-238))|(1<<(sdpParserU_00F6-238))|(1<<(sdpParserU_00F7-238))|(1<<(sdpParserU_00F8-238))|(1<<(sdpParserU_00F9-238))|(1<<(sdpParserU_00FA-238))|(1<<(sdpParserU_00FB-238))|(1<<(sdpParserU_00FC-238))|(1<<(sdpParserU_00FD-238))|(1<<(sdpParserU_00FE-238))|(1<<(sdpParserU_00FF-238)))) != 0)) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(928)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INon_ws_stringContext is an interface to support dynamic dispatch.
type INon_ws_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNon_ws_stringContext differentiates from other interfaces.
	IsNon_ws_stringContext()
}

type Non_ws_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNon_ws_stringContext() *Non_ws_stringContext {
	var p = new(Non_ws_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_non_ws_string
	return p
}

func (*Non_ws_stringContext) IsNon_ws_stringContext() {}

func NewNon_ws_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Non_ws_stringContext {
	var p = new(Non_ws_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_non_ws_string

	return p
}

func (s *Non_ws_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Non_ws_stringContext) AllVchar() []IVcharContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVcharContext)(nil)).Elem())
	var tst = make([]IVcharContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVcharContext)
		}
	}

	return tst
}

func (s *Non_ws_stringContext) Vchar(i int) IVcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVcharContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVcharContext)
}

func (s *Non_ws_stringContext) AllU_0080() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0080)
}

func (s *Non_ws_stringContext) U_0080(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0080, i)
}

func (s *Non_ws_stringContext) AllU_0081() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0081)
}

func (s *Non_ws_stringContext) U_0081(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0081, i)
}

func (s *Non_ws_stringContext) AllU_0082() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0082)
}

func (s *Non_ws_stringContext) U_0082(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0082, i)
}

func (s *Non_ws_stringContext) AllU_0083() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0083)
}

func (s *Non_ws_stringContext) U_0083(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0083, i)
}

func (s *Non_ws_stringContext) AllU_0084() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0084)
}

func (s *Non_ws_stringContext) U_0084(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0084, i)
}

func (s *Non_ws_stringContext) AllU_0085() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0085)
}

func (s *Non_ws_stringContext) U_0085(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0085, i)
}

func (s *Non_ws_stringContext) AllU_0086() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0086)
}

func (s *Non_ws_stringContext) U_0086(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0086, i)
}

func (s *Non_ws_stringContext) AllU_0087() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0087)
}

func (s *Non_ws_stringContext) U_0087(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0087, i)
}

func (s *Non_ws_stringContext) AllU_0088() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0088)
}

func (s *Non_ws_stringContext) U_0088(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0088, i)
}

func (s *Non_ws_stringContext) AllU_0089() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0089)
}

func (s *Non_ws_stringContext) U_0089(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0089, i)
}

func (s *Non_ws_stringContext) AllU_008A() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008A)
}

func (s *Non_ws_stringContext) U_008A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008A, i)
}

func (s *Non_ws_stringContext) AllU_008B() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008B)
}

func (s *Non_ws_stringContext) U_008B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008B, i)
}

func (s *Non_ws_stringContext) AllU_008C() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008C)
}

func (s *Non_ws_stringContext) U_008C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008C, i)
}

func (s *Non_ws_stringContext) AllU_008D() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008D)
}

func (s *Non_ws_stringContext) U_008D(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008D, i)
}

func (s *Non_ws_stringContext) AllU_008E() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008E)
}

func (s *Non_ws_stringContext) U_008E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008E, i)
}

func (s *Non_ws_stringContext) AllU_008F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_008F)
}

func (s *Non_ws_stringContext) U_008F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_008F, i)
}

func (s *Non_ws_stringContext) AllU_0090() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0090)
}

func (s *Non_ws_stringContext) U_0090(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0090, i)
}

func (s *Non_ws_stringContext) AllU_0091() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0091)
}

func (s *Non_ws_stringContext) U_0091(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0091, i)
}

func (s *Non_ws_stringContext) AllU_0092() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0092)
}

func (s *Non_ws_stringContext) U_0092(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0092, i)
}

func (s *Non_ws_stringContext) AllU_0093() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0093)
}

func (s *Non_ws_stringContext) U_0093(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0093, i)
}

func (s *Non_ws_stringContext) AllU_0094() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0094)
}

func (s *Non_ws_stringContext) U_0094(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0094, i)
}

func (s *Non_ws_stringContext) AllU_0095() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0095)
}

func (s *Non_ws_stringContext) U_0095(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0095, i)
}

func (s *Non_ws_stringContext) AllU_0096() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0096)
}

func (s *Non_ws_stringContext) U_0096(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0096, i)
}

func (s *Non_ws_stringContext) AllU_0097() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0097)
}

func (s *Non_ws_stringContext) U_0097(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0097, i)
}

func (s *Non_ws_stringContext) AllU_0098() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0098)
}

func (s *Non_ws_stringContext) U_0098(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0098, i)
}

func (s *Non_ws_stringContext) AllU_0099() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_0099)
}

func (s *Non_ws_stringContext) U_0099(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_0099, i)
}

func (s *Non_ws_stringContext) AllU_009A() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009A)
}

func (s *Non_ws_stringContext) U_009A(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009A, i)
}

func (s *Non_ws_stringContext) AllU_009B() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009B)
}

func (s *Non_ws_stringContext) U_009B(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009B, i)
}

func (s *Non_ws_stringContext) AllU_009C() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009C)
}

func (s *Non_ws_stringContext) U_009C(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009C, i)
}

func (s *Non_ws_stringContext) AllU_009D() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009D)
}

func (s *Non_ws_stringContext) U_009D(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009D, i)
}

func (s *Non_ws_stringContext) AllU_009E() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009E)
}

func (s *Non_ws_stringContext) U_009E(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009E, i)
}

func (s *Non_ws_stringContext) AllU_009F() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_009F)
}

func (s *Non_ws_stringContext) U_009F(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_009F, i)
}

func (s *Non_ws_stringContext) AllU_00A0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A0)
}

func (s *Non_ws_stringContext) U_00A0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A0, i)
}

func (s *Non_ws_stringContext) AllU_00A1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A1)
}

func (s *Non_ws_stringContext) U_00A1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A1, i)
}

func (s *Non_ws_stringContext) AllU_00A2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A2)
}

func (s *Non_ws_stringContext) U_00A2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A2, i)
}

func (s *Non_ws_stringContext) AllU_00A3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A3)
}

func (s *Non_ws_stringContext) U_00A3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A3, i)
}

func (s *Non_ws_stringContext) AllU_00A4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A4)
}

func (s *Non_ws_stringContext) U_00A4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A4, i)
}

func (s *Non_ws_stringContext) AllU_00A5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A5)
}

func (s *Non_ws_stringContext) U_00A5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A5, i)
}

func (s *Non_ws_stringContext) AllU_00A6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A6)
}

func (s *Non_ws_stringContext) U_00A6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A6, i)
}

func (s *Non_ws_stringContext) AllU_00A7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A7)
}

func (s *Non_ws_stringContext) U_00A7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A7, i)
}

func (s *Non_ws_stringContext) AllU_00A8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A8)
}

func (s *Non_ws_stringContext) U_00A8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A8, i)
}

func (s *Non_ws_stringContext) AllU_00A9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00A9)
}

func (s *Non_ws_stringContext) U_00A9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A9, i)
}

func (s *Non_ws_stringContext) AllU_00AA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AA)
}

func (s *Non_ws_stringContext) U_00AA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AA, i)
}

func (s *Non_ws_stringContext) AllU_00AB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AB)
}

func (s *Non_ws_stringContext) U_00AB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AB, i)
}

func (s *Non_ws_stringContext) AllU_00AC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AC)
}

func (s *Non_ws_stringContext) U_00AC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AC, i)
}

func (s *Non_ws_stringContext) AllU_00AD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AD)
}

func (s *Non_ws_stringContext) U_00AD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AD, i)
}

func (s *Non_ws_stringContext) AllU_00AE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AE)
}

func (s *Non_ws_stringContext) U_00AE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AE, i)
}

func (s *Non_ws_stringContext) AllU_00AF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00AF)
}

func (s *Non_ws_stringContext) U_00AF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AF, i)
}

func (s *Non_ws_stringContext) AllU_00B0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B0)
}

func (s *Non_ws_stringContext) U_00B0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B0, i)
}

func (s *Non_ws_stringContext) AllU_00B1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B1)
}

func (s *Non_ws_stringContext) U_00B1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B1, i)
}

func (s *Non_ws_stringContext) AllU_00B2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B2)
}

func (s *Non_ws_stringContext) U_00B2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B2, i)
}

func (s *Non_ws_stringContext) AllU_00B3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B3)
}

func (s *Non_ws_stringContext) U_00B3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B3, i)
}

func (s *Non_ws_stringContext) AllU_00B4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B4)
}

func (s *Non_ws_stringContext) U_00B4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B4, i)
}

func (s *Non_ws_stringContext) AllU_00B5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B5)
}

func (s *Non_ws_stringContext) U_00B5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B5, i)
}

func (s *Non_ws_stringContext) AllU_00B6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B6)
}

func (s *Non_ws_stringContext) U_00B6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B6, i)
}

func (s *Non_ws_stringContext) AllU_00B7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B7)
}

func (s *Non_ws_stringContext) U_00B7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B7, i)
}

func (s *Non_ws_stringContext) AllU_00B8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B8)
}

func (s *Non_ws_stringContext) U_00B8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B8, i)
}

func (s *Non_ws_stringContext) AllU_00B9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00B9)
}

func (s *Non_ws_stringContext) U_00B9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B9, i)
}

func (s *Non_ws_stringContext) AllU_00BA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BA)
}

func (s *Non_ws_stringContext) U_00BA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BA, i)
}

func (s *Non_ws_stringContext) AllU_00BB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BB)
}

func (s *Non_ws_stringContext) U_00BB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BB, i)
}

func (s *Non_ws_stringContext) AllU_00BC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BC)
}

func (s *Non_ws_stringContext) U_00BC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BC, i)
}

func (s *Non_ws_stringContext) AllU_00BD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BD)
}

func (s *Non_ws_stringContext) U_00BD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BD, i)
}

func (s *Non_ws_stringContext) AllU_00BE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BE)
}

func (s *Non_ws_stringContext) U_00BE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BE, i)
}

func (s *Non_ws_stringContext) AllU_00BF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00BF)
}

func (s *Non_ws_stringContext) U_00BF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BF, i)
}

func (s *Non_ws_stringContext) AllU_00C0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C0)
}

func (s *Non_ws_stringContext) U_00C0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C0, i)
}

func (s *Non_ws_stringContext) AllU_00C1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C1)
}

func (s *Non_ws_stringContext) U_00C1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C1, i)
}

func (s *Non_ws_stringContext) AllU_00C2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C2)
}

func (s *Non_ws_stringContext) U_00C2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C2, i)
}

func (s *Non_ws_stringContext) AllU_00C3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C3)
}

func (s *Non_ws_stringContext) U_00C3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C3, i)
}

func (s *Non_ws_stringContext) AllU_00C4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C4)
}

func (s *Non_ws_stringContext) U_00C4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C4, i)
}

func (s *Non_ws_stringContext) AllU_00C5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C5)
}

func (s *Non_ws_stringContext) U_00C5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C5, i)
}

func (s *Non_ws_stringContext) AllU_00C6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C6)
}

func (s *Non_ws_stringContext) U_00C6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C6, i)
}

func (s *Non_ws_stringContext) AllU_00C7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C7)
}

func (s *Non_ws_stringContext) U_00C7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C7, i)
}

func (s *Non_ws_stringContext) AllU_00C8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C8)
}

func (s *Non_ws_stringContext) U_00C8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C8, i)
}

func (s *Non_ws_stringContext) AllU_00C9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00C9)
}

func (s *Non_ws_stringContext) U_00C9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C9, i)
}

func (s *Non_ws_stringContext) AllU_00CA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CA)
}

func (s *Non_ws_stringContext) U_00CA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CA, i)
}

func (s *Non_ws_stringContext) AllU_00CB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CB)
}

func (s *Non_ws_stringContext) U_00CB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CB, i)
}

func (s *Non_ws_stringContext) AllU_00CC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CC)
}

func (s *Non_ws_stringContext) U_00CC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CC, i)
}

func (s *Non_ws_stringContext) AllU_00CD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CD)
}

func (s *Non_ws_stringContext) U_00CD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CD, i)
}

func (s *Non_ws_stringContext) AllU_00CE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CE)
}

func (s *Non_ws_stringContext) U_00CE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CE, i)
}

func (s *Non_ws_stringContext) AllU_00CF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00CF)
}

func (s *Non_ws_stringContext) U_00CF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CF, i)
}

func (s *Non_ws_stringContext) AllU_00D0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D0)
}

func (s *Non_ws_stringContext) U_00D0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D0, i)
}

func (s *Non_ws_stringContext) AllU_00D1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D1)
}

func (s *Non_ws_stringContext) U_00D1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D1, i)
}

func (s *Non_ws_stringContext) AllU_00D2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D2)
}

func (s *Non_ws_stringContext) U_00D2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D2, i)
}

func (s *Non_ws_stringContext) AllU_00D3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D3)
}

func (s *Non_ws_stringContext) U_00D3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D3, i)
}

func (s *Non_ws_stringContext) AllU_00D4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D4)
}

func (s *Non_ws_stringContext) U_00D4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D4, i)
}

func (s *Non_ws_stringContext) AllU_00D5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D5)
}

func (s *Non_ws_stringContext) U_00D5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D5, i)
}

func (s *Non_ws_stringContext) AllU_00D6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D6)
}

func (s *Non_ws_stringContext) U_00D6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D6, i)
}

func (s *Non_ws_stringContext) AllU_00D7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D7)
}

func (s *Non_ws_stringContext) U_00D7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D7, i)
}

func (s *Non_ws_stringContext) AllU_00D8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D8)
}

func (s *Non_ws_stringContext) U_00D8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D8, i)
}

func (s *Non_ws_stringContext) AllU_00D9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00D9)
}

func (s *Non_ws_stringContext) U_00D9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D9, i)
}

func (s *Non_ws_stringContext) AllU_00DA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DA)
}

func (s *Non_ws_stringContext) U_00DA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DA, i)
}

func (s *Non_ws_stringContext) AllU_00DB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DB)
}

func (s *Non_ws_stringContext) U_00DB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DB, i)
}

func (s *Non_ws_stringContext) AllU_00DC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DC)
}

func (s *Non_ws_stringContext) U_00DC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DC, i)
}

func (s *Non_ws_stringContext) AllU_00DD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DD)
}

func (s *Non_ws_stringContext) U_00DD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DD, i)
}

func (s *Non_ws_stringContext) AllU_00DE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DE)
}

func (s *Non_ws_stringContext) U_00DE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DE, i)
}

func (s *Non_ws_stringContext) AllU_00DF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00DF)
}

func (s *Non_ws_stringContext) U_00DF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DF, i)
}

func (s *Non_ws_stringContext) AllU_00E0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E0)
}

func (s *Non_ws_stringContext) U_00E0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E0, i)
}

func (s *Non_ws_stringContext) AllU_00E1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E1)
}

func (s *Non_ws_stringContext) U_00E1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E1, i)
}

func (s *Non_ws_stringContext) AllU_00E2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E2)
}

func (s *Non_ws_stringContext) U_00E2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E2, i)
}

func (s *Non_ws_stringContext) AllU_00E3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E3)
}

func (s *Non_ws_stringContext) U_00E3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E3, i)
}

func (s *Non_ws_stringContext) AllU_00E4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E4)
}

func (s *Non_ws_stringContext) U_00E4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E4, i)
}

func (s *Non_ws_stringContext) AllU_00E5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E5)
}

func (s *Non_ws_stringContext) U_00E5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E5, i)
}

func (s *Non_ws_stringContext) AllU_00E6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E6)
}

func (s *Non_ws_stringContext) U_00E6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E6, i)
}

func (s *Non_ws_stringContext) AllU_00E7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E7)
}

func (s *Non_ws_stringContext) U_00E7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E7, i)
}

func (s *Non_ws_stringContext) AllU_00E8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E8)
}

func (s *Non_ws_stringContext) U_00E8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E8, i)
}

func (s *Non_ws_stringContext) AllU_00E9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00E9)
}

func (s *Non_ws_stringContext) U_00E9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E9, i)
}

func (s *Non_ws_stringContext) AllU_00EA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EA)
}

func (s *Non_ws_stringContext) U_00EA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EA, i)
}

func (s *Non_ws_stringContext) AllU_00EB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EB)
}

func (s *Non_ws_stringContext) U_00EB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EB, i)
}

func (s *Non_ws_stringContext) AllU_00EC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EC)
}

func (s *Non_ws_stringContext) U_00EC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EC, i)
}

func (s *Non_ws_stringContext) AllU_00ED() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00ED)
}

func (s *Non_ws_stringContext) U_00ED(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00ED, i)
}

func (s *Non_ws_stringContext) AllU_00EE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EE)
}

func (s *Non_ws_stringContext) U_00EE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EE, i)
}

func (s *Non_ws_stringContext) AllU_00EF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00EF)
}

func (s *Non_ws_stringContext) U_00EF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EF, i)
}

func (s *Non_ws_stringContext) AllU_00F0() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F0)
}

func (s *Non_ws_stringContext) U_00F0(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F0, i)
}

func (s *Non_ws_stringContext) AllU_00F1() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F1)
}

func (s *Non_ws_stringContext) U_00F1(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F1, i)
}

func (s *Non_ws_stringContext) AllU_00F2() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F2)
}

func (s *Non_ws_stringContext) U_00F2(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F2, i)
}

func (s *Non_ws_stringContext) AllU_00F3() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F3)
}

func (s *Non_ws_stringContext) U_00F3(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F3, i)
}

func (s *Non_ws_stringContext) AllU_00F4() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F4)
}

func (s *Non_ws_stringContext) U_00F4(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F4, i)
}

func (s *Non_ws_stringContext) AllU_00F5() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F5)
}

func (s *Non_ws_stringContext) U_00F5(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F5, i)
}

func (s *Non_ws_stringContext) AllU_00F6() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F6)
}

func (s *Non_ws_stringContext) U_00F6(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F6, i)
}

func (s *Non_ws_stringContext) AllU_00F7() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F7)
}

func (s *Non_ws_stringContext) U_00F7(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F7, i)
}

func (s *Non_ws_stringContext) AllU_00F8() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F8)
}

func (s *Non_ws_stringContext) U_00F8(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F8, i)
}

func (s *Non_ws_stringContext) AllU_00F9() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00F9)
}

func (s *Non_ws_stringContext) U_00F9(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F9, i)
}

func (s *Non_ws_stringContext) AllU_00FA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FA)
}

func (s *Non_ws_stringContext) U_00FA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FA, i)
}

func (s *Non_ws_stringContext) AllU_00FB() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FB)
}

func (s *Non_ws_stringContext) U_00FB(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FB, i)
}

func (s *Non_ws_stringContext) AllU_00FC() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FC)
}

func (s *Non_ws_stringContext) U_00FC(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FC, i)
}

func (s *Non_ws_stringContext) AllU_00FD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FD)
}

func (s *Non_ws_stringContext) U_00FD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FD, i)
}

func (s *Non_ws_stringContext) AllU_00FE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FE)
}

func (s *Non_ws_stringContext) U_00FE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FE, i)
}

func (s *Non_ws_stringContext) AllU_00FF() []antlr.TerminalNode {
	return s.GetTokens(sdpParserU_00FF)
}

func (s *Non_ws_stringContext) U_00FF(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FF, i)
}

func (s *Non_ws_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Non_ws_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Non_ws_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterNon_ws_string(s)
	}
}

func (s *Non_ws_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitNon_ws_string(s)
	}
}

func (p *sdpParser) Non_ws_string() (localctx INon_ws_stringContext) {
	localctx = NewNon_ws_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, sdpParserRULE_non_ws_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(932)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-5)&-(0x1f+1)) == 0 && ((1<<uint((_la-5)))&((1<<(sdpParserEXCLAMATION-5))|(1<<(sdpParserQUOTE-5))|(1<<(sdpParserHASH-5))|(1<<(sdpParserDOLLAR-5))|(1<<(sdpParserPERCENT-5))|(1<<(sdpParserAMPERSAND-5))|(1<<(sdpParserAPOSTROPHE-5))|(1<<(sdpParserLEFT_PAREN-5))|(1<<(sdpParserRIGHT_PAREN-5))|(1<<(sdpParserASTERISK-5))|(1<<(sdpParserPLUS-5))|(1<<(sdpParserCOMMA-5))|(1<<(sdpParserDASH-5))|(1<<(sdpParserPERIOD-5))|(1<<(sdpParserSLASH-5))|(1<<(sdpParserZERO-5))|(1<<(sdpParserONE-5))|(1<<(sdpParserTWO-5))|(1<<(sdpParserTHREE-5))|(1<<(sdpParserFOUR-5))|(1<<(sdpParserFIVE-5))|(1<<(sdpParserSIX-5))|(1<<(sdpParserSEVEN-5))|(1<<(sdpParserEIGHT-5))|(1<<(sdpParserNINE-5))|(1<<(sdpParserCOLON-5))|(1<<(sdpParserSEMICOLON-5))|(1<<(sdpParserLESS_THAN-5))|(1<<(sdpParserEQUALS-5))|(1<<(sdpParserGREATER_THAN-5))|(1<<(sdpParserQUESTION-5))|(1<<(sdpParserAT-5)))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37))|(1<<(sdpParserLEFT_BRACE-37))|(1<<(sdpParserBACKSLASH-37))|(1<<(sdpParserRIGHT_BRACE-37))|(1<<(sdpParserCARAT-37))|(1<<(sdpParserUNDERSCORE-37))|(1<<(sdpParserACCENT-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69))|(1<<(sdpParserLEFT_CURLY_BRACE-69))|(1<<(sdpParserPIPE-69))|(1<<(sdpParserRIGHT_CURLY_BRACE-69))|(1<<(sdpParserTILDE-69)))) != 0) || (((_la-129)&-(0x1f+1)) == 0 && ((1<<uint((_la-129)))&((1<<(sdpParserU_0080-129))|(1<<(sdpParserU_0081-129))|(1<<(sdpParserU_0082-129))|(1<<(sdpParserU_0083-129))|(1<<(sdpParserU_0084-129))|(1<<(sdpParserU_0085-129))|(1<<(sdpParserU_0086-129))|(1<<(sdpParserU_0087-129))|(1<<(sdpParserU_0088-129))|(1<<(sdpParserU_0089-129))|(1<<(sdpParserU_008A-129))|(1<<(sdpParserU_008B-129))|(1<<(sdpParserU_008C-129))|(1<<(sdpParserU_008D-129))|(1<<(sdpParserU_008E-129))|(1<<(sdpParserU_008F-129))|(1<<(sdpParserU_0090-129))|(1<<(sdpParserU_0091-129))|(1<<(sdpParserU_0092-129))|(1<<(sdpParserU_0093-129))|(1<<(sdpParserU_0094-129))|(1<<(sdpParserU_0095-129))|(1<<(sdpParserU_0096-129))|(1<<(sdpParserU_0097-129))|(1<<(sdpParserU_0098-129))|(1<<(sdpParserU_0099-129))|(1<<(sdpParserU_009A-129))|(1<<(sdpParserU_009B-129))|(1<<(sdpParserU_009C-129))|(1<<(sdpParserU_009D-129))|(1<<(sdpParserU_009E-129))|(1<<(sdpParserU_009F-129)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(sdpParserU_00A0-161))|(1<<(sdpParserU_00A1-161))|(1<<(sdpParserU_00A2-161))|(1<<(sdpParserU_00A3-161))|(1<<(sdpParserU_00A4-161))|(1<<(sdpParserU_00A5-161))|(1<<(sdpParserU_00A6-161))|(1<<(sdpParserU_00A7-161))|(1<<(sdpParserU_00A8-161))|(1<<(sdpParserU_00A9-161))|(1<<(sdpParserU_00AA-161))|(1<<(sdpParserU_00AB-161))|(1<<(sdpParserU_00AC-161))|(1<<(sdpParserU_00AD-161))|(1<<(sdpParserU_00AE-161))|(1<<(sdpParserU_00AF-161))|(1<<(sdpParserU_00B0-161))|(1<<(sdpParserU_00B1-161))|(1<<(sdpParserU_00B2-161))|(1<<(sdpParserU_00B3-161))|(1<<(sdpParserU_00B4-161))|(1<<(sdpParserU_00B5-161))|(1<<(sdpParserU_00B6-161))|(1<<(sdpParserU_00B7-161))|(1<<(sdpParserU_00B8-161))|(1<<(sdpParserU_00B9-161))|(1<<(sdpParserU_00BA-161))|(1<<(sdpParserU_00BB-161))|(1<<(sdpParserU_00BC-161))|(1<<(sdpParserU_00BD-161))|(1<<(sdpParserU_00BE-161))|(1<<(sdpParserU_00BF-161)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(sdpParserU_00C0-193))|(1<<(sdpParserU_00C1-193))|(1<<(sdpParserU_00C2-193))|(1<<(sdpParserU_00C3-193))|(1<<(sdpParserU_00C4-193))|(1<<(sdpParserU_00C5-193))|(1<<(sdpParserU_00C6-193))|(1<<(sdpParserU_00C7-193))|(1<<(sdpParserU_00C8-193))|(1<<(sdpParserU_00C9-193))|(1<<(sdpParserU_00CA-193))|(1<<(sdpParserU_00CB-193))|(1<<(sdpParserU_00CC-193))|(1<<(sdpParserU_00CD-193))|(1<<(sdpParserU_00CE-193))|(1<<(sdpParserU_00CF-193))|(1<<(sdpParserU_00D0-193))|(1<<(sdpParserU_00D1-193))|(1<<(sdpParserU_00D2-193))|(1<<(sdpParserU_00D3-193))|(1<<(sdpParserU_00D4-193))|(1<<(sdpParserU_00D5-193))|(1<<(sdpParserU_00D6-193))|(1<<(sdpParserU_00D7-193))|(1<<(sdpParserU_00D8-193))|(1<<(sdpParserU_00D9-193))|(1<<(sdpParserU_00DA-193))|(1<<(sdpParserU_00DB-193))|(1<<(sdpParserU_00DC-193))|(1<<(sdpParserU_00DD-193))|(1<<(sdpParserU_00DE-193))|(1<<(sdpParserU_00DF-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(sdpParserU_00E0-225))|(1<<(sdpParserU_00E1-225))|(1<<(sdpParserU_00E2-225))|(1<<(sdpParserU_00E3-225))|(1<<(sdpParserU_00E4-225))|(1<<(sdpParserU_00E5-225))|(1<<(sdpParserU_00E6-225))|(1<<(sdpParserU_00E7-225))|(1<<(sdpParserU_00E8-225))|(1<<(sdpParserU_00E9-225))|(1<<(sdpParserU_00EA-225))|(1<<(sdpParserU_00EB-225))|(1<<(sdpParserU_00EC-225))|(1<<(sdpParserU_00ED-225))|(1<<(sdpParserU_00EE-225))|(1<<(sdpParserU_00EF-225))|(1<<(sdpParserU_00F0-225))|(1<<(sdpParserU_00F1-225))|(1<<(sdpParserU_00F2-225))|(1<<(sdpParserU_00F3-225))|(1<<(sdpParserU_00F4-225))|(1<<(sdpParserU_00F5-225))|(1<<(sdpParserU_00F6-225))|(1<<(sdpParserU_00F7-225))|(1<<(sdpParserU_00F8-225))|(1<<(sdpParserU_00F9-225))|(1<<(sdpParserU_00FA-225))|(1<<(sdpParserU_00FB-225))|(1<<(sdpParserU_00FC-225))|(1<<(sdpParserU_00FD-225))|(1<<(sdpParserU_00FE-225))|(1<<(sdpParserU_00FF-225)))) != 0) {
		p.SetState(932)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE, sdpParserBACKSLASH, sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE:
			{
				p.SetState(930)
				p.Vchar()
			}

		case sdpParserU_0080, sdpParserU_0081, sdpParserU_0082, sdpParserU_0083, sdpParserU_0084, sdpParserU_0085, sdpParserU_0086, sdpParserU_0087, sdpParserU_0088, sdpParserU_0089, sdpParserU_008A, sdpParserU_008B, sdpParserU_008C, sdpParserU_008D, sdpParserU_008E, sdpParserU_008F, sdpParserU_0090, sdpParserU_0091, sdpParserU_0092, sdpParserU_0093, sdpParserU_0094, sdpParserU_0095, sdpParserU_0096, sdpParserU_0097, sdpParserU_0098, sdpParserU_0099, sdpParserU_009A, sdpParserU_009B, sdpParserU_009C, sdpParserU_009D, sdpParserU_009E, sdpParserU_009F, sdpParserU_00A0, sdpParserU_00A1, sdpParserU_00A2, sdpParserU_00A3, sdpParserU_00A4, sdpParserU_00A5, sdpParserU_00A6, sdpParserU_00A7, sdpParserU_00A8, sdpParserU_00A9, sdpParserU_00AA, sdpParserU_00AB, sdpParserU_00AC, sdpParserU_00AD, sdpParserU_00AE, sdpParserU_00AF, sdpParserU_00B0, sdpParserU_00B1, sdpParserU_00B2, sdpParserU_00B3, sdpParserU_00B4, sdpParserU_00B5, sdpParserU_00B6, sdpParserU_00B7, sdpParserU_00B8, sdpParserU_00B9, sdpParserU_00BA, sdpParserU_00BB, sdpParserU_00BC, sdpParserU_00BD, sdpParserU_00BE, sdpParserU_00BF, sdpParserU_00C0, sdpParserU_00C1, sdpParserU_00C2, sdpParserU_00C3, sdpParserU_00C4, sdpParserU_00C5, sdpParserU_00C6, sdpParserU_00C7, sdpParserU_00C8, sdpParserU_00C9, sdpParserU_00CA, sdpParserU_00CB, sdpParserU_00CC, sdpParserU_00CD, sdpParserU_00CE, sdpParserU_00CF, sdpParserU_00D0, sdpParserU_00D1, sdpParserU_00D2, sdpParserU_00D3, sdpParserU_00D4, sdpParserU_00D5, sdpParserU_00D6, sdpParserU_00D7, sdpParserU_00D8, sdpParserU_00D9, sdpParserU_00DA, sdpParserU_00DB, sdpParserU_00DC, sdpParserU_00DD, sdpParserU_00DE, sdpParserU_00DF, sdpParserU_00E0, sdpParserU_00E1, sdpParserU_00E2, sdpParserU_00E3, sdpParserU_00E4, sdpParserU_00E5, sdpParserU_00E6, sdpParserU_00E7, sdpParserU_00E8, sdpParserU_00E9, sdpParserU_00EA, sdpParserU_00EB, sdpParserU_00EC, sdpParserU_00ED, sdpParserU_00EE, sdpParserU_00EF, sdpParserU_00F0, sdpParserU_00F1, sdpParserU_00F2, sdpParserU_00F3, sdpParserU_00F4, sdpParserU_00F5, sdpParserU_00F6, sdpParserU_00F7, sdpParserU_00F8, sdpParserU_00F9, sdpParserU_00FA, sdpParserU_00FB, sdpParserU_00FC, sdpParserU_00FD, sdpParserU_00FE, sdpParserU_00FF:
			{
				p.SetState(931)
				_la = p.GetTokenStream().LA(1)

				if !((((_la-129)&-(0x1f+1)) == 0 && ((1<<uint((_la-129)))&((1<<(sdpParserU_0080-129))|(1<<(sdpParserU_0081-129))|(1<<(sdpParserU_0082-129))|(1<<(sdpParserU_0083-129))|(1<<(sdpParserU_0084-129))|(1<<(sdpParserU_0085-129))|(1<<(sdpParserU_0086-129))|(1<<(sdpParserU_0087-129))|(1<<(sdpParserU_0088-129))|(1<<(sdpParserU_0089-129))|(1<<(sdpParserU_008A-129))|(1<<(sdpParserU_008B-129))|(1<<(sdpParserU_008C-129))|(1<<(sdpParserU_008D-129))|(1<<(sdpParserU_008E-129))|(1<<(sdpParserU_008F-129))|(1<<(sdpParserU_0090-129))|(1<<(sdpParserU_0091-129))|(1<<(sdpParserU_0092-129))|(1<<(sdpParserU_0093-129))|(1<<(sdpParserU_0094-129))|(1<<(sdpParserU_0095-129))|(1<<(sdpParserU_0096-129))|(1<<(sdpParserU_0097-129))|(1<<(sdpParserU_0098-129))|(1<<(sdpParserU_0099-129))|(1<<(sdpParserU_009A-129))|(1<<(sdpParserU_009B-129))|(1<<(sdpParserU_009C-129))|(1<<(sdpParserU_009D-129))|(1<<(sdpParserU_009E-129))|(1<<(sdpParserU_009F-129)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(sdpParserU_00A0-161))|(1<<(sdpParserU_00A1-161))|(1<<(sdpParserU_00A2-161))|(1<<(sdpParserU_00A3-161))|(1<<(sdpParserU_00A4-161))|(1<<(sdpParserU_00A5-161))|(1<<(sdpParserU_00A6-161))|(1<<(sdpParserU_00A7-161))|(1<<(sdpParserU_00A8-161))|(1<<(sdpParserU_00A9-161))|(1<<(sdpParserU_00AA-161))|(1<<(sdpParserU_00AB-161))|(1<<(sdpParserU_00AC-161))|(1<<(sdpParserU_00AD-161))|(1<<(sdpParserU_00AE-161))|(1<<(sdpParserU_00AF-161))|(1<<(sdpParserU_00B0-161))|(1<<(sdpParserU_00B1-161))|(1<<(sdpParserU_00B2-161))|(1<<(sdpParserU_00B3-161))|(1<<(sdpParserU_00B4-161))|(1<<(sdpParserU_00B5-161))|(1<<(sdpParserU_00B6-161))|(1<<(sdpParserU_00B7-161))|(1<<(sdpParserU_00B8-161))|(1<<(sdpParserU_00B9-161))|(1<<(sdpParserU_00BA-161))|(1<<(sdpParserU_00BB-161))|(1<<(sdpParserU_00BC-161))|(1<<(sdpParserU_00BD-161))|(1<<(sdpParserU_00BE-161))|(1<<(sdpParserU_00BF-161)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(sdpParserU_00C0-193))|(1<<(sdpParserU_00C1-193))|(1<<(sdpParserU_00C2-193))|(1<<(sdpParserU_00C3-193))|(1<<(sdpParserU_00C4-193))|(1<<(sdpParserU_00C5-193))|(1<<(sdpParserU_00C6-193))|(1<<(sdpParserU_00C7-193))|(1<<(sdpParserU_00C8-193))|(1<<(sdpParserU_00C9-193))|(1<<(sdpParserU_00CA-193))|(1<<(sdpParserU_00CB-193))|(1<<(sdpParserU_00CC-193))|(1<<(sdpParserU_00CD-193))|(1<<(sdpParserU_00CE-193))|(1<<(sdpParserU_00CF-193))|(1<<(sdpParserU_00D0-193))|(1<<(sdpParserU_00D1-193))|(1<<(sdpParserU_00D2-193))|(1<<(sdpParserU_00D3-193))|(1<<(sdpParserU_00D4-193))|(1<<(sdpParserU_00D5-193))|(1<<(sdpParserU_00D6-193))|(1<<(sdpParserU_00D7-193))|(1<<(sdpParserU_00D8-193))|(1<<(sdpParserU_00D9-193))|(1<<(sdpParserU_00DA-193))|(1<<(sdpParserU_00DB-193))|(1<<(sdpParserU_00DC-193))|(1<<(sdpParserU_00DD-193))|(1<<(sdpParserU_00DE-193))|(1<<(sdpParserU_00DF-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(sdpParserU_00E0-225))|(1<<(sdpParserU_00E1-225))|(1<<(sdpParserU_00E2-225))|(1<<(sdpParserU_00E3-225))|(1<<(sdpParserU_00E4-225))|(1<<(sdpParserU_00E5-225))|(1<<(sdpParserU_00E6-225))|(1<<(sdpParserU_00E7-225))|(1<<(sdpParserU_00E8-225))|(1<<(sdpParserU_00E9-225))|(1<<(sdpParserU_00EA-225))|(1<<(sdpParserU_00EB-225))|(1<<(sdpParserU_00EC-225))|(1<<(sdpParserU_00ED-225))|(1<<(sdpParserU_00EE-225))|(1<<(sdpParserU_00EF-225))|(1<<(sdpParserU_00F0-225))|(1<<(sdpParserU_00F1-225))|(1<<(sdpParserU_00F2-225))|(1<<(sdpParserU_00F3-225))|(1<<(sdpParserU_00F4-225))|(1<<(sdpParserU_00F5-225))|(1<<(sdpParserU_00F6-225))|(1<<(sdpParserU_00F7-225))|(1<<(sdpParserU_00F8-225))|(1<<(sdpParserU_00F9-225))|(1<<(sdpParserU_00FA-225))|(1<<(sdpParserU_00FB-225))|(1<<(sdpParserU_00FC-225))|(1<<(sdpParserU_00FD-225))|(1<<(sdpParserU_00FE-225))|(1<<(sdpParserU_00FF-225)))) != 0)) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IToken_charContext is an interface to support dynamic dispatch.
type IToken_charContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsToken_charContext differentiates from other interfaces.
	IsToken_charContext()
}

type Token_charContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyToken_charContext() *Token_charContext {
	var p = new(Token_charContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_token_char
	return p
}

func (*Token_charContext) IsToken_charContext() {}

func NewToken_charContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Token_charContext {
	var p = new(Token_charContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_token_char

	return p
}

func (s *Token_charContext) GetParser() antlr.Parser { return s.parser }

func (s *Token_charContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *Token_charContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *Token_charContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *Token_charContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *Token_charContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *Token_charContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *Token_charContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *Token_charContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *Token_charContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *Token_charContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *Token_charContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *Token_charContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *Token_charContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *Token_charContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *Token_charContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *Token_charContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *Token_charContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *Token_charContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *Token_charContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *Token_charContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *Token_charContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *Token_charContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *Token_charContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *Token_charContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *Token_charContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *Token_charContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *Token_charContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *Token_charContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *Token_charContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *Token_charContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *Token_charContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *Token_charContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *Token_charContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *Token_charContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *Token_charContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *Token_charContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *Token_charContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *Token_charContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *Token_charContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *Token_charContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *Token_charContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *Token_charContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *Token_charContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *Token_charContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *Token_charContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *Token_charContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *Token_charContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *Token_charContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *Token_charContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *Token_charContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *Token_charContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *Token_charContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *Token_charContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *Token_charContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *Token_charContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *Token_charContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *Token_charContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *Token_charContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *Token_charContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *Token_charContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *Token_charContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *Token_charContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *Token_charContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *Token_charContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *Token_charContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *Token_charContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *Token_charContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *Token_charContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *Token_charContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *Token_charContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *Token_charContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *Token_charContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *Token_charContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *Token_charContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *Token_charContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *Token_charContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *Token_charContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *Token_charContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *Token_charContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *Token_charContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Token_charContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Token_charContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterToken_char(s)
	}
}

func (s *Token_charContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitToken_char(s)
	}
}

func (p *sdpParser) Token_char() (localctx IToken_charContext) {
	localctx = NewToken_charContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, sdpParserRULE_token_char)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(943)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserEXCLAMATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(936)
			p.Match(sdpParserEXCLAMATION)
		}

	case sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(937)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserASTERISK, sdpParserPLUS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(938)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserASTERISK || _la == sdpParserPLUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserDASH, sdpParserPERIOD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(939)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserDASH || _la == sdpParserPERIOD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(940)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(941)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(942)
			_la = p.GetTokenStream().LA(1)

			if !((((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(sdpParserCARAT-66))|(1<<(sdpParserUNDERSCORE-66))|(1<<(sdpParserACCENT-66))|(1<<(sdpParserA-66))|(1<<(sdpParserB-66))|(1<<(sdpParserC-66))|(1<<(sdpParserD-66))|(1<<(sdpParserE-66))|(1<<(sdpParserF-66))|(1<<(sdpParserG-66))|(1<<(sdpParserH-66))|(1<<(sdpParserI-66))|(1<<(sdpParserJ-66))|(1<<(sdpParserK-66))|(1<<(sdpParserL-66))|(1<<(sdpParserM-66))|(1<<(sdpParserN-66))|(1<<(sdpParserO-66))|(1<<(sdpParserP-66))|(1<<(sdpParserQ-66))|(1<<(sdpParserR-66))|(1<<(sdpParserS-66))|(1<<(sdpParserT-66))|(1<<(sdpParserU-66))|(1<<(sdpParserV-66))|(1<<(sdpParserW-66))|(1<<(sdpParserX-66))|(1<<(sdpParserY-66))|(1<<(sdpParserZ-66))|(1<<(sdpParserLEFT_CURLY_BRACE-66))|(1<<(sdpParserPIPE-66))|(1<<(sdpParserRIGHT_CURLY_BRACE-66)))) != 0) || _la == sdpParserTILDE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITokenContext is an interface to support dynamic dispatch.
type ITokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTokenContext differentiates from other interfaces.
	IsTokenContext()
}

type TokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTokenContext() *TokenContext {
	var p = new(TokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_token
	return p
}

func (*TokenContext) IsTokenContext() {}

func NewTokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TokenContext {
	var p = new(TokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_token

	return p
}

func (s *TokenContext) GetParser() antlr.Parser { return s.parser }

func (s *TokenContext) AllToken_char() []IToken_charContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IToken_charContext)(nil)).Elem())
	var tst = make([]IToken_charContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IToken_charContext)
		}
	}

	return tst
}

func (s *TokenContext) Token_char(i int) IToken_charContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IToken_charContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IToken_charContext)
}

func (s *TokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterToken(s)
	}
}

func (s *TokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitToken(s)
	}
}

func (p *sdpParser) Token() (localctx ITokenContext) {
	localctx = NewTokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, sdpParserRULE_token)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(946)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37))|(1<<(sdpParserCARAT-37))|(1<<(sdpParserUNDERSCORE-37))|(1<<(sdpParserACCENT-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69))|(1<<(sdpParserLEFT_CURLY_BRACE-69))|(1<<(sdpParserPIPE-69))|(1<<(sdpParserRIGHT_CURLY_BRACE-69))|(1<<(sdpParserTILDE-69)))) != 0) {
		{
			p.SetState(945)
			p.Token_char()
		}

		p.SetState(948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEmail_safeContext is an interface to support dynamic dispatch.
type IEmail_safeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmail_safeContext differentiates from other interfaces.
	IsEmail_safeContext()
}

type Email_safeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmail_safeContext() *Email_safeContext {
	var p = new(Email_safeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_email_safe
	return p
}

func (*Email_safeContext) IsEmail_safeContext() {}

func NewEmail_safeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Email_safeContext {
	var p = new(Email_safeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_email_safe

	return p
}

func (s *Email_safeContext) GetParser() antlr.Parser { return s.parser }

func (s *Email_safeContext) U_0001() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0001, 0)
}

func (s *Email_safeContext) U_0002() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0002, 0)
}

func (s *Email_safeContext) U_0003() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0003, 0)
}

func (s *Email_safeContext) U_0004() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0004, 0)
}

func (s *Email_safeContext) U_0005() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0005, 0)
}

func (s *Email_safeContext) U_0006() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0006, 0)
}

func (s *Email_safeContext) U_0007() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0007, 0)
}

func (s *Email_safeContext) U_0008() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0008, 0)
}

func (s *Email_safeContext) TAB() antlr.TerminalNode {
	return s.GetToken(sdpParserTAB, 0)
}

func (s *Email_safeContext) U_000B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000B, 0)
}

func (s *Email_safeContext) U_000C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000C, 0)
}

func (s *Email_safeContext) U_000E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000E, 0)
}

func (s *Email_safeContext) U_000F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000F, 0)
}

func (s *Email_safeContext) U_0010() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0010, 0)
}

func (s *Email_safeContext) U_0011() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0011, 0)
}

func (s *Email_safeContext) U_0012() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0012, 0)
}

func (s *Email_safeContext) U_0013() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0013, 0)
}

func (s *Email_safeContext) U_0014() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0014, 0)
}

func (s *Email_safeContext) U_0015() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0015, 0)
}

func (s *Email_safeContext) U_0016() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0016, 0)
}

func (s *Email_safeContext) U_0017() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0017, 0)
}

func (s *Email_safeContext) U_0018() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0018, 0)
}

func (s *Email_safeContext) U_0019() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0019, 0)
}

func (s *Email_safeContext) U_001A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001A, 0)
}

func (s *Email_safeContext) U_001B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001B, 0)
}

func (s *Email_safeContext) U_001C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001C, 0)
}

func (s *Email_safeContext) U_001D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001D, 0)
}

func (s *Email_safeContext) U_001E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001E, 0)
}

func (s *Email_safeContext) U_001F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001F, 0)
}

func (s *Email_safeContext) SPACE() antlr.TerminalNode {
	return s.GetToken(sdpParserSPACE, 0)
}

func (s *Email_safeContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *Email_safeContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, 0)
}

func (s *Email_safeContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *Email_safeContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *Email_safeContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *Email_safeContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *Email_safeContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *Email_safeContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *Email_safeContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *Email_safeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *Email_safeContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *Email_safeContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *Email_safeContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *Email_safeContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *Email_safeContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *Email_safeContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *Email_safeContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *Email_safeContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *Email_safeContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *Email_safeContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *Email_safeContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *Email_safeContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *Email_safeContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *Email_safeContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Email_safeContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *Email_safeContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Email_safeContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *Email_safeContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *Email_safeContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *Email_safeContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *Email_safeContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *Email_safeContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *Email_safeContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *Email_safeContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *Email_safeContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *Email_safeContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *Email_safeContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *Email_safeContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *Email_safeContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *Email_safeContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *Email_safeContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *Email_safeContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *Email_safeContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *Email_safeContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *Email_safeContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *Email_safeContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *Email_safeContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *Email_safeContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *Email_safeContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *Email_safeContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *Email_safeContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *Email_safeContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *Email_safeContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *Email_safeContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *Email_safeContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *Email_safeContext) BACKSLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, 0)
}

func (s *Email_safeContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *Email_safeContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *Email_safeContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *Email_safeContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *Email_safeContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *Email_safeContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *Email_safeContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *Email_safeContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *Email_safeContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *Email_safeContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *Email_safeContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *Email_safeContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *Email_safeContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *Email_safeContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *Email_safeContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *Email_safeContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *Email_safeContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *Email_safeContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *Email_safeContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *Email_safeContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *Email_safeContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *Email_safeContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *Email_safeContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *Email_safeContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *Email_safeContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *Email_safeContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *Email_safeContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *Email_safeContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *Email_safeContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *Email_safeContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *Email_safeContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *Email_safeContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *Email_safeContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *Email_safeContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *Email_safeContext) U_007F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_007F, 0)
}

func (s *Email_safeContext) U_0080() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0080, 0)
}

func (s *Email_safeContext) U_0081() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0081, 0)
}

func (s *Email_safeContext) U_0082() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0082, 0)
}

func (s *Email_safeContext) U_0083() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0083, 0)
}

func (s *Email_safeContext) U_0084() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0084, 0)
}

func (s *Email_safeContext) U_0085() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0085, 0)
}

func (s *Email_safeContext) U_0086() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0086, 0)
}

func (s *Email_safeContext) U_0087() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0087, 0)
}

func (s *Email_safeContext) U_0088() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0088, 0)
}

func (s *Email_safeContext) U_0089() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0089, 0)
}

func (s *Email_safeContext) U_008A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008A, 0)
}

func (s *Email_safeContext) U_008B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008B, 0)
}

func (s *Email_safeContext) U_008C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008C, 0)
}

func (s *Email_safeContext) U_008D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008D, 0)
}

func (s *Email_safeContext) U_008E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008E, 0)
}

func (s *Email_safeContext) U_008F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008F, 0)
}

func (s *Email_safeContext) U_0090() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0090, 0)
}

func (s *Email_safeContext) U_0091() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0091, 0)
}

func (s *Email_safeContext) U_0092() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0092, 0)
}

func (s *Email_safeContext) U_0093() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0093, 0)
}

func (s *Email_safeContext) U_0094() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0094, 0)
}

func (s *Email_safeContext) U_0095() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0095, 0)
}

func (s *Email_safeContext) U_0096() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0096, 0)
}

func (s *Email_safeContext) U_0097() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0097, 0)
}

func (s *Email_safeContext) U_0098() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0098, 0)
}

func (s *Email_safeContext) U_0099() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0099, 0)
}

func (s *Email_safeContext) U_009A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009A, 0)
}

func (s *Email_safeContext) U_009B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009B, 0)
}

func (s *Email_safeContext) U_009C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009C, 0)
}

func (s *Email_safeContext) U_009D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009D, 0)
}

func (s *Email_safeContext) U_009E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009E, 0)
}

func (s *Email_safeContext) U_009F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009F, 0)
}

func (s *Email_safeContext) U_00A0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A0, 0)
}

func (s *Email_safeContext) U_00A1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A1, 0)
}

func (s *Email_safeContext) U_00A2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A2, 0)
}

func (s *Email_safeContext) U_00A3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A3, 0)
}

func (s *Email_safeContext) U_00A4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A4, 0)
}

func (s *Email_safeContext) U_00A5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A5, 0)
}

func (s *Email_safeContext) U_00A6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A6, 0)
}

func (s *Email_safeContext) U_00A7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A7, 0)
}

func (s *Email_safeContext) U_00A8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A8, 0)
}

func (s *Email_safeContext) U_00A9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A9, 0)
}

func (s *Email_safeContext) U_00AA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AA, 0)
}

func (s *Email_safeContext) U_00AB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AB, 0)
}

func (s *Email_safeContext) U_00AC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AC, 0)
}

func (s *Email_safeContext) U_00AD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AD, 0)
}

func (s *Email_safeContext) U_00AE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AE, 0)
}

func (s *Email_safeContext) U_00AF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AF, 0)
}

func (s *Email_safeContext) U_00B0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B0, 0)
}

func (s *Email_safeContext) U_00B1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B1, 0)
}

func (s *Email_safeContext) U_00B2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B2, 0)
}

func (s *Email_safeContext) U_00B3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B3, 0)
}

func (s *Email_safeContext) U_00B4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B4, 0)
}

func (s *Email_safeContext) U_00B5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B5, 0)
}

func (s *Email_safeContext) U_00B6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B6, 0)
}

func (s *Email_safeContext) U_00B7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B7, 0)
}

func (s *Email_safeContext) U_00B8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B8, 0)
}

func (s *Email_safeContext) U_00B9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B9, 0)
}

func (s *Email_safeContext) U_00BA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BA, 0)
}

func (s *Email_safeContext) U_00BB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BB, 0)
}

func (s *Email_safeContext) U_00BC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BC, 0)
}

func (s *Email_safeContext) U_00BD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BD, 0)
}

func (s *Email_safeContext) U_00BE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BE, 0)
}

func (s *Email_safeContext) U_00BF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BF, 0)
}

func (s *Email_safeContext) U_00C0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C0, 0)
}

func (s *Email_safeContext) U_00C1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C1, 0)
}

func (s *Email_safeContext) U_00C2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C2, 0)
}

func (s *Email_safeContext) U_00C3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C3, 0)
}

func (s *Email_safeContext) U_00C4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C4, 0)
}

func (s *Email_safeContext) U_00C5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C5, 0)
}

func (s *Email_safeContext) U_00C6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C6, 0)
}

func (s *Email_safeContext) U_00C7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C7, 0)
}

func (s *Email_safeContext) U_00C8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C8, 0)
}

func (s *Email_safeContext) U_00C9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C9, 0)
}

func (s *Email_safeContext) U_00CA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CA, 0)
}

func (s *Email_safeContext) U_00CB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CB, 0)
}

func (s *Email_safeContext) U_00CC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CC, 0)
}

func (s *Email_safeContext) U_00CD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CD, 0)
}

func (s *Email_safeContext) U_00CE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CE, 0)
}

func (s *Email_safeContext) U_00CF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CF, 0)
}

func (s *Email_safeContext) U_00D0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D0, 0)
}

func (s *Email_safeContext) U_00D1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D1, 0)
}

func (s *Email_safeContext) U_00D2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D2, 0)
}

func (s *Email_safeContext) U_00D3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D3, 0)
}

func (s *Email_safeContext) U_00D4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D4, 0)
}

func (s *Email_safeContext) U_00D5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D5, 0)
}

func (s *Email_safeContext) U_00D6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D6, 0)
}

func (s *Email_safeContext) U_00D7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D7, 0)
}

func (s *Email_safeContext) U_00D8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D8, 0)
}

func (s *Email_safeContext) U_00D9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D9, 0)
}

func (s *Email_safeContext) U_00DA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DA, 0)
}

func (s *Email_safeContext) U_00DB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DB, 0)
}

func (s *Email_safeContext) U_00DC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DC, 0)
}

func (s *Email_safeContext) U_00DD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DD, 0)
}

func (s *Email_safeContext) U_00DE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DE, 0)
}

func (s *Email_safeContext) U_00DF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DF, 0)
}

func (s *Email_safeContext) U_00E0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E0, 0)
}

func (s *Email_safeContext) U_00E1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E1, 0)
}

func (s *Email_safeContext) U_00E2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E2, 0)
}

func (s *Email_safeContext) U_00E3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E3, 0)
}

func (s *Email_safeContext) U_00E4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E4, 0)
}

func (s *Email_safeContext) U_00E5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E5, 0)
}

func (s *Email_safeContext) U_00E6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E6, 0)
}

func (s *Email_safeContext) U_00E7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E7, 0)
}

func (s *Email_safeContext) U_00E8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E8, 0)
}

func (s *Email_safeContext) U_00E9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E9, 0)
}

func (s *Email_safeContext) U_00EA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EA, 0)
}

func (s *Email_safeContext) U_00EB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EB, 0)
}

func (s *Email_safeContext) U_00EC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EC, 0)
}

func (s *Email_safeContext) U_00ED() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00ED, 0)
}

func (s *Email_safeContext) U_00EE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EE, 0)
}

func (s *Email_safeContext) U_00EF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EF, 0)
}

func (s *Email_safeContext) U_00F0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F0, 0)
}

func (s *Email_safeContext) U_00F1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F1, 0)
}

func (s *Email_safeContext) U_00F2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F2, 0)
}

func (s *Email_safeContext) U_00F3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F3, 0)
}

func (s *Email_safeContext) U_00F4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F4, 0)
}

func (s *Email_safeContext) U_00F5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F5, 0)
}

func (s *Email_safeContext) U_00F6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F6, 0)
}

func (s *Email_safeContext) U_00F7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F7, 0)
}

func (s *Email_safeContext) U_00F8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F8, 0)
}

func (s *Email_safeContext) U_00F9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F9, 0)
}

func (s *Email_safeContext) U_00FA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FA, 0)
}

func (s *Email_safeContext) U_00FB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FB, 0)
}

func (s *Email_safeContext) U_00FC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FC, 0)
}

func (s *Email_safeContext) U_00FD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FD, 0)
}

func (s *Email_safeContext) U_00FE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FE, 0)
}

func (s *Email_safeContext) U_00FF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FF, 0)
}

func (s *Email_safeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Email_safeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Email_safeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterEmail_safe(s)
	}
}

func (s *Email_safeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitEmail_safe(s)
	}
}

func (p *sdpParser) Email_safe() (localctx IEmail_safeContext) {
	localctx = NewEmail_safeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, sdpParserRULE_email_safe)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(956)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserTAB, sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(950)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserTAB || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(sdpParserU_0001-100))|(1<<(sdpParserU_0002-100))|(1<<(sdpParserU_0003-100))|(1<<(sdpParserU_0004-100))|(1<<(sdpParserU_0005-100))|(1<<(sdpParserU_0006-100))|(1<<(sdpParserU_0007-100))|(1<<(sdpParserU_0008-100)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserU_000B, sdpParserU_000C:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(951)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserU_000B || _la == sdpParserU_000C) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserSPACE, sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(952)
			_la = p.GetTokenStream().LA(1)

			if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserSPACE)|(1<<sdpParserEXCLAMATION)|(1<<sdpParserQUOTE)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE))) != 0) || (((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(sdpParserU_000E-110))|(1<<(sdpParserU_000F-110))|(1<<(sdpParserU_0010-110))|(1<<(sdpParserU_0011-110))|(1<<(sdpParserU_0012-110))|(1<<(sdpParserU_0013-110))|(1<<(sdpParserU_0014-110))|(1<<(sdpParserU_0015-110))|(1<<(sdpParserU_0016-110))|(1<<(sdpParserU_0017-110))|(1<<(sdpParserU_0018-110))|(1<<(sdpParserU_0019-110))|(1<<(sdpParserU_001A-110))|(1<<(sdpParserU_001B-110))|(1<<(sdpParserU_001C-110))|(1<<(sdpParserU_001D-110))|(1<<(sdpParserU_001E-110))|(1<<(sdpParserU_001F-110)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(953)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserEQUALS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(954)
			p.Match(sdpParserEQUALS)
		}

	case sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE, sdpParserBACKSLASH, sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE, sdpParserU_007F, sdpParserU_0080, sdpParserU_0081, sdpParserU_0082, sdpParserU_0083, sdpParserU_0084, sdpParserU_0085, sdpParserU_0086, sdpParserU_0087, sdpParserU_0088, sdpParserU_0089, sdpParserU_008A, sdpParserU_008B, sdpParserU_008C, sdpParserU_008D, sdpParserU_008E, sdpParserU_008F, sdpParserU_0090, sdpParserU_0091, sdpParserU_0092, sdpParserU_0093, sdpParserU_0094, sdpParserU_0095, sdpParserU_0096, sdpParserU_0097, sdpParserU_0098, sdpParserU_0099, sdpParserU_009A, sdpParserU_009B, sdpParserU_009C, sdpParserU_009D, sdpParserU_009E, sdpParserU_009F, sdpParserU_00A0, sdpParserU_00A1, sdpParserU_00A2, sdpParserU_00A3, sdpParserU_00A4, sdpParserU_00A5, sdpParserU_00A6, sdpParserU_00A7, sdpParserU_00A8, sdpParserU_00A9, sdpParserU_00AA, sdpParserU_00AB, sdpParserU_00AC, sdpParserU_00AD, sdpParserU_00AE, sdpParserU_00AF, sdpParserU_00B0, sdpParserU_00B1, sdpParserU_00B2, sdpParserU_00B3, sdpParserU_00B4, sdpParserU_00B5, sdpParserU_00B6, sdpParserU_00B7, sdpParserU_00B8, sdpParserU_00B9, sdpParserU_00BA, sdpParserU_00BB, sdpParserU_00BC, sdpParserU_00BD, sdpParserU_00BE, sdpParserU_00BF, sdpParserU_00C0, sdpParserU_00C1, sdpParserU_00C2, sdpParserU_00C3, sdpParserU_00C4, sdpParserU_00C5, sdpParserU_00C6, sdpParserU_00C7, sdpParserU_00C8, sdpParserU_00C9, sdpParserU_00CA, sdpParserU_00CB, sdpParserU_00CC, sdpParserU_00CD, sdpParserU_00CE, sdpParserU_00CF, sdpParserU_00D0, sdpParserU_00D1, sdpParserU_00D2, sdpParserU_00D3, sdpParserU_00D4, sdpParserU_00D5, sdpParserU_00D6, sdpParserU_00D7, sdpParserU_00D8, sdpParserU_00D9, sdpParserU_00DA, sdpParserU_00DB, sdpParserU_00DC, sdpParserU_00DD, sdpParserU_00DE, sdpParserU_00DF, sdpParserU_00E0, sdpParserU_00E1, sdpParserU_00E2, sdpParserU_00E3, sdpParserU_00E4, sdpParserU_00E5, sdpParserU_00E6, sdpParserU_00E7, sdpParserU_00E8, sdpParserU_00E9, sdpParserU_00EA, sdpParserU_00EB, sdpParserU_00EC, sdpParserU_00ED, sdpParserU_00EE, sdpParserU_00EF, sdpParserU_00F0, sdpParserU_00F1, sdpParserU_00F2, sdpParserU_00F3, sdpParserU_00F4, sdpParserU_00F5, sdpParserU_00F6, sdpParserU_00F7, sdpParserU_00F8, sdpParserU_00F9, sdpParserU_00FA, sdpParserU_00FB, sdpParserU_00FC, sdpParserU_00FD, sdpParserU_00FE, sdpParserU_00FF:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(955)
			_la = p.GetTokenStream().LA(1)

			if !((((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(sdpParserQUESTION-35))|(1<<(sdpParserAT-35))|(1<<(sdpParserCAP_A-35))|(1<<(sdpParserCAP_B-35))|(1<<(sdpParserCAP_C-35))|(1<<(sdpParserCAP_D-35))|(1<<(sdpParserCAP_E-35))|(1<<(sdpParserCAP_F-35))|(1<<(sdpParserCAP_G-35))|(1<<(sdpParserCAP_H-35))|(1<<(sdpParserCAP_I-35))|(1<<(sdpParserCAP_J-35))|(1<<(sdpParserCAP_K-35))|(1<<(sdpParserCAP_L-35))|(1<<(sdpParserCAP_M-35))|(1<<(sdpParserCAP_N-35))|(1<<(sdpParserCAP_O-35))|(1<<(sdpParserCAP_P-35))|(1<<(sdpParserCAP_Q-35))|(1<<(sdpParserCAP_R-35))|(1<<(sdpParserCAP_S-35))|(1<<(sdpParserCAP_T-35))|(1<<(sdpParserCAP_U-35))|(1<<(sdpParserCAP_V-35))|(1<<(sdpParserCAP_W-35))|(1<<(sdpParserCAP_X-35))|(1<<(sdpParserCAP_Y-35))|(1<<(sdpParserCAP_Z-35))|(1<<(sdpParserLEFT_BRACE-35))|(1<<(sdpParserBACKSLASH-35))|(1<<(sdpParserRIGHT_BRACE-35))|(1<<(sdpParserCARAT-35)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserACCENT-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserLEFT_CURLY_BRACE-67))|(1<<(sdpParserPIPE-67))|(1<<(sdpParserRIGHT_CURLY_BRACE-67))|(1<<(sdpParserTILDE-67)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(sdpParserU_007F-128))|(1<<(sdpParserU_0080-128))|(1<<(sdpParserU_0081-128))|(1<<(sdpParserU_0082-128))|(1<<(sdpParserU_0083-128))|(1<<(sdpParserU_0084-128))|(1<<(sdpParserU_0085-128))|(1<<(sdpParserU_0086-128))|(1<<(sdpParserU_0087-128))|(1<<(sdpParserU_0088-128))|(1<<(sdpParserU_0089-128))|(1<<(sdpParserU_008A-128))|(1<<(sdpParserU_008B-128))|(1<<(sdpParserU_008C-128))|(1<<(sdpParserU_008D-128))|(1<<(sdpParserU_008E-128))|(1<<(sdpParserU_008F-128))|(1<<(sdpParserU_0090-128))|(1<<(sdpParserU_0091-128))|(1<<(sdpParserU_0092-128))|(1<<(sdpParserU_0093-128))|(1<<(sdpParserU_0094-128))|(1<<(sdpParserU_0095-128))|(1<<(sdpParserU_0096-128))|(1<<(sdpParserU_0097-128))|(1<<(sdpParserU_0098-128))|(1<<(sdpParserU_0099-128))|(1<<(sdpParserU_009A-128))|(1<<(sdpParserU_009B-128))|(1<<(sdpParserU_009C-128))|(1<<(sdpParserU_009D-128))|(1<<(sdpParserU_009E-128)))) != 0) || (((_la-160)&-(0x1f+1)) == 0 && ((1<<uint((_la-160)))&((1<<(sdpParserU_009F-160))|(1<<(sdpParserU_00A0-160))|(1<<(sdpParserU_00A1-160))|(1<<(sdpParserU_00A2-160))|(1<<(sdpParserU_00A3-160))|(1<<(sdpParserU_00A4-160))|(1<<(sdpParserU_00A5-160))|(1<<(sdpParserU_00A6-160))|(1<<(sdpParserU_00A7-160))|(1<<(sdpParserU_00A8-160))|(1<<(sdpParserU_00A9-160))|(1<<(sdpParserU_00AA-160))|(1<<(sdpParserU_00AB-160))|(1<<(sdpParserU_00AC-160))|(1<<(sdpParserU_00AD-160))|(1<<(sdpParserU_00AE-160))|(1<<(sdpParserU_00AF-160))|(1<<(sdpParserU_00B0-160))|(1<<(sdpParserU_00B1-160))|(1<<(sdpParserU_00B2-160))|(1<<(sdpParserU_00B3-160))|(1<<(sdpParserU_00B4-160))|(1<<(sdpParserU_00B5-160))|(1<<(sdpParserU_00B6-160))|(1<<(sdpParserU_00B7-160))|(1<<(sdpParserU_00B8-160))|(1<<(sdpParserU_00B9-160))|(1<<(sdpParserU_00BA-160))|(1<<(sdpParserU_00BB-160))|(1<<(sdpParserU_00BC-160))|(1<<(sdpParserU_00BD-160))|(1<<(sdpParserU_00BE-160)))) != 0) || (((_la-192)&-(0x1f+1)) == 0 && ((1<<uint((_la-192)))&((1<<(sdpParserU_00BF-192))|(1<<(sdpParserU_00C0-192))|(1<<(sdpParserU_00C1-192))|(1<<(sdpParserU_00C2-192))|(1<<(sdpParserU_00C3-192))|(1<<(sdpParserU_00C4-192))|(1<<(sdpParserU_00C5-192))|(1<<(sdpParserU_00C6-192))|(1<<(sdpParserU_00C7-192))|(1<<(sdpParserU_00C8-192))|(1<<(sdpParserU_00C9-192))|(1<<(sdpParserU_00CA-192))|(1<<(sdpParserU_00CB-192))|(1<<(sdpParserU_00CC-192))|(1<<(sdpParserU_00CD-192))|(1<<(sdpParserU_00CE-192))|(1<<(sdpParserU_00CF-192))|(1<<(sdpParserU_00D0-192))|(1<<(sdpParserU_00D1-192))|(1<<(sdpParserU_00D2-192))|(1<<(sdpParserU_00D3-192))|(1<<(sdpParserU_00D4-192))|(1<<(sdpParserU_00D5-192))|(1<<(sdpParserU_00D6-192))|(1<<(sdpParserU_00D7-192))|(1<<(sdpParserU_00D8-192))|(1<<(sdpParserU_00D9-192))|(1<<(sdpParserU_00DA-192))|(1<<(sdpParserU_00DB-192))|(1<<(sdpParserU_00DC-192))|(1<<(sdpParserU_00DD-192))|(1<<(sdpParserU_00DE-192)))) != 0) || (((_la-224)&-(0x1f+1)) == 0 && ((1<<uint((_la-224)))&((1<<(sdpParserU_00DF-224))|(1<<(sdpParserU_00E0-224))|(1<<(sdpParserU_00E1-224))|(1<<(sdpParserU_00E2-224))|(1<<(sdpParserU_00E3-224))|(1<<(sdpParserU_00E4-224))|(1<<(sdpParserU_00E5-224))|(1<<(sdpParserU_00E6-224))|(1<<(sdpParserU_00E7-224))|(1<<(sdpParserU_00E8-224))|(1<<(sdpParserU_00E9-224))|(1<<(sdpParserU_00EA-224))|(1<<(sdpParserU_00EB-224))|(1<<(sdpParserU_00EC-224))|(1<<(sdpParserU_00ED-224))|(1<<(sdpParserU_00EE-224))|(1<<(sdpParserU_00EF-224))|(1<<(sdpParserU_00F0-224))|(1<<(sdpParserU_00F1-224))|(1<<(sdpParserU_00F2-224))|(1<<(sdpParserU_00F3-224))|(1<<(sdpParserU_00F4-224))|(1<<(sdpParserU_00F5-224))|(1<<(sdpParserU_00F6-224))|(1<<(sdpParserU_00F7-224))|(1<<(sdpParserU_00F8-224))|(1<<(sdpParserU_00F9-224))|(1<<(sdpParserU_00FA-224))|(1<<(sdpParserU_00FB-224))|(1<<(sdpParserU_00FC-224))|(1<<(sdpParserU_00FD-224))|(1<<(sdpParserU_00FE-224)))) != 0) || _la == sdpParserU_00FF) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIntegerContext is an interface to support dynamic dispatch.
type IIntegerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerContext differentiates from other interfaces.
	IsIntegerContext()
}

type IntegerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerContext() *IntegerContext {
	var p = new(IntegerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_integer
	return p
}

func (*IntegerContext) IsIntegerContext() {}

func NewIntegerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerContext {
	var p = new(IntegerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_integer

	return p
}

func (s *IntegerContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerContext) Pos_digit() IPos_digitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPos_digitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPos_digitContext)
}

func (s *IntegerContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *IntegerContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *IntegerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterInteger(s)
	}
}

func (s *IntegerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitInteger(s)
	}
}

func (p *sdpParser) Integer() (localctx IIntegerContext) {
	localctx = NewIntegerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, sdpParserRULE_integer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(958)
		p.Pos_digit()
	}
	p.SetState(962)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0 {
		{
			p.SetState(959)
			p.Digit()
		}

		p.SetState(964)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlpha_numericContext is an interface to support dynamic dispatch.
type IAlpha_numericContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlpha_numericContext differentiates from other interfaces.
	IsAlpha_numericContext()
}

type Alpha_numericContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlpha_numericContext() *Alpha_numericContext {
	var p = new(Alpha_numericContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_alpha_numeric
	return p
}

func (*Alpha_numericContext) IsAlpha_numericContext() {}

func NewAlpha_numericContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alpha_numericContext {
	var p = new(Alpha_numericContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_alpha_numeric

	return p
}

func (s *Alpha_numericContext) GetParser() antlr.Parser { return s.parser }

func (s *Alpha_numericContext) Alpha() IAlphaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlphaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlphaContext)
}

func (s *Alpha_numericContext) Digit() IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Alpha_numericContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alpha_numericContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alpha_numericContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAlpha_numeric(s)
	}
}

func (s *Alpha_numericContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAlpha_numeric(s)
	}
}

func (p *sdpParser) Alpha_numeric() (localctx IAlpha_numericContext) {
	localctx = NewAlpha_numericContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, sdpParserRULE_alpha_numeric)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(967)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(965)
			p.Alpha()
		}

	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(966)
			p.Digit()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPos_digitContext is an interface to support dynamic dispatch.
type IPos_digitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPos_digitContext differentiates from other interfaces.
	IsPos_digitContext()
}

type Pos_digitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPos_digitContext() *Pos_digitContext {
	var p = new(Pos_digitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_pos_digit
	return p
}

func (*Pos_digitContext) IsPos_digitContext() {}

func NewPos_digitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pos_digitContext {
	var p = new(Pos_digitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_pos_digit

	return p
}

func (s *Pos_digitContext) GetParser() antlr.Parser { return s.parser }

func (s *Pos_digitContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *Pos_digitContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *Pos_digitContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *Pos_digitContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *Pos_digitContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *Pos_digitContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *Pos_digitContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *Pos_digitContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *Pos_digitContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *Pos_digitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pos_digitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pos_digitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPos_digit(s)
	}
}

func (s *Pos_digitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPos_digit(s)
	}
}

func (p *sdpParser) Pos_digit() (localctx IPos_digitContext) {
	localctx = NewPos_digitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, sdpParserRULE_pos_digit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(969)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDecimal_ucharContext is an interface to support dynamic dispatch.
type IDecimal_ucharContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimal_ucharContext differentiates from other interfaces.
	IsDecimal_ucharContext()
}

type Decimal_ucharContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimal_ucharContext() *Decimal_ucharContext {
	var p = new(Decimal_ucharContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_decimal_uchar
	return p
}

func (*Decimal_ucharContext) IsDecimal_ucharContext() {}

func NewDecimal_ucharContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Decimal_ucharContext {
	var p = new(Decimal_ucharContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_decimal_uchar

	return p
}

func (s *Decimal_ucharContext) GetParser() antlr.Parser { return s.parser }

func (s *Decimal_ucharContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *Decimal_ucharContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Decimal_ucharContext) Pos_digit() IPos_digitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPos_digitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPos_digitContext)
}

func (s *Decimal_ucharContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *Decimal_ucharContext) AllTWO() []antlr.TerminalNode {
	return s.GetTokens(sdpParserTWO)
}

func (s *Decimal_ucharContext) TWO(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, i)
}

func (s *Decimal_ucharContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *Decimal_ucharContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *Decimal_ucharContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *Decimal_ucharContext) AllFIVE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserFIVE)
}

func (s *Decimal_ucharContext) FIVE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, i)
}

func (s *Decimal_ucharContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_ucharContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Decimal_ucharContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDecimal_uchar(s)
	}
}

func (s *Decimal_ucharContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDecimal_uchar(s)
	}
}

func (p *sdpParser) Decimal_uchar() (localctx IDecimal_ucharContext) {
	localctx = NewDecimal_ucharContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, sdpParserRULE_decimal_uchar)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(988)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(971)
			p.Digit()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(972)
			p.Pos_digit()
		}
		{
			p.SetState(973)
			p.Digit()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(975)
			p.Match(sdpParserONE)
		}

		{
			p.SetState(976)
			p.Digit()
		}

		p.SetState(978)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
			{
				p.SetState(977)
				p.Digit()
			}

			p.SetState(980)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(982)
			p.Match(sdpParserTWO)
		}
		{
			p.SetState(983)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(984)
			p.Digit()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(985)
			p.Match(sdpParserTWO)
		}
		{
			p.SetState(986)
			p.Match(sdpParserFIVE)
		}
		{
			p.SetState(987)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IAddr_specContext is an interface to support dynamic dispatch.
type IAddr_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAddr_specContext differentiates from other interfaces.
	IsAddr_specContext()
}

type Addr_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAddr_specContext() *Addr_specContext {
	var p = new(Addr_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_addr_spec
	return p
}

func (*Addr_specContext) IsAddr_specContext() {}

func NewAddr_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Addr_specContext {
	var p = new(Addr_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_addr_spec

	return p
}

func (s *Addr_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Addr_specContext) Local_part() ILocal_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_partContext)
}

func (s *Addr_specContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *Addr_specContext) Domain() IDomainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDomainContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDomainContext)
}

func (s *Addr_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Addr_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Addr_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAddr_spec(s)
	}
}

func (s *Addr_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAddr_spec(s)
	}
}

func (p *sdpParser) Addr_spec() (localctx IAddr_specContext) {
	localctx = NewAddr_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, sdpParserRULE_addr_spec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(990)
		p.Local_part()
	}
	{
		p.SetState(991)
		p.Match(sdpParserAT)
	}
	{
		p.SetState(992)
		p.Domain()
	}

	return localctx
}

// ILocal_partContext is an interface to support dynamic dispatch.
type ILocal_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLocal_partContext differentiates from other interfaces.
	IsLocal_partContext()
}

type Local_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocal_partContext() *Local_partContext {
	var p = new(Local_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_local_part
	return p
}

func (*Local_partContext) IsLocal_partContext() {}

func NewLocal_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Local_partContext {
	var p = new(Local_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_local_part

	return p
}

func (s *Local_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Local_partContext) Dot_atom() IDot_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDot_atomContext)
}

func (s *Local_partContext) Quoted_string() IQuoted_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuoted_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuoted_stringContext)
}

func (s *Local_partContext) Obs_local_part() IObs_local_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_local_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_local_partContext)
}

func (s *Local_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Local_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Local_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterLocal_part(s)
	}
}

func (s *Local_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitLocal_part(s)
	}
}

func (p *sdpParser) Local_part() (localctx ILocal_partContext) {
	localctx = NewLocal_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, sdpParserRULE_local_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(997)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(994)
			p.Dot_atom()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(995)
			p.Quoted_string()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(996)
			p.Obs_local_part()
		}

	}

	return localctx
}

// IDomainContext is an interface to support dynamic dispatch.
type IDomainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDomainContext differentiates from other interfaces.
	IsDomainContext()
}

type DomainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDomainContext() *DomainContext {
	var p = new(DomainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_domain
	return p
}

func (*DomainContext) IsDomainContext() {}

func NewDomainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DomainContext {
	var p = new(DomainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_domain

	return p
}

func (s *DomainContext) GetParser() antlr.Parser { return s.parser }

func (s *DomainContext) Dot_atom() IDot_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDot_atomContext)
}

func (s *DomainContext) Domain_literal() IDomain_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDomain_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDomain_literalContext)
}

func (s *DomainContext) Obs_domain() IObs_domainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_domainContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_domainContext)
}

func (s *DomainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DomainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DomainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDomain(s)
	}
}

func (s *DomainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDomain(s)
	}
}

func (p *sdpParser) Domain() (localctx IDomainContext) {
	localctx = NewDomainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, sdpParserRULE_domain)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1002)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(999)
			p.Dot_atom()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1000)
			p.Domain_literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1001)
			p.Obs_domain()
		}

	}

	return localctx
}

// IDomain_literalContext is an interface to support dynamic dispatch.
type IDomain_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDomain_literalContext differentiates from other interfaces.
	IsDomain_literalContext()
}

type Domain_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDomain_literalContext() *Domain_literalContext {
	var p = new(Domain_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_domain_literal
	return p
}

func (*Domain_literalContext) IsDomain_literalContext() {}

func NewDomain_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Domain_literalContext {
	var p = new(Domain_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_domain_literal

	return p
}

func (s *Domain_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Domain_literalContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *Domain_literalContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *Domain_literalContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Domain_literalContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Domain_literalContext) AllDtext() []IDtextContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDtextContext)(nil)).Elem())
	var tst = make([]IDtextContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDtextContext)
		}
	}

	return tst
}

func (s *Domain_literalContext) Dtext(i int) IDtextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDtextContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDtextContext)
}

func (s *Domain_literalContext) AllFws() []IFwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFwsContext)(nil)).Elem())
	var tst = make([]IFwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFwsContext)
		}
	}

	return tst
}

func (s *Domain_literalContext) Fws(i int) IFwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFwsContext)
}

func (s *Domain_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Domain_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Domain_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDomain_literal(s)
	}
}

func (s *Domain_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDomain_literal(s)
	}
}

func (p *sdpParser) Domain_literal() (localctx IDomain_literalContext) {
	localctx = NewDomain_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, sdpParserRULE_domain_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1004)
			p.Cfws()
		}

	}
	{
		p.SetState(1007)
		p.Match(sdpParserLEFT_BRACE)
	}
	p.SetState(1014)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1009)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
				{
					p.SetState(1008)
					p.Fws()
				}

			}
			{
				p.SetState(1011)
				p.Dtext()
			}

		}
		p.SetState(1016)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext())
	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
		{
			p.SetState(1017)
			p.Fws()
		}

	}
	{
		p.SetState(1020)
		p.Match(sdpParserRIGHT_BRACE)
	}
	p.SetState(1022)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1021)
			p.Cfws()
		}

	}

	return localctx
}

// IDtextContext is an interface to support dynamic dispatch.
type IDtextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDtextContext differentiates from other interfaces.
	IsDtextContext()
}

type DtextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDtextContext() *DtextContext {
	var p = new(DtextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_dtext
	return p
}

func (*DtextContext) IsDtextContext() {}

func NewDtextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DtextContext {
	var p = new(DtextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_dtext

	return p
}

func (s *DtextContext) GetParser() antlr.Parser { return s.parser }

func (s *DtextContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *DtextContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, 0)
}

func (s *DtextContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *DtextContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *DtextContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *DtextContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *DtextContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *DtextContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *DtextContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *DtextContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *DtextContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *DtextContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *DtextContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *DtextContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *DtextContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *DtextContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *DtextContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *DtextContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *DtextContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *DtextContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *DtextContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *DtextContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *DtextContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *DtextContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *DtextContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *DtextContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *DtextContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *DtextContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *DtextContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *DtextContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *DtextContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *DtextContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *DtextContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *DtextContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *DtextContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *DtextContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *DtextContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *DtextContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *DtextContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *DtextContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *DtextContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *DtextContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *DtextContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *DtextContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *DtextContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *DtextContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *DtextContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *DtextContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *DtextContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *DtextContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *DtextContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *DtextContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *DtextContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *DtextContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *DtextContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *DtextContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *DtextContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *DtextContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *DtextContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *DtextContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *DtextContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *DtextContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *DtextContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *DtextContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *DtextContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *DtextContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *DtextContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *DtextContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *DtextContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *DtextContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *DtextContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *DtextContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *DtextContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *DtextContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *DtextContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *DtextContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *DtextContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *DtextContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *DtextContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *DtextContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *DtextContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *DtextContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *DtextContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *DtextContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *DtextContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *DtextContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *DtextContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *DtextContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *DtextContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *DtextContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *DtextContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *DtextContext) Obs_dtext() IObs_dtextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_dtextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_dtextContext)
}

func (s *DtextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DtextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DtextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDtext(s)
	}
}

func (s *DtextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDtext(s)
	}
}

func (p *sdpParser) Dtext() (localctx IDtextContext) {
	localctx = NewDtextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, sdpParserRULE_dtext)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1027)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1024)
			_la = p.GetTokenStream().LA(1)

			if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserQUOTE)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(sdpParserLESS_THAN-32))|(1<<(sdpParserEQUALS-32))|(1<<(sdpParserGREATER_THAN-32))|(1<<(sdpParserQUESTION-32))|(1<<(sdpParserAT-32))|(1<<(sdpParserCAP_A-32))|(1<<(sdpParserCAP_B-32))|(1<<(sdpParserCAP_C-32))|(1<<(sdpParserCAP_D-32))|(1<<(sdpParserCAP_E-32))|(1<<(sdpParserCAP_F-32))|(1<<(sdpParserCAP_G-32))|(1<<(sdpParserCAP_H-32))|(1<<(sdpParserCAP_I-32))|(1<<(sdpParserCAP_J-32))|(1<<(sdpParserCAP_K-32))|(1<<(sdpParserCAP_L-32))|(1<<(sdpParserCAP_M-32))|(1<<(sdpParserCAP_N-32))|(1<<(sdpParserCAP_O-32))|(1<<(sdpParserCAP_P-32))|(1<<(sdpParserCAP_Q-32))|(1<<(sdpParserCAP_R-32))|(1<<(sdpParserCAP_S-32))|(1<<(sdpParserCAP_T-32))|(1<<(sdpParserCAP_U-32))|(1<<(sdpParserCAP_V-32))|(1<<(sdpParserCAP_W-32))|(1<<(sdpParserCAP_X-32))|(1<<(sdpParserCAP_Y-32))|(1<<(sdpParserCAP_Z-32)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1025)
			_la = p.GetTokenStream().LA(1)

			if !((((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(sdpParserCARAT-66))|(1<<(sdpParserUNDERSCORE-66))|(1<<(sdpParserACCENT-66))|(1<<(sdpParserA-66))|(1<<(sdpParserB-66))|(1<<(sdpParserC-66))|(1<<(sdpParserD-66))|(1<<(sdpParserE-66))|(1<<(sdpParserF-66))|(1<<(sdpParserG-66))|(1<<(sdpParserH-66))|(1<<(sdpParserI-66))|(1<<(sdpParserJ-66))|(1<<(sdpParserK-66))|(1<<(sdpParserL-66))|(1<<(sdpParserM-66))|(1<<(sdpParserN-66))|(1<<(sdpParserO-66))|(1<<(sdpParserP-66))|(1<<(sdpParserQ-66))|(1<<(sdpParserR-66))|(1<<(sdpParserS-66))|(1<<(sdpParserT-66))|(1<<(sdpParserU-66))|(1<<(sdpParserV-66))|(1<<(sdpParserW-66))|(1<<(sdpParserX-66))|(1<<(sdpParserY-66))|(1<<(sdpParserZ-66))|(1<<(sdpParserLEFT_CURLY_BRACE-66))|(1<<(sdpParserPIPE-66))|(1<<(sdpParserRIGHT_CURLY_BRACE-66)))) != 0) || _la == sdpParserTILDE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserBACKSLASH, sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1026)
			p.Obs_dtext()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAtextContext is an interface to support dynamic dispatch.
type IAtextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtextContext differentiates from other interfaces.
	IsAtextContext()
}

type AtextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtextContext() *AtextContext {
	var p = new(AtextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_atext
	return p
}

func (*AtextContext) IsAtextContext() {}

func NewAtextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtextContext {
	var p = new(AtextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_atext

	return p
}

func (s *AtextContext) GetParser() antlr.Parser { return s.parser }

func (s *AtextContext) Alpha() IAlphaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlphaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlphaContext)
}

func (s *AtextContext) Digit() IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *AtextContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *AtextContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *AtextContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *AtextContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *AtextContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *AtextContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *AtextContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *AtextContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *AtextContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *AtextContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *AtextContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *AtextContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *AtextContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *AtextContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *AtextContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *AtextContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *AtextContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *AtextContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *AtextContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *AtextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAtext(s)
	}
}

func (s *AtextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAtext(s)
	}
}

func (p *sdpParser) Atext() (localctx IAtextContext) {
	localctx = NewAtextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, sdpParserRULE_atext)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1050)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1029)
			p.Alpha()
		}

	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1030)
			p.Digit()
		}

	case sdpParserEXCLAMATION:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1031)
			p.Match(sdpParserEXCLAMATION)
		}

	case sdpParserHASH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1032)
			p.Match(sdpParserHASH)
		}

	case sdpParserDOLLAR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1033)
			p.Match(sdpParserDOLLAR)
		}

	case sdpParserPERCENT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1034)
			p.Match(sdpParserPERCENT)
		}

	case sdpParserAMPERSAND:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1035)
			p.Match(sdpParserAMPERSAND)
		}

	case sdpParserAPOSTROPHE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1036)
			p.Match(sdpParserAPOSTROPHE)
		}

	case sdpParserASTERISK:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1037)
			p.Match(sdpParserASTERISK)
		}

	case sdpParserPLUS:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1038)
			p.Match(sdpParserPLUS)
		}

	case sdpParserDASH:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1039)
			p.Match(sdpParserDASH)
		}

	case sdpParserSLASH:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1040)
			p.Match(sdpParserSLASH)
		}

	case sdpParserEQUALS:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1041)
			p.Match(sdpParserEQUALS)
		}

	case sdpParserQUESTION:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1042)
			p.Match(sdpParserQUESTION)
		}

	case sdpParserCARAT:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1043)
			p.Match(sdpParserCARAT)
		}

	case sdpParserUNDERSCORE:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1044)
			p.Match(sdpParserUNDERSCORE)
		}

	case sdpParserACCENT:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1045)
			p.Match(sdpParserACCENT)
		}

	case sdpParserLEFT_CURLY_BRACE:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1046)
			p.Match(sdpParserLEFT_CURLY_BRACE)
		}

	case sdpParserPIPE:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1047)
			p.Match(sdpParserPIPE)
		}

	case sdpParserRIGHT_CURLY_BRACE:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1048)
			p.Match(sdpParserRIGHT_CURLY_BRACE)
		}

	case sdpParserTILDE:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1049)
			p.Match(sdpParserTILDE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAtomContext is an interface to support dynamic dispatch.
type IAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtomContext differentiates from other interfaces.
	IsAtomContext()
}

type AtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtomContext() *AtomContext {
	var p = new(AtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_atom
	return p
}

func (*AtomContext) IsAtomContext() {}

func NewAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomContext {
	var p = new(AtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_atom

	return p
}

func (s *AtomContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *AtomContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *AtomContext) AllAtext() []IAtextContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAtextContext)(nil)).Elem())
	var tst = make([]IAtextContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAtextContext)
		}
	}

	return tst
}

func (s *AtomContext) Atext(i int) IAtextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtextContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAtextContext)
}

func (s *AtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAtom(s)
	}
}

func (s *AtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAtom(s)
	}
}

func (p *sdpParser) Atom() (localctx IAtomContext) {
	localctx = NewAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, sdpParserRULE_atom)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1052)
			p.Cfws()
		}

	}
	p.SetState(1056)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1055)
				p.Atext()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1058)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())
	}
	p.SetState(1061)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1060)
			p.Cfws()
		}

	}

	return localctx
}

// IDot_atom_textContext is an interface to support dynamic dispatch.
type IDot_atom_textContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_atom_textContext differentiates from other interfaces.
	IsDot_atom_textContext()
}

type Dot_atom_textContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_atom_textContext() *Dot_atom_textContext {
	var p = new(Dot_atom_textContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_dot_atom_text
	return p
}

func (*Dot_atom_textContext) IsDot_atom_textContext() {}

func NewDot_atom_textContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_atom_textContext {
	var p = new(Dot_atom_textContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_dot_atom_text

	return p
}

func (s *Dot_atom_textContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_atom_textContext) AllAtext() []IAtextContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAtextContext)(nil)).Elem())
	var tst = make([]IAtextContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAtextContext)
		}
	}

	return tst
}

func (s *Dot_atom_textContext) Atext(i int) IAtextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtextContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAtextContext)
}

func (s *Dot_atom_textContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Dot_atom_textContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Dot_atom_textContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_atom_textContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_atom_textContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDot_atom_text(s)
	}
}

func (s *Dot_atom_textContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDot_atom_text(s)
	}
}

func (p *sdpParser) Dot_atom_text() (localctx IDot_atom_textContext) {
	localctx = NewDot_atom_textContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, sdpParserRULE_dot_atom_text)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1064)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-5)&-(0x1f+1)) == 0 && ((1<<uint((_la-5)))&((1<<(sdpParserEXCLAMATION-5))|(1<<(sdpParserHASH-5))|(1<<(sdpParserDOLLAR-5))|(1<<(sdpParserPERCENT-5))|(1<<(sdpParserAMPERSAND-5))|(1<<(sdpParserAPOSTROPHE-5))|(1<<(sdpParserASTERISK-5))|(1<<(sdpParserPLUS-5))|(1<<(sdpParserDASH-5))|(1<<(sdpParserSLASH-5))|(1<<(sdpParserZERO-5))|(1<<(sdpParserONE-5))|(1<<(sdpParserTWO-5))|(1<<(sdpParserTHREE-5))|(1<<(sdpParserFOUR-5))|(1<<(sdpParserFIVE-5))|(1<<(sdpParserSIX-5))|(1<<(sdpParserSEVEN-5))|(1<<(sdpParserEIGHT-5))|(1<<(sdpParserNINE-5))|(1<<(sdpParserEQUALS-5))|(1<<(sdpParserQUESTION-5)))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37))|(1<<(sdpParserCARAT-37))|(1<<(sdpParserUNDERSCORE-37))|(1<<(sdpParserACCENT-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69))|(1<<(sdpParserLEFT_CURLY_BRACE-69))|(1<<(sdpParserPIPE-69))|(1<<(sdpParserRIGHT_CURLY_BRACE-69))|(1<<(sdpParserTILDE-69)))) != 0) {
		{
			p.SetState(1063)
			p.Atext()
		}

		p.SetState(1066)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1076)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserPERIOD {
		{
			p.SetState(1068)
			p.Match(sdpParserPERIOD)
		}
		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-5)&-(0x1f+1)) == 0 && ((1<<uint((_la-5)))&((1<<(sdpParserEXCLAMATION-5))|(1<<(sdpParserHASH-5))|(1<<(sdpParserDOLLAR-5))|(1<<(sdpParserPERCENT-5))|(1<<(sdpParserAMPERSAND-5))|(1<<(sdpParserAPOSTROPHE-5))|(1<<(sdpParserASTERISK-5))|(1<<(sdpParserPLUS-5))|(1<<(sdpParserDASH-5))|(1<<(sdpParserSLASH-5))|(1<<(sdpParserZERO-5))|(1<<(sdpParserONE-5))|(1<<(sdpParserTWO-5))|(1<<(sdpParserTHREE-5))|(1<<(sdpParserFOUR-5))|(1<<(sdpParserFIVE-5))|(1<<(sdpParserSIX-5))|(1<<(sdpParserSEVEN-5))|(1<<(sdpParserEIGHT-5))|(1<<(sdpParserNINE-5))|(1<<(sdpParserEQUALS-5))|(1<<(sdpParserQUESTION-5)))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37))|(1<<(sdpParserCARAT-37))|(1<<(sdpParserUNDERSCORE-37))|(1<<(sdpParserACCENT-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69))|(1<<(sdpParserLEFT_CURLY_BRACE-69))|(1<<(sdpParserPIPE-69))|(1<<(sdpParserRIGHT_CURLY_BRACE-69))|(1<<(sdpParserTILDE-69)))) != 0) {
			{
				p.SetState(1069)
				p.Atext()
			}

			p.SetState(1072)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(1078)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDot_atomContext is an interface to support dynamic dispatch.
type IDot_atomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_atomContext differentiates from other interfaces.
	IsDot_atomContext()
}

type Dot_atomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_atomContext() *Dot_atomContext {
	var p = new(Dot_atomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_dot_atom
	return p
}

func (*Dot_atomContext) IsDot_atomContext() {}

func NewDot_atomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_atomContext {
	var p = new(Dot_atomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_dot_atom

	return p
}

func (s *Dot_atomContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_atomContext) Dot_atom_text() IDot_atom_textContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_atom_textContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDot_atom_textContext)
}

func (s *Dot_atomContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Dot_atomContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Dot_atomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_atomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_atomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDot_atom(s)
	}
}

func (s *Dot_atomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDot_atom(s)
	}
}

func (p *sdpParser) Dot_atom() (localctx IDot_atomContext) {
	localctx = NewDot_atomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, sdpParserRULE_dot_atom)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1080)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1079)
			p.Cfws()
		}

	}
	{
		p.SetState(1082)
		p.Dot_atom_text()
	}
	p.SetState(1084)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1083)
			p.Cfws()
		}

	}

	return localctx
}

// ISpecialsContext is an interface to support dynamic dispatch.
type ISpecialsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecialsContext differentiates from other interfaces.
	IsSpecialsContext()
}

type SpecialsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecialsContext() *SpecialsContext {
	var p = new(SpecialsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_specials
	return p
}

func (*SpecialsContext) IsSpecialsContext() {}

func NewSpecialsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpecialsContext {
	var p = new(SpecialsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_specials

	return p
}

func (s *SpecialsContext) GetParser() antlr.Parser { return s.parser }

func (s *SpecialsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *SpecialsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *SpecialsContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *SpecialsContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *SpecialsContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *SpecialsContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *SpecialsContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *SpecialsContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *SpecialsContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *SpecialsContext) BACKSLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, 0)
}

func (s *SpecialsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *SpecialsContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *SpecialsContext) Dquote() IDquoteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDquoteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDquoteContext)
}

func (s *SpecialsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecialsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpecialsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSpecials(s)
	}
}

func (s *SpecialsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSpecials(s)
	}
}

func (p *sdpParser) Specials() (localctx ISpecialsContext) {
	localctx = NewSpecialsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, sdpParserRULE_specials)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1099)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1086)
			p.Match(sdpParserLEFT_PAREN)
		}

	case sdpParserRIGHT_PAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1087)
			p.Match(sdpParserRIGHT_PAREN)
		}

	case sdpParserLESS_THAN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1088)
			p.Match(sdpParserLESS_THAN)
		}

	case sdpParserGREATER_THAN:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1089)
			p.Match(sdpParserGREATER_THAN)
		}

	case sdpParserLEFT_BRACE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1090)
			p.Match(sdpParserLEFT_BRACE)
		}

	case sdpParserRIGHT_BRACE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1091)
			p.Match(sdpParserRIGHT_BRACE)
		}

	case sdpParserCOLON:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1092)
			p.Match(sdpParserCOLON)
		}

	case sdpParserSEMICOLON:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1093)
			p.Match(sdpParserSEMICOLON)
		}

	case sdpParserAT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1094)
			p.Match(sdpParserAT)
		}

	case sdpParserBACKSLASH:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1095)
			p.Match(sdpParserBACKSLASH)
		}

	case sdpParserCOMMA:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1096)
			p.Match(sdpParserCOMMA)
		}

	case sdpParserPERIOD:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1097)
			p.Match(sdpParserPERIOD)
		}

	case sdpParserQUOTE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1098)
			p.Dquote()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQtextContext is an interface to support dynamic dispatch.
type IQtextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQtextContext differentiates from other interfaces.
	IsQtextContext()
}

type QtextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQtextContext() *QtextContext {
	var p = new(QtextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_qtext
	return p
}

func (*QtextContext) IsQtextContext() {}

func NewQtextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QtextContext {
	var p = new(QtextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_qtext

	return p
}

func (s *QtextContext) GetParser() antlr.Parser { return s.parser }

func (s *QtextContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *QtextContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *QtextContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *QtextContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *QtextContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *QtextContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *QtextContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *QtextContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *QtextContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *QtextContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *QtextContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *QtextContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *QtextContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *QtextContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *QtextContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *QtextContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *QtextContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *QtextContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *QtextContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *QtextContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *QtextContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *QtextContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *QtextContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *QtextContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *QtextContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *QtextContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *QtextContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *QtextContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *QtextContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *QtextContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *QtextContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *QtextContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *QtextContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *QtextContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *QtextContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *QtextContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *QtextContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *QtextContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *QtextContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *QtextContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *QtextContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *QtextContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *QtextContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *QtextContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *QtextContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *QtextContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *QtextContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *QtextContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *QtextContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *QtextContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *QtextContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *QtextContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *QtextContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *QtextContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *QtextContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *QtextContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *QtextContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *QtextContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *QtextContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *QtextContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *QtextContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *QtextContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *QtextContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *QtextContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *QtextContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *QtextContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *QtextContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *QtextContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *QtextContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *QtextContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *QtextContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *QtextContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *QtextContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *QtextContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *QtextContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *QtextContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *QtextContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *QtextContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *QtextContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *QtextContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *QtextContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *QtextContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *QtextContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *QtextContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *QtextContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *QtextContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *QtextContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *QtextContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *QtextContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *QtextContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *QtextContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *QtextContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *QtextContext) Obs_qtext() IObs_qtextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_qtextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_qtextContext)
}

func (s *QtextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QtextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QtextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterQtext(s)
	}
}

func (s *QtextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitQtext(s)
	}
}

func (p *sdpParser) Qtext() (localctx IQtextContext) {
	localctx = NewQtextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, sdpParserRULE_qtext)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1105)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserEXCLAMATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1101)
			p.Match(sdpParserEXCLAMATION)
		}

	case sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1102)
			_la = p.GetTokenStream().LA(1)

			if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(sdpParserLESS_THAN-32))|(1<<(sdpParserEQUALS-32))|(1<<(sdpParserGREATER_THAN-32))|(1<<(sdpParserQUESTION-32))|(1<<(sdpParserAT-32))|(1<<(sdpParserCAP_A-32))|(1<<(sdpParserCAP_B-32))|(1<<(sdpParserCAP_C-32))|(1<<(sdpParserCAP_D-32))|(1<<(sdpParserCAP_E-32))|(1<<(sdpParserCAP_F-32))|(1<<(sdpParserCAP_G-32))|(1<<(sdpParserCAP_H-32))|(1<<(sdpParserCAP_I-32))|(1<<(sdpParserCAP_J-32))|(1<<(sdpParserCAP_K-32))|(1<<(sdpParserCAP_L-32))|(1<<(sdpParserCAP_M-32))|(1<<(sdpParserCAP_N-32))|(1<<(sdpParserCAP_O-32))|(1<<(sdpParserCAP_P-32))|(1<<(sdpParserCAP_Q-32))|(1<<(sdpParserCAP_R-32))|(1<<(sdpParserCAP_S-32))|(1<<(sdpParserCAP_T-32))|(1<<(sdpParserCAP_U-32))|(1<<(sdpParserCAP_V-32))|(1<<(sdpParserCAP_W-32))|(1<<(sdpParserCAP_X-32))|(1<<(sdpParserCAP_Y-32))|(1<<(sdpParserCAP_Z-32))|(1<<(sdpParserLEFT_BRACE-32)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1103)
			_la = p.GetTokenStream().LA(1)

			if !((((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || _la == sdpParserRIGHT_CURLY_BRACE || _la == sdpParserTILDE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1104)
			p.Obs_qtext()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQcontentContext is an interface to support dynamic dispatch.
type IQcontentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQcontentContext differentiates from other interfaces.
	IsQcontentContext()
}

type QcontentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQcontentContext() *QcontentContext {
	var p = new(QcontentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_qcontent
	return p
}

func (*QcontentContext) IsQcontentContext() {}

func NewQcontentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QcontentContext {
	var p = new(QcontentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_qcontent

	return p
}

func (s *QcontentContext) GetParser() antlr.Parser { return s.parser }

func (s *QcontentContext) Qtext() IQtextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQtextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQtextContext)
}

func (s *QcontentContext) Quoted_pair() IQuoted_pairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuoted_pairContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuoted_pairContext)
}

func (s *QcontentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QcontentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QcontentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterQcontent(s)
	}
}

func (s *QcontentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitQcontent(s)
	}
}

func (p *sdpParser) Qcontent() (localctx IQcontentContext) {
	localctx = NewQcontentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, sdpParserRULE_qcontent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1109)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserEXCLAMATION, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE, sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE, sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1107)
			p.Qtext()
		}

	case sdpParserBACKSLASH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1108)
			p.Quoted_pair()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQuoted_stringContext is an interface to support dynamic dispatch.
type IQuoted_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuoted_stringContext differentiates from other interfaces.
	IsQuoted_stringContext()
}

type Quoted_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuoted_stringContext() *Quoted_stringContext {
	var p = new(Quoted_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_quoted_string
	return p
}

func (*Quoted_stringContext) IsQuoted_stringContext() {}

func NewQuoted_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Quoted_stringContext {
	var p = new(Quoted_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_quoted_string

	return p
}

func (s *Quoted_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Quoted_stringContext) AllDquote() []IDquoteContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDquoteContext)(nil)).Elem())
	var tst = make([]IDquoteContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDquoteContext)
		}
	}

	return tst
}

func (s *Quoted_stringContext) Dquote(i int) IDquoteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDquoteContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDquoteContext)
}

func (s *Quoted_stringContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Quoted_stringContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Quoted_stringContext) AllQcontent() []IQcontentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQcontentContext)(nil)).Elem())
	var tst = make([]IQcontentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQcontentContext)
		}
	}

	return tst
}

func (s *Quoted_stringContext) Qcontent(i int) IQcontentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQcontentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQcontentContext)
}

func (s *Quoted_stringContext) AllFws() []IFwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFwsContext)(nil)).Elem())
	var tst = make([]IFwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFwsContext)
		}
	}

	return tst
}

func (s *Quoted_stringContext) Fws(i int) IFwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFwsContext)
}

func (s *Quoted_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Quoted_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Quoted_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterQuoted_string(s)
	}
}

func (s *Quoted_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitQuoted_string(s)
	}
}

func (p *sdpParser) Quoted_string() (localctx IQuoted_stringContext) {
	localctx = NewQuoted_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, sdpParserRULE_quoted_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1112)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1111)
			p.Cfws()
		}

	}
	{
		p.SetState(1114)
		p.Dquote()
	}
	p.SetState(1121)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1116)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
				{
					p.SetState(1115)
					p.Fws()
				}

			}
			{
				p.SetState(1118)
				p.Qcontent()
			}

		}
		p.SetState(1123)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())
	}
	p.SetState(1125)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
		{
			p.SetState(1124)
			p.Fws()
		}

	}
	{
		p.SetState(1127)
		p.Dquote()
	}
	p.SetState(1129)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1128)
			p.Cfws()
		}

	}

	return localctx
}

// IWordContext is an interface to support dynamic dispatch.
type IWordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWordContext differentiates from other interfaces.
	IsWordContext()
}

type WordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWordContext() *WordContext {
	var p = new(WordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_word
	return p
}

func (*WordContext) IsWordContext() {}

func NewWordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WordContext {
	var p = new(WordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_word

	return p
}

func (s *WordContext) GetParser() antlr.Parser { return s.parser }

func (s *WordContext) Atom() IAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *WordContext) Quoted_string() IQuoted_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuoted_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuoted_stringContext)
}

func (s *WordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterWord(s)
	}
}

func (s *WordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitWord(s)
	}
}

func (p *sdpParser) Word() (localctx IWordContext) {
	localctx = NewWordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, sdpParserRULE_word)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1133)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1131)
			p.Atom()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1132)
			p.Quoted_string()
		}

	}

	return localctx
}

// IPhraseContext is an interface to support dynamic dispatch.
type IPhraseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPhraseContext differentiates from other interfaces.
	IsPhraseContext()
}

type PhraseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPhraseContext() *PhraseContext {
	var p = new(PhraseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_phrase
	return p
}

func (*PhraseContext) IsPhraseContext() {}

func NewPhraseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PhraseContext {
	var p = new(PhraseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_phrase

	return p
}

func (s *PhraseContext) GetParser() antlr.Parser { return s.parser }

func (s *PhraseContext) AllWord() []IWordContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWordContext)(nil)).Elem())
	var tst = make([]IWordContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWordContext)
		}
	}

	return tst
}

func (s *PhraseContext) Word(i int) IWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWordContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWordContext)
}

func (s *PhraseContext) Obs_phrase() IObs_phraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_phraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_phraseContext)
}

func (s *PhraseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PhraseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PhraseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPhrase(s)
	}
}

func (s *PhraseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPhrase(s)
	}
}

func (p *sdpParser) Phrase() (localctx IPhraseContext) {
	localctx = NewPhraseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, sdpParserRULE_phrase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1135)
					p.Word()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1138)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1140)
			p.Obs_phrase()
		}

	}

	return localctx
}

// IQuoted_pairContext is an interface to support dynamic dispatch.
type IQuoted_pairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuoted_pairContext differentiates from other interfaces.
	IsQuoted_pairContext()
}

type Quoted_pairContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuoted_pairContext() *Quoted_pairContext {
	var p = new(Quoted_pairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_quoted_pair
	return p
}

func (*Quoted_pairContext) IsQuoted_pairContext() {}

func NewQuoted_pairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Quoted_pairContext {
	var p = new(Quoted_pairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_quoted_pair

	return p
}

func (s *Quoted_pairContext) GetParser() antlr.Parser { return s.parser }

func (s *Quoted_pairContext) BACKSLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, 0)
}

func (s *Quoted_pairContext) Vchar() IVcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVcharContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVcharContext)
}

func (s *Quoted_pairContext) Wsp() IWspContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWspContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWspContext)
}

func (s *Quoted_pairContext) Obs_qp() IObs_qpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_qpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_qpContext)
}

func (s *Quoted_pairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Quoted_pairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Quoted_pairContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterQuoted_pair(s)
	}
}

func (s *Quoted_pairContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitQuoted_pair(s)
	}
}

func (p *sdpParser) Quoted_pair() (localctx IQuoted_pairContext) {
	localctx = NewQuoted_pairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, sdpParserRULE_quoted_pair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1149)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1143)
			p.Match(sdpParserBACKSLASH)
		}
		p.SetState(1146)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE, sdpParserBACKSLASH, sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE:
			{
				p.SetState(1144)
				p.Vchar()
			}

		case sdpParserTAB, sdpParserSPACE:
			{
				p.SetState(1145)
				p.Wsp()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1148)
			p.Obs_qp()
		}

	}

	return localctx
}

// IFwsContext is an interface to support dynamic dispatch.
type IFwsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFwsContext differentiates from other interfaces.
	IsFwsContext()
}

type FwsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFwsContext() *FwsContext {
	var p = new(FwsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_fws
	return p
}

func (*FwsContext) IsFwsContext() {}

func NewFwsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FwsContext {
	var p = new(FwsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_fws

	return p
}

func (s *FwsContext) GetParser() antlr.Parser { return s.parser }

func (s *FwsContext) Crlf() ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *FwsContext) AllWsp() []IWspContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWspContext)(nil)).Elem())
	var tst = make([]IWspContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWspContext)
		}
	}

	return tst
}

func (s *FwsContext) Wsp(i int) IWspContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWspContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWspContext)
}

func (s *FwsContext) Obs_fws() IObs_fwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_fwsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_fwsContext)
}

func (s *FwsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FwsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FwsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterFws(s)
	}
}

func (s *FwsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitFws(s)
	}
}

func (p *sdpParser) Fws() (localctx IFwsContext) {
	localctx = NewFwsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, sdpParserRULE_fws)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1166)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1158)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
			p.SetState(1154)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == sdpParserTAB || _la == sdpParserSPACE {
				{
					p.SetState(1151)
					p.Wsp()
				}

				p.SetState(1156)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1157)
				p.Crlf()
			}

		}
		p.SetState(1161)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1160)
					p.Wsp()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1163)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1165)
			p.Obs_fws()
		}

	}

	return localctx
}

// ICtextContext is an interface to support dynamic dispatch.
type ICtextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCtextContext differentiates from other interfaces.
	IsCtextContext()
}

type CtextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCtextContext() *CtextContext {
	var p = new(CtextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ctext
	return p
}

func (*CtextContext) IsCtextContext() {}

func NewCtextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CtextContext {
	var p = new(CtextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ctext

	return p
}

func (s *CtextContext) GetParser() antlr.Parser { return s.parser }

func (s *CtextContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *CtextContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, 0)
}

func (s *CtextContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *CtextContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *CtextContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *CtextContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *CtextContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *CtextContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *CtextContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *CtextContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *CtextContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *CtextContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *CtextContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *CtextContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *CtextContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *CtextContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *CtextContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *CtextContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *CtextContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *CtextContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *CtextContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *CtextContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *CtextContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *CtextContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *CtextContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *CtextContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *CtextContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *CtextContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *CtextContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *CtextContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *CtextContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *CtextContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *CtextContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *CtextContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *CtextContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *CtextContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *CtextContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *CtextContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *CtextContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *CtextContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *CtextContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *CtextContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *CtextContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *CtextContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *CtextContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *CtextContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *CtextContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *CtextContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *CtextContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *CtextContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *CtextContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *CtextContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *CtextContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *CtextContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *CtextContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *CtextContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *CtextContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *CtextContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *CtextContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *CtextContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *CtextContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *CtextContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *CtextContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *CtextContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *CtextContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *CtextContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *CtextContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *CtextContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *CtextContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *CtextContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *CtextContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *CtextContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *CtextContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *CtextContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *CtextContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *CtextContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *CtextContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *CtextContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *CtextContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *CtextContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *CtextContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *CtextContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *CtextContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *CtextContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *CtextContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *CtextContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *CtextContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *CtextContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *CtextContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *CtextContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *CtextContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *CtextContext) Obs_ctext() IObs_ctextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_ctextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_ctextContext)
}

func (s *CtextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CtextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterCtext(s)
	}
}

func (s *CtextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitCtext(s)
	}
}

func (p *sdpParser) Ctext() (localctx ICtextContext) {
	localctx = NewCtextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, sdpParserRULE_ctext)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1172)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1168)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserQUOTE)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1169)
			_la = p.GetTokenStream().LA(1)

			if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(sdpParserLESS_THAN-32))|(1<<(sdpParserEQUALS-32))|(1<<(sdpParserGREATER_THAN-32))|(1<<(sdpParserQUESTION-32))|(1<<(sdpParserAT-32))|(1<<(sdpParserCAP_A-32))|(1<<(sdpParserCAP_B-32))|(1<<(sdpParserCAP_C-32))|(1<<(sdpParserCAP_D-32))|(1<<(sdpParserCAP_E-32))|(1<<(sdpParserCAP_F-32))|(1<<(sdpParserCAP_G-32))|(1<<(sdpParserCAP_H-32))|(1<<(sdpParserCAP_I-32))|(1<<(sdpParserCAP_J-32))|(1<<(sdpParserCAP_K-32))|(1<<(sdpParserCAP_L-32))|(1<<(sdpParserCAP_M-32))|(1<<(sdpParserCAP_N-32))|(1<<(sdpParserCAP_O-32))|(1<<(sdpParserCAP_P-32))|(1<<(sdpParserCAP_Q-32))|(1<<(sdpParserCAP_R-32))|(1<<(sdpParserCAP_S-32))|(1<<(sdpParserCAP_T-32))|(1<<(sdpParserCAP_U-32))|(1<<(sdpParserCAP_V-32))|(1<<(sdpParserCAP_W-32))|(1<<(sdpParserCAP_X-32))|(1<<(sdpParserCAP_Y-32))|(1<<(sdpParserCAP_Z-32))|(1<<(sdpParserLEFT_BRACE-32)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1170)
			_la = p.GetTokenStream().LA(1)

			if !((((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || _la == sdpParserRIGHT_CURLY_BRACE || _la == sdpParserTILDE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1171)
			p.Obs_ctext()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICcontentContext is an interface to support dynamic dispatch.
type ICcontentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCcontentContext differentiates from other interfaces.
	IsCcontentContext()
}

type CcontentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCcontentContext() *CcontentContext {
	var p = new(CcontentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ccontent
	return p
}

func (*CcontentContext) IsCcontentContext() {}

func NewCcontentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CcontentContext {
	var p = new(CcontentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ccontent

	return p
}

func (s *CcontentContext) GetParser() antlr.Parser { return s.parser }

func (s *CcontentContext) Ctext() ICtextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICtextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICtextContext)
}

func (s *CcontentContext) Quoted_pair() IQuoted_pairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuoted_pairContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuoted_pairContext)
}

func (s *CcontentContext) Comment() ICommentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommentContext)
}

func (s *CcontentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CcontentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CcontentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterCcontent(s)
	}
}

func (s *CcontentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitCcontent(s)
	}
}

func (p *sdpParser) Ccontent() (localctx ICcontentContext) {
	localctx = NewCcontentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, sdpParserRULE_ccontent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1177)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE, sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE, sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1174)
			p.Ctext()
		}

	case sdpParserBACKSLASH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1175)
			p.Quoted_pair()
		}

	case sdpParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1176)
			p.Comment()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICommentContext is an interface to support dynamic dispatch.
type ICommentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommentContext differentiates from other interfaces.
	IsCommentContext()
}

type CommentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommentContext() *CommentContext {
	var p = new(CommentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_comment
	return p
}

func (*CommentContext) IsCommentContext() {}

func NewCommentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommentContext {
	var p = new(CommentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_comment

	return p
}

func (s *CommentContext) GetParser() antlr.Parser { return s.parser }

func (s *CommentContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *CommentContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *CommentContext) AllCcontent() []ICcontentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICcontentContext)(nil)).Elem())
	var tst = make([]ICcontentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICcontentContext)
		}
	}

	return tst
}

func (s *CommentContext) Ccontent(i int) ICcontentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICcontentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICcontentContext)
}

func (s *CommentContext) AllFws() []IFwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFwsContext)(nil)).Elem())
	var tst = make([]IFwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFwsContext)
		}
	}

	return tst
}

func (s *CommentContext) Fws(i int) IFwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFwsContext)
}

func (s *CommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterComment(s)
	}
}

func (s *CommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitComment(s)
	}
}

func (p *sdpParser) Comment() (localctx ICommentContext) {
	localctx = NewCommentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, sdpParserRULE_comment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1179)
		p.Match(sdpParserLEFT_PAREN)
	}
	p.SetState(1186)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1181)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
				{
					p.SetState(1180)
					p.Fws()
				}

			}
			{
				p.SetState(1183)
				p.Ccontent()
			}

		}
		p.SetState(1188)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())
	}
	p.SetState(1190)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
		{
			p.SetState(1189)
			p.Fws()
		}

	}
	{
		p.SetState(1192)
		p.Match(sdpParserRIGHT_PAREN)
	}

	return localctx
}

// ICfwsContext is an interface to support dynamic dispatch.
type ICfwsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCfwsContext differentiates from other interfaces.
	IsCfwsContext()
}

type CfwsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCfwsContext() *CfwsContext {
	var p = new(CfwsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_cfws
	return p
}

func (*CfwsContext) IsCfwsContext() {}

func NewCfwsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CfwsContext {
	var p = new(CfwsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_cfws

	return p
}

func (s *CfwsContext) GetParser() antlr.Parser { return s.parser }

func (s *CfwsContext) AllComment() []ICommentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommentContext)(nil)).Elem())
	var tst = make([]ICommentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommentContext)
		}
	}

	return tst
}

func (s *CfwsContext) Comment(i int) ICommentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommentContext)
}

func (s *CfwsContext) AllFws() []IFwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFwsContext)(nil)).Elem())
	var tst = make([]IFwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFwsContext)
		}
	}

	return tst
}

func (s *CfwsContext) Fws(i int) IFwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFwsContext)
}

func (s *CfwsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CfwsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CfwsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterCfws(s)
	}
}

func (s *CfwsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitCfws(s)
	}
}

func (p *sdpParser) Cfws() (localctx ICfwsContext) {
	localctx = NewCfwsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, sdpParserRULE_cfws)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1198)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(1195)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
					{
						p.SetState(1194)
						p.Fws()
					}

				}
				{
					p.SetState(1197)
					p.Comment()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1200)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())
		}
		p.SetState(1203)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1202)
				p.Fws()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1205)
			p.Fws()
		}

	}

	return localctx
}

// IObs_ctextContext is an interface to support dynamic dispatch.
type IObs_ctextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_ctextContext differentiates from other interfaces.
	IsObs_ctextContext()
}

type Obs_ctextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_ctextContext() *Obs_ctextContext {
	var p = new(Obs_ctextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_ctext
	return p
}

func (*Obs_ctextContext) IsObs_ctextContext() {}

func NewObs_ctextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_ctextContext {
	var p = new(Obs_ctextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_ctext

	return p
}

func (s *Obs_ctextContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_ctextContext) Obs_no_ws_ctl() IObs_no_ws_ctlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_no_ws_ctlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_no_ws_ctlContext)
}

func (s *Obs_ctextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_ctextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_ctextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_ctext(s)
	}
}

func (s *Obs_ctextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_ctext(s)
	}
}

func (p *sdpParser) Obs_ctext() (localctx IObs_ctextContext) {
	localctx = NewObs_ctextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, sdpParserRULE_obs_ctext)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1208)
		p.Obs_no_ws_ctl()
	}

	return localctx
}

// IObs_qtextContext is an interface to support dynamic dispatch.
type IObs_qtextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_qtextContext differentiates from other interfaces.
	IsObs_qtextContext()
}

type Obs_qtextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_qtextContext() *Obs_qtextContext {
	var p = new(Obs_qtextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_qtext
	return p
}

func (*Obs_qtextContext) IsObs_qtextContext() {}

func NewObs_qtextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_qtextContext {
	var p = new(Obs_qtextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_qtext

	return p
}

func (s *Obs_qtextContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_qtextContext) Obs_no_ws_ctl() IObs_no_ws_ctlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_no_ws_ctlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_no_ws_ctlContext)
}

func (s *Obs_qtextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_qtextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_qtextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_qtext(s)
	}
}

func (s *Obs_qtextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_qtext(s)
	}
}

func (p *sdpParser) Obs_qtext() (localctx IObs_qtextContext) {
	localctx = NewObs_qtextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, sdpParserRULE_obs_qtext)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1210)
		p.Obs_no_ws_ctl()
	}

	return localctx
}

// IObs_utextContext is an interface to support dynamic dispatch.
type IObs_utextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_utextContext differentiates from other interfaces.
	IsObs_utextContext()
}

type Obs_utextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_utextContext() *Obs_utextContext {
	var p = new(Obs_utextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_utext
	return p
}

func (*Obs_utextContext) IsObs_utextContext() {}

func NewObs_utextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_utextContext {
	var p = new(Obs_utextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_utext

	return p
}

func (s *Obs_utextContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_utextContext) U_0000() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0000, 0)
}

func (s *Obs_utextContext) Obs_no_ws_ctl() IObs_no_ws_ctlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_no_ws_ctlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_no_ws_ctlContext)
}

func (s *Obs_utextContext) Vchar() IVcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVcharContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVcharContext)
}

func (s *Obs_utextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_utextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_utextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_utext(s)
	}
}

func (s *Obs_utextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_utext(s)
	}
}

func (p *sdpParser) Obs_utext() (localctx IObs_utextContext) {
	localctx = NewObs_utextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, sdpParserRULE_obs_utext)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1215)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserU_0000:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1212)
			p.Match(sdpParserU_0000)
		}

	case sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1213)
			p.Obs_no_ws_ctl()
		}

	case sdpParserEXCLAMATION, sdpParserQUOTE, sdpParserHASH, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserSLASH, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserLESS_THAN, sdpParserEQUALS, sdpParserGREATER_THAN, sdpParserQUESTION, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserLEFT_BRACE, sdpParserBACKSLASH, sdpParserRIGHT_BRACE, sdpParserCARAT, sdpParserUNDERSCORE, sdpParserACCENT, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserLEFT_CURLY_BRACE, sdpParserPIPE, sdpParserRIGHT_CURLY_BRACE, sdpParserTILDE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1214)
			p.Vchar()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IObs_qpContext is an interface to support dynamic dispatch.
type IObs_qpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_qpContext differentiates from other interfaces.
	IsObs_qpContext()
}

type Obs_qpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_qpContext() *Obs_qpContext {
	var p = new(Obs_qpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_qp
	return p
}

func (*Obs_qpContext) IsObs_qpContext() {}

func NewObs_qpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_qpContext {
	var p = new(Obs_qpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_qp

	return p
}

func (s *Obs_qpContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_qpContext) BACKSLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, 0)
}

func (s *Obs_qpContext) U_0000() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0000, 0)
}

func (s *Obs_qpContext) Obs_no_ws_ctl() IObs_no_ws_ctlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_no_ws_ctlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_no_ws_ctlContext)
}

func (s *Obs_qpContext) Lf() ILfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILfContext)
}

func (s *Obs_qpContext) Cr() ICrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrContext)
}

func (s *Obs_qpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_qpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_qpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_qp(s)
	}
}

func (s *Obs_qpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_qp(s)
	}
}

func (p *sdpParser) Obs_qp() (localctx IObs_qpContext) {
	localctx = NewObs_qpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, sdpParserRULE_obs_qp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1217)
		p.Match(sdpParserBACKSLASH)
	}
	p.SetState(1222)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserU_0000:
		{
			p.SetState(1218)
			p.Match(sdpParserU_0000)
		}

	case sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		{
			p.SetState(1219)
			p.Obs_no_ws_ctl()
		}

	case sdpParserLF:
		{
			p.SetState(1220)
			p.Lf()
		}

	case sdpParserCR:
		{
			p.SetState(1221)
			p.Cr()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IObs_phraseContext is an interface to support dynamic dispatch.
type IObs_phraseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_phraseContext differentiates from other interfaces.
	IsObs_phraseContext()
}

type Obs_phraseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_phraseContext() *Obs_phraseContext {
	var p = new(Obs_phraseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_phrase
	return p
}

func (*Obs_phraseContext) IsObs_phraseContext() {}

func NewObs_phraseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_phraseContext {
	var p = new(Obs_phraseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_phrase

	return p
}

func (s *Obs_phraseContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_phraseContext) AllWord() []IWordContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWordContext)(nil)).Elem())
	var tst = make([]IWordContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWordContext)
		}
	}

	return tst
}

func (s *Obs_phraseContext) Word(i int) IWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWordContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWordContext)
}

func (s *Obs_phraseContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Obs_phraseContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Obs_phraseContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Obs_phraseContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Obs_phraseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_phraseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_phraseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_phrase(s)
	}
}

func (s *Obs_phraseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_phrase(s)
	}
}

func (p *sdpParser) Obs_phrase() (localctx IObs_phraseContext) {
	localctx = NewObs_phraseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, sdpParserRULE_obs_phrase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1224)
		p.Word()
	}
	p.SetState(1230)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1228)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1225)
					p.Word()
				}

			case 2:
				{
					p.SetState(1226)
					p.Match(sdpParserPERIOD)
				}

			case 3:
				{
					p.SetState(1227)
					p.Cfws()
				}

			}

		}
		p.SetState(1232)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())
	}

	return localctx
}

// IObs_phrase_listContext is an interface to support dynamic dispatch.
type IObs_phrase_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_phrase_listContext differentiates from other interfaces.
	IsObs_phrase_listContext()
}

type Obs_phrase_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_phrase_listContext() *Obs_phrase_listContext {
	var p = new(Obs_phrase_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_phrase_list
	return p
}

func (*Obs_phrase_listContext) IsObs_phrase_listContext() {}

func NewObs_phrase_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_phrase_listContext {
	var p = new(Obs_phrase_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_phrase_list

	return p
}

func (s *Obs_phrase_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_phrase_listContext) AllPhrase() []IPhraseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPhraseContext)(nil)).Elem())
	var tst = make([]IPhraseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPhraseContext)
		}
	}

	return tst
}

func (s *Obs_phrase_listContext) Phrase(i int) IPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPhraseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPhraseContext)
}

func (s *Obs_phrase_listContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Obs_phrase_listContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Obs_phrase_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Obs_phrase_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Obs_phrase_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_phrase_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_phrase_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_phrase_list(s)
	}
}

func (s *Obs_phrase_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_phrase_list(s)
	}
}

func (p *sdpParser) Obs_phrase_list() (localctx IObs_phrase_listContext) {
	localctx = NewObs_phrase_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, sdpParserRULE_obs_phrase_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1235)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1233)
			p.Phrase()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1234)
			p.Cfws()
		}

	}
	p.SetState(1244)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserCOMMA {
		{
			p.SetState(1237)
			p.Match(sdpParserCOMMA)
		}
		p.SetState(1240)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1238)
				p.Phrase()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1239)
				p.Cfws()
			}

		}

		p.SetState(1246)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IObs_angle_addrContext is an interface to support dynamic dispatch.
type IObs_angle_addrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_angle_addrContext differentiates from other interfaces.
	IsObs_angle_addrContext()
}

type Obs_angle_addrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_angle_addrContext() *Obs_angle_addrContext {
	var p = new(Obs_angle_addrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_angle_addr
	return p
}

func (*Obs_angle_addrContext) IsObs_angle_addrContext() {}

func NewObs_angle_addrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_angle_addrContext {
	var p = new(Obs_angle_addrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_angle_addr

	return p
}

func (s *Obs_angle_addrContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_angle_addrContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *Obs_angle_addrContext) Obs_route() IObs_routeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_routeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_routeContext)
}

func (s *Obs_angle_addrContext) Addr_spec() IAddr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddr_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddr_specContext)
}

func (s *Obs_angle_addrContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *Obs_angle_addrContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Obs_angle_addrContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Obs_angle_addrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_angle_addrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_angle_addrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_angle_addr(s)
	}
}

func (s *Obs_angle_addrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_angle_addr(s)
	}
}

func (p *sdpParser) Obs_angle_addr() (localctx IObs_angle_addrContext) {
	localctx = NewObs_angle_addrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, sdpParserRULE_obs_angle_addr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1248)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1247)
			p.Cfws()
		}

	}
	{
		p.SetState(1250)
		p.Match(sdpParserLESS_THAN)
	}
	{
		p.SetState(1251)
		p.Obs_route()
	}
	{
		p.SetState(1252)
		p.Addr_spec()
	}
	{
		p.SetState(1253)
		p.Match(sdpParserGREATER_THAN)
	}
	p.SetState(1255)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1254)
			p.Cfws()
		}

	}

	return localctx
}

// IObs_routeContext is an interface to support dynamic dispatch.
type IObs_routeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_routeContext differentiates from other interfaces.
	IsObs_routeContext()
}

type Obs_routeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_routeContext() *Obs_routeContext {
	var p = new(Obs_routeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_route
	return p
}

func (*Obs_routeContext) IsObs_routeContext() {}

func NewObs_routeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_routeContext {
	var p = new(Obs_routeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_route

	return p
}

func (s *Obs_routeContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_routeContext) Obs_domain_list() IObs_domain_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_domain_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_domain_listContext)
}

func (s *Obs_routeContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Obs_routeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_routeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_routeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_route(s)
	}
}

func (s *Obs_routeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_route(s)
	}
}

func (p *sdpParser) Obs_route() (localctx IObs_routeContext) {
	localctx = NewObs_routeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, sdpParserRULE_obs_route)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1257)
		p.Obs_domain_list()
	}
	{
		p.SetState(1258)
		p.Match(sdpParserCOLON)
	}

	return localctx
}

// IObs_domain_listContext is an interface to support dynamic dispatch.
type IObs_domain_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_domain_listContext differentiates from other interfaces.
	IsObs_domain_listContext()
}

type Obs_domain_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_domain_listContext() *Obs_domain_listContext {
	var p = new(Obs_domain_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_domain_list
	return p
}

func (*Obs_domain_listContext) IsObs_domain_listContext() {}

func NewObs_domain_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_domain_listContext {
	var p = new(Obs_domain_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_domain_list

	return p
}

func (s *Obs_domain_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_domain_listContext) AllAT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserAT)
}

func (s *Obs_domain_listContext) AT(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserAT, i)
}

func (s *Obs_domain_listContext) AllDomain() []IDomainContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDomainContext)(nil)).Elem())
	var tst = make([]IDomainContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDomainContext)
		}
	}

	return tst
}

func (s *Obs_domain_listContext) Domain(i int) IDomainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDomainContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDomainContext)
}

func (s *Obs_domain_listContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Obs_domain_listContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Obs_domain_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Obs_domain_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Obs_domain_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_domain_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_domain_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_domain_list(s)
	}
}

func (s *Obs_domain_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_domain_list(s)
	}
}

func (p *sdpParser) Obs_domain_list() (localctx IObs_domain_listContext) {
	localctx = NewObs_domain_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, sdpParserRULE_obs_domain_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserCOMMA))) != 0 {
		p.SetState(1262)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserTAB, sdpParserCR, sdpParserSPACE, sdpParserLEFT_PAREN:
			{
				p.SetState(1260)
				p.Cfws()
			}

		case sdpParserCOMMA:
			{
				p.SetState(1261)
				p.Match(sdpParserCOMMA)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1267)
		p.Match(sdpParserAT)
	}
	{
		p.SetState(1268)
		p.Domain()
	}
	p.SetState(1279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserCOMMA {
		{
			p.SetState(1269)
			p.Match(sdpParserCOMMA)
		}
		p.SetState(1271)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
			{
				p.SetState(1270)
				p.Cfws()
			}

		}
		p.SetState(1275)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == sdpParserAT {
			{
				p.SetState(1273)
				p.Match(sdpParserAT)
			}
			{
				p.SetState(1274)
				p.Domain()
			}

		}

		p.SetState(1281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IObs_mbox_listContext is an interface to support dynamic dispatch.
type IObs_mbox_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_mbox_listContext differentiates from other interfaces.
	IsObs_mbox_listContext()
}

type Obs_mbox_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_mbox_listContext() *Obs_mbox_listContext {
	var p = new(Obs_mbox_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_mbox_list
	return p
}

func (*Obs_mbox_listContext) IsObs_mbox_listContext() {}

func NewObs_mbox_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_mbox_listContext {
	var p = new(Obs_mbox_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_mbox_list

	return p
}

func (s *Obs_mbox_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_mbox_listContext) AllMailbox() []IMailboxContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMailboxContext)(nil)).Elem())
	var tst = make([]IMailboxContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMailboxContext)
		}
	}

	return tst
}

func (s *Obs_mbox_listContext) Mailbox(i int) IMailboxContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMailboxContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMailboxContext)
}

func (s *Obs_mbox_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Obs_mbox_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Obs_mbox_listContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Obs_mbox_listContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Obs_mbox_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_mbox_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_mbox_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_mbox_list(s)
	}
}

func (s *Obs_mbox_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_mbox_list(s)
	}
}

func (p *sdpParser) Obs_mbox_list() (localctx IObs_mbox_listContext) {
	localctx = NewObs_mbox_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, sdpParserRULE_obs_mbox_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1288)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1283)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
				{
					p.SetState(1282)
					p.Cfws()
				}

			}
			{
				p.SetState(1285)
				p.Match(sdpParserCOMMA)
			}

		}
		p.SetState(1290)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())
	}
	{
		p.SetState(1291)
		p.Mailbox()
	}
	p.SetState(1299)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserCOMMA {
		{
			p.SetState(1292)
			p.Match(sdpParserCOMMA)
		}
		p.SetState(1295)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1293)
				p.Mailbox()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1294)
				p.Cfws()
			}

		}

		p.SetState(1301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IObs_addr_listContext is an interface to support dynamic dispatch.
type IObs_addr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_addr_listContext differentiates from other interfaces.
	IsObs_addr_listContext()
}

type Obs_addr_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_addr_listContext() *Obs_addr_listContext {
	var p = new(Obs_addr_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_addr_list
	return p
}

func (*Obs_addr_listContext) IsObs_addr_listContext() {}

func NewObs_addr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_addr_listContext {
	var p = new(Obs_addr_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_addr_list

	return p
}

func (s *Obs_addr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_addr_listContext) AllAddress() []IAddressContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAddressContext)(nil)).Elem())
	var tst = make([]IAddressContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAddressContext)
		}
	}

	return tst
}

func (s *Obs_addr_listContext) Address(i int) IAddressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddressContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAddressContext)
}

func (s *Obs_addr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Obs_addr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Obs_addr_listContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Obs_addr_listContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Obs_addr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_addr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_addr_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_addr_list(s)
	}
}

func (s *Obs_addr_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_addr_list(s)
	}
}

func (p *sdpParser) Obs_addr_list() (localctx IObs_addr_listContext) {
	localctx = NewObs_addr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, sdpParserRULE_obs_addr_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1308)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1303)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
				{
					p.SetState(1302)
					p.Cfws()
				}

			}
			{
				p.SetState(1305)
				p.Match(sdpParserCOMMA)
			}

		}
		p.SetState(1310)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext())
	}
	{
		p.SetState(1311)
		p.Address()
	}
	p.SetState(1319)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserCOMMA {
		{
			p.SetState(1312)
			p.Match(sdpParserCOMMA)
		}
		p.SetState(1315)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1313)
				p.Address()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1314)
				p.Cfws()
			}

		}

		p.SetState(1321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IObs_group_listContext is an interface to support dynamic dispatch.
type IObs_group_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_group_listContext differentiates from other interfaces.
	IsObs_group_listContext()
}

type Obs_group_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_group_listContext() *Obs_group_listContext {
	var p = new(Obs_group_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_group_list
	return p
}

func (*Obs_group_listContext) IsObs_group_listContext() {}

func NewObs_group_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_group_listContext {
	var p = new(Obs_group_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_group_list

	return p
}

func (s *Obs_group_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_group_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Obs_group_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Obs_group_listContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Obs_group_listContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Obs_group_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_group_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_group_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_group_list(s)
	}
}

func (s *Obs_group_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_group_list(s)
	}
}

func (p *sdpParser) Obs_group_list() (localctx IObs_group_listContext) {
	localctx = NewObs_group_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, sdpParserRULE_obs_group_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1326)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(1323)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
				{
					p.SetState(1322)
					p.Cfws()
				}

			}
			{
				p.SetState(1325)
				p.Match(sdpParserCOMMA)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1328)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())
	}
	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1330)
			p.Cfws()
		}

	}

	return localctx
}

// IObs_local_partContext is an interface to support dynamic dispatch.
type IObs_local_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_local_partContext differentiates from other interfaces.
	IsObs_local_partContext()
}

type Obs_local_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_local_partContext() *Obs_local_partContext {
	var p = new(Obs_local_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_local_part
	return p
}

func (*Obs_local_partContext) IsObs_local_partContext() {}

func NewObs_local_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_local_partContext {
	var p = new(Obs_local_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_local_part

	return p
}

func (s *Obs_local_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_local_partContext) AllWord() []IWordContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWordContext)(nil)).Elem())
	var tst = make([]IWordContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWordContext)
		}
	}

	return tst
}

func (s *Obs_local_partContext) Word(i int) IWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWordContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWordContext)
}

func (s *Obs_local_partContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Obs_local_partContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Obs_local_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_local_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_local_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_local_part(s)
	}
}

func (s *Obs_local_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_local_part(s)
	}
}

func (p *sdpParser) Obs_local_part() (localctx IObs_local_partContext) {
	localctx = NewObs_local_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, sdpParserRULE_obs_local_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1333)
		p.Word()
	}
	p.SetState(1338)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserPERIOD {
		{
			p.SetState(1334)
			p.Match(sdpParserPERIOD)
		}
		{
			p.SetState(1335)
			p.Word()
		}

		p.SetState(1340)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IObs_domainContext is an interface to support dynamic dispatch.
type IObs_domainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_domainContext differentiates from other interfaces.
	IsObs_domainContext()
}

type Obs_domainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_domainContext() *Obs_domainContext {
	var p = new(Obs_domainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_domain
	return p
}

func (*Obs_domainContext) IsObs_domainContext() {}

func NewObs_domainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_domainContext {
	var p = new(Obs_domainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_domain

	return p
}

func (s *Obs_domainContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_domainContext) AllAtom() []IAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAtomContext)(nil)).Elem())
	var tst = make([]IAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAtomContext)
		}
	}

	return tst
}

func (s *Obs_domainContext) Atom(i int) IAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *Obs_domainContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Obs_domainContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Obs_domainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_domainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_domainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_domain(s)
	}
}

func (s *Obs_domainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_domain(s)
	}
}

func (p *sdpParser) Obs_domain() (localctx IObs_domainContext) {
	localctx = NewObs_domainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, sdpParserRULE_obs_domain)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1341)
		p.Atom()
	}
	p.SetState(1346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserPERIOD {
		{
			p.SetState(1342)
			p.Match(sdpParserPERIOD)
		}
		{
			p.SetState(1343)
			p.Atom()
		}

		p.SetState(1348)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IObs_dtextContext is an interface to support dynamic dispatch.
type IObs_dtextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_dtextContext differentiates from other interfaces.
	IsObs_dtextContext()
}

type Obs_dtextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_dtextContext() *Obs_dtextContext {
	var p = new(Obs_dtextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_dtext
	return p
}

func (*Obs_dtextContext) IsObs_dtextContext() {}

func NewObs_dtextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_dtextContext {
	var p = new(Obs_dtextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_dtext

	return p
}

func (s *Obs_dtextContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_dtextContext) Obs_no_ws_ctl() IObs_no_ws_ctlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_no_ws_ctlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_no_ws_ctlContext)
}

func (s *Obs_dtextContext) Quoted_pair() IQuoted_pairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuoted_pairContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuoted_pairContext)
}

func (s *Obs_dtextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_dtextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_dtextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_dtext(s)
	}
}

func (s *Obs_dtextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_dtext(s)
	}
}

func (p *sdpParser) Obs_dtext() (localctx IObs_dtextContext) {
	localctx = NewObs_dtextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, sdpParserRULE_obs_dtext)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1351)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F, sdpParserU_007F:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1349)
			p.Obs_no_ws_ctl()
		}

	case sdpParserBACKSLASH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1350)
			p.Quoted_pair()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IObs_fwsContext is an interface to support dynamic dispatch.
type IObs_fwsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_fwsContext differentiates from other interfaces.
	IsObs_fwsContext()
}

type Obs_fwsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_fwsContext() *Obs_fwsContext {
	var p = new(Obs_fwsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_fws
	return p
}

func (*Obs_fwsContext) IsObs_fwsContext() {}

func NewObs_fwsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_fwsContext {
	var p = new(Obs_fwsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_fws

	return p
}

func (s *Obs_fwsContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_fwsContext) AllWsp() []IWspContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWspContext)(nil)).Elem())
	var tst = make([]IWspContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWspContext)
		}
	}

	return tst
}

func (s *Obs_fwsContext) Wsp(i int) IWspContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWspContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWspContext)
}

func (s *Obs_fwsContext) AllCrlf() []ICrlfContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICrlfContext)(nil)).Elem())
	var tst = make([]ICrlfContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICrlfContext)
		}
	}

	return tst
}

func (s *Obs_fwsContext) Crlf(i int) ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *Obs_fwsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_fwsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_fwsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_fws(s)
	}
}

func (s *Obs_fwsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_fws(s)
	}
}

func (p *sdpParser) Obs_fws() (localctx IObs_fwsContext) {
	localctx = NewObs_fwsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, sdpParserRULE_obs_fws)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1354)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1353)
				p.Wsp()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1356)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())
	}
	p.SetState(1366)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1358)
				p.Crlf()
			}
			p.SetState(1360)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					{
						p.SetState(1359)
						p.Wsp()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(1362)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext())
			}

		}
		p.SetState(1368)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext())
	}

	return localctx
}

// IObs_no_ws_ctlContext is an interface to support dynamic dispatch.
type IObs_no_ws_ctlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObs_no_ws_ctlContext differentiates from other interfaces.
	IsObs_no_ws_ctlContext()
}

type Obs_no_ws_ctlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObs_no_ws_ctlContext() *Obs_no_ws_ctlContext {
	var p = new(Obs_no_ws_ctlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_obs_no_ws_ctl
	return p
}

func (*Obs_no_ws_ctlContext) IsObs_no_ws_ctlContext() {}

func NewObs_no_ws_ctlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Obs_no_ws_ctlContext {
	var p = new(Obs_no_ws_ctlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_obs_no_ws_ctl

	return p
}

func (s *Obs_no_ws_ctlContext) GetParser() antlr.Parser { return s.parser }

func (s *Obs_no_ws_ctlContext) U_0001() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0001, 0)
}

func (s *Obs_no_ws_ctlContext) U_0002() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0002, 0)
}

func (s *Obs_no_ws_ctlContext) U_0003() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0003, 0)
}

func (s *Obs_no_ws_ctlContext) U_0004() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0004, 0)
}

func (s *Obs_no_ws_ctlContext) U_0005() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0005, 0)
}

func (s *Obs_no_ws_ctlContext) U_0006() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0006, 0)
}

func (s *Obs_no_ws_ctlContext) U_0007() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0007, 0)
}

func (s *Obs_no_ws_ctlContext) U_0008() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0008, 0)
}

func (s *Obs_no_ws_ctlContext) U_000B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000B, 0)
}

func (s *Obs_no_ws_ctlContext) U_000C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000C, 0)
}

func (s *Obs_no_ws_ctlContext) U_000E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000E, 0)
}

func (s *Obs_no_ws_ctlContext) U_000F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000F, 0)
}

func (s *Obs_no_ws_ctlContext) U_0010() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0010, 0)
}

func (s *Obs_no_ws_ctlContext) U_0011() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0011, 0)
}

func (s *Obs_no_ws_ctlContext) U_0012() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0012, 0)
}

func (s *Obs_no_ws_ctlContext) U_0013() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0013, 0)
}

func (s *Obs_no_ws_ctlContext) U_0014() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0014, 0)
}

func (s *Obs_no_ws_ctlContext) U_0015() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0015, 0)
}

func (s *Obs_no_ws_ctlContext) U_0016() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0016, 0)
}

func (s *Obs_no_ws_ctlContext) U_0017() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0017, 0)
}

func (s *Obs_no_ws_ctlContext) U_0018() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0018, 0)
}

func (s *Obs_no_ws_ctlContext) U_0019() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0019, 0)
}

func (s *Obs_no_ws_ctlContext) U_001A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001A, 0)
}

func (s *Obs_no_ws_ctlContext) U_001B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001B, 0)
}

func (s *Obs_no_ws_ctlContext) U_001C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001C, 0)
}

func (s *Obs_no_ws_ctlContext) U_001D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001D, 0)
}

func (s *Obs_no_ws_ctlContext) U_001E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001E, 0)
}

func (s *Obs_no_ws_ctlContext) U_001F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001F, 0)
}

func (s *Obs_no_ws_ctlContext) U_007F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_007F, 0)
}

func (s *Obs_no_ws_ctlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Obs_no_ws_ctlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Obs_no_ws_ctlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterObs_no_ws_ctl(s)
	}
}

func (s *Obs_no_ws_ctlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitObs_no_ws_ctl(s)
	}
}

func (p *sdpParser) Obs_no_ws_ctl() (localctx IObs_no_ws_ctlContext) {
	localctx = NewObs_no_ws_ctlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, sdpParserRULE_obs_no_ws_ctl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1374)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1369)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(sdpParserU_0001-100))|(1<<(sdpParserU_0002-100))|(1<<(sdpParserU_0003-100))|(1<<(sdpParserU_0004-100))|(1<<(sdpParserU_0005-100))|(1<<(sdpParserU_0006-100))|(1<<(sdpParserU_0007-100))|(1<<(sdpParserU_0008-100)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserU_000B:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1370)
			p.Match(sdpParserU_000B)
		}

	case sdpParserU_000C:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1371)
			p.Match(sdpParserU_000C)
		}

	case sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1372)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(sdpParserU_000E-110))|(1<<(sdpParserU_000F-110))|(1<<(sdpParserU_0010-110))|(1<<(sdpParserU_0011-110))|(1<<(sdpParserU_0012-110))|(1<<(sdpParserU_0013-110))|(1<<(sdpParserU_0014-110))|(1<<(sdpParserU_0015-110))|(1<<(sdpParserU_0016-110))|(1<<(sdpParserU_0017-110))|(1<<(sdpParserU_0018-110))|(1<<(sdpParserU_0019-110))|(1<<(sdpParserU_001A-110))|(1<<(sdpParserU_001B-110))|(1<<(sdpParserU_001C-110))|(1<<(sdpParserU_001D-110))|(1<<(sdpParserU_001E-110))|(1<<(sdpParserU_001F-110)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserU_007F:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1373)
			p.Match(sdpParserU_007F)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAddressContext is an interface to support dynamic dispatch.
type IAddressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAddressContext differentiates from other interfaces.
	IsAddressContext()
}

type AddressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAddressContext() *AddressContext {
	var p = new(AddressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_address
	return p
}

func (*AddressContext) IsAddressContext() {}

func NewAddressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddressContext {
	var p = new(AddressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_address

	return p
}

func (s *AddressContext) GetParser() antlr.Parser { return s.parser }

func (s *AddressContext) Mailbox() IMailboxContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMailboxContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMailboxContext)
}

func (s *AddressContext) Group() IGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupContext)
}

func (s *AddressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAddress(s)
	}
}

func (s *AddressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAddress(s)
	}
}

func (p *sdpParser) Address() (localctx IAddressContext) {
	localctx = NewAddressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, sdpParserRULE_address)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1378)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1376)
			p.Mailbox()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1377)
			p.Group()
		}

	}

	return localctx
}

// IMailboxContext is an interface to support dynamic dispatch.
type IMailboxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMailboxContext differentiates from other interfaces.
	IsMailboxContext()
}

type MailboxContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMailboxContext() *MailboxContext {
	var p = new(MailboxContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_mailbox
	return p
}

func (*MailboxContext) IsMailboxContext() {}

func NewMailboxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MailboxContext {
	var p = new(MailboxContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_mailbox

	return p
}

func (s *MailboxContext) GetParser() antlr.Parser { return s.parser }

func (s *MailboxContext) Name_addr() IName_addrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_addrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_addrContext)
}

func (s *MailboxContext) Addr_spec() IAddr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddr_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddr_specContext)
}

func (s *MailboxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MailboxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MailboxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterMailbox(s)
	}
}

func (s *MailboxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitMailbox(s)
	}
}

func (p *sdpParser) Mailbox() (localctx IMailboxContext) {
	localctx = NewMailboxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, sdpParserRULE_mailbox)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1382)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1380)
			p.Name_addr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1381)
			p.Addr_spec()
		}

	}

	return localctx
}

// IName_addrContext is an interface to support dynamic dispatch.
type IName_addrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsName_addrContext differentiates from other interfaces.
	IsName_addrContext()
}

type Name_addrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyName_addrContext() *Name_addrContext {
	var p = new(Name_addrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_name_addr
	return p
}

func (*Name_addrContext) IsName_addrContext() {}

func NewName_addrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Name_addrContext {
	var p = new(Name_addrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_name_addr

	return p
}

func (s *Name_addrContext) GetParser() antlr.Parser { return s.parser }

func (s *Name_addrContext) Angle_addr() IAngle_addrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAngle_addrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAngle_addrContext)
}

func (s *Name_addrContext) Display_name() IDisplay_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDisplay_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDisplay_nameContext)
}

func (s *Name_addrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Name_addrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Name_addrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterName_addr(s)
	}
}

func (s *Name_addrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitName_addr(s)
	}
}

func (p *sdpParser) Name_addr() (localctx IName_addrContext) {
	localctx = NewName_addrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, sdpParserRULE_name_addr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1385)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1384)
			p.Display_name()
		}

	}
	{
		p.SetState(1387)
		p.Angle_addr()
	}

	return localctx
}

// IAngle_addrContext is an interface to support dynamic dispatch.
type IAngle_addrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAngle_addrContext differentiates from other interfaces.
	IsAngle_addrContext()
}

type Angle_addrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAngle_addrContext() *Angle_addrContext {
	var p = new(Angle_addrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_angle_addr
	return p
}

func (*Angle_addrContext) IsAngle_addrContext() {}

func NewAngle_addrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Angle_addrContext {
	var p = new(Angle_addrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_angle_addr

	return p
}

func (s *Angle_addrContext) GetParser() antlr.Parser { return s.parser }

func (s *Angle_addrContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *Angle_addrContext) Addr_spec() IAddr_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddr_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddr_specContext)
}

func (s *Angle_addrContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *Angle_addrContext) AllCfws() []ICfwsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICfwsContext)(nil)).Elem())
	var tst = make([]ICfwsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICfwsContext)
		}
	}

	return tst
}

func (s *Angle_addrContext) Cfws(i int) ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Angle_addrContext) Obs_angle_addr() IObs_angle_addrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_angle_addrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_angle_addrContext)
}

func (s *Angle_addrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Angle_addrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Angle_addrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAngle_addr(s)
	}
}

func (s *Angle_addrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAngle_addr(s)
	}
}

func (p *sdpParser) Angle_addr() (localctx IAngle_addrContext) {
	localctx = NewAngle_addrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, sdpParserRULE_angle_addr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1399)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
			{
				p.SetState(1389)
				p.Cfws()
			}

		}
		{
			p.SetState(1392)
			p.Match(sdpParserLESS_THAN)
		}
		{
			p.SetState(1393)
			p.Addr_spec()
		}
		{
			p.SetState(1394)
			p.Match(sdpParserGREATER_THAN)
		}
		p.SetState(1396)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
			{
				p.SetState(1395)
				p.Cfws()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1398)
			p.Obs_angle_addr()
		}

	}

	return localctx
}

// IGroupContext is an interface to support dynamic dispatch.
type IGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupContext differentiates from other interfaces.
	IsGroupContext()
}

type GroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupContext() *GroupContext {
	var p = new(GroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_group
	return p
}

func (*GroupContext) IsGroupContext() {}

func NewGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupContext {
	var p = new(GroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_group

	return p
}

func (s *GroupContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupContext) Display_name() IDisplay_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDisplay_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDisplay_nameContext)
}

func (s *GroupContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *GroupContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *GroupContext) Group_list() IGroup_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroup_listContext)
}

func (s *GroupContext) Cfws() ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *GroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterGroup(s)
	}
}

func (s *GroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitGroup(s)
	}
}

func (p *sdpParser) Group() (localctx IGroupContext) {
	localctx = NewGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, sdpParserRULE_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1401)
		p.Display_name()
	}
	{
		p.SetState(1402)
		p.Match(sdpParserCOLON)
	}
	p.SetState(1404)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserEXCLAMATION)|(1<<sdpParserQUOTE)|(1<<sdpParserHASH)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(sdpParserLESS_THAN-32))|(1<<(sdpParserEQUALS-32))|(1<<(sdpParserQUESTION-32))|(1<<(sdpParserCAP_A-32))|(1<<(sdpParserCAP_B-32))|(1<<(sdpParserCAP_C-32))|(1<<(sdpParserCAP_D-32))|(1<<(sdpParserCAP_E-32))|(1<<(sdpParserCAP_F-32))|(1<<(sdpParserCAP_G-32))|(1<<(sdpParserCAP_H-32))|(1<<(sdpParserCAP_I-32))|(1<<(sdpParserCAP_J-32))|(1<<(sdpParserCAP_K-32))|(1<<(sdpParserCAP_L-32))|(1<<(sdpParserCAP_M-32))|(1<<(sdpParserCAP_N-32))|(1<<(sdpParserCAP_O-32))|(1<<(sdpParserCAP_P-32))|(1<<(sdpParserCAP_Q-32))|(1<<(sdpParserCAP_R-32))|(1<<(sdpParserCAP_S-32))|(1<<(sdpParserCAP_T-32))|(1<<(sdpParserCAP_U-32))|(1<<(sdpParserCAP_V-32))|(1<<(sdpParserCAP_W-32))|(1<<(sdpParserCAP_X-32))|(1<<(sdpParserCAP_Y-32))|(1<<(sdpParserCAP_Z-32)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(sdpParserCARAT-66))|(1<<(sdpParserUNDERSCORE-66))|(1<<(sdpParserACCENT-66))|(1<<(sdpParserA-66))|(1<<(sdpParserB-66))|(1<<(sdpParserC-66))|(1<<(sdpParserD-66))|(1<<(sdpParserE-66))|(1<<(sdpParserF-66))|(1<<(sdpParserG-66))|(1<<(sdpParserH-66))|(1<<(sdpParserI-66))|(1<<(sdpParserJ-66))|(1<<(sdpParserK-66))|(1<<(sdpParserL-66))|(1<<(sdpParserM-66))|(1<<(sdpParserN-66))|(1<<(sdpParserO-66))|(1<<(sdpParserP-66))|(1<<(sdpParserQ-66))|(1<<(sdpParserR-66))|(1<<(sdpParserS-66))|(1<<(sdpParserT-66))|(1<<(sdpParserU-66))|(1<<(sdpParserV-66))|(1<<(sdpParserW-66))|(1<<(sdpParserX-66))|(1<<(sdpParserY-66))|(1<<(sdpParserZ-66))|(1<<(sdpParserLEFT_CURLY_BRACE-66))|(1<<(sdpParserPIPE-66))|(1<<(sdpParserRIGHT_CURLY_BRACE-66)))) != 0) || _la == sdpParserTILDE {
		{
			p.SetState(1403)
			p.Group_list()
		}

	}
	{
		p.SetState(1406)
		p.Match(sdpParserSEMICOLON)
	}
	p.SetState(1408)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE)|(1<<sdpParserLEFT_PAREN))) != 0 {
		{
			p.SetState(1407)
			p.Cfws()
		}

	}

	return localctx
}

// IDisplay_nameContext is an interface to support dynamic dispatch.
type IDisplay_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDisplay_nameContext differentiates from other interfaces.
	IsDisplay_nameContext()
}

type Display_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDisplay_nameContext() *Display_nameContext {
	var p = new(Display_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_display_name
	return p
}

func (*Display_nameContext) IsDisplay_nameContext() {}

func NewDisplay_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Display_nameContext {
	var p = new(Display_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_display_name

	return p
}

func (s *Display_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Display_nameContext) Phrase() IPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPhraseContext)
}

func (s *Display_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Display_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Display_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDisplay_name(s)
	}
}

func (s *Display_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDisplay_name(s)
	}
}

func (p *sdpParser) Display_name() (localctx IDisplay_nameContext) {
	localctx = NewDisplay_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, sdpParserRULE_display_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1410)
		p.Phrase()
	}

	return localctx
}

// IMailbox_listContext is an interface to support dynamic dispatch.
type IMailbox_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMailbox_listContext differentiates from other interfaces.
	IsMailbox_listContext()
}

type Mailbox_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMailbox_listContext() *Mailbox_listContext {
	var p = new(Mailbox_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_mailbox_list
	return p
}

func (*Mailbox_listContext) IsMailbox_listContext() {}

func NewMailbox_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mailbox_listContext {
	var p = new(Mailbox_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_mailbox_list

	return p
}

func (s *Mailbox_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Mailbox_listContext) AllMailbox() []IMailboxContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMailboxContext)(nil)).Elem())
	var tst = make([]IMailboxContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMailboxContext)
		}
	}

	return tst
}

func (s *Mailbox_listContext) Mailbox(i int) IMailboxContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMailboxContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMailboxContext)
}

func (s *Mailbox_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Mailbox_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Mailbox_listContext) Obs_mbox_list() IObs_mbox_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_mbox_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_mbox_listContext)
}

func (s *Mailbox_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mailbox_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mailbox_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterMailbox_list(s)
	}
}

func (s *Mailbox_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitMailbox_list(s)
	}
}

func (p *sdpParser) Mailbox_list() (localctx IMailbox_listContext) {
	localctx = NewMailbox_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, sdpParserRULE_mailbox_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1421)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1412)
			p.Mailbox()
		}
		p.SetState(1417)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == sdpParserCOMMA {
			{
				p.SetState(1413)
				p.Match(sdpParserCOMMA)
			}
			{
				p.SetState(1414)
				p.Mailbox()
			}

			p.SetState(1419)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1420)
			p.Obs_mbox_list()
		}

	}

	return localctx
}

// IAddress_listContext is an interface to support dynamic dispatch.
type IAddress_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAddress_listContext differentiates from other interfaces.
	IsAddress_listContext()
}

type Address_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAddress_listContext() *Address_listContext {
	var p = new(Address_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_address_list
	return p
}

func (*Address_listContext) IsAddress_listContext() {}

func NewAddress_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Address_listContext {
	var p = new(Address_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_address_list

	return p
}

func (s *Address_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Address_listContext) AllAddress() []IAddressContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAddressContext)(nil)).Elem())
	var tst = make([]IAddressContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAddressContext)
		}
	}

	return tst
}

func (s *Address_listContext) Address(i int) IAddressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddressContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAddressContext)
}

func (s *Address_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOMMA)
}

func (s *Address_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, i)
}

func (s *Address_listContext) Obs_addr_list() IObs_addr_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_addr_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_addr_listContext)
}

func (s *Address_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Address_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Address_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAddress_list(s)
	}
}

func (s *Address_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAddress_list(s)
	}
}

func (p *sdpParser) Address_list() (localctx IAddress_listContext) {
	localctx = NewAddress_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, sdpParserRULE_address_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1432)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1423)
			p.Address()
		}
		p.SetState(1428)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == sdpParserCOMMA {
			{
				p.SetState(1424)
				p.Match(sdpParserCOMMA)
			}
			{
				p.SetState(1425)
				p.Address()
			}

			p.SetState(1430)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1431)
			p.Obs_addr_list()
		}

	}

	return localctx
}

// IGroup_listContext is an interface to support dynamic dispatch.
type IGroup_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_listContext differentiates from other interfaces.
	IsGroup_listContext()
}

type Group_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_listContext() *Group_listContext {
	var p = new(Group_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_group_list
	return p
}

func (*Group_listContext) IsGroup_listContext() {}

func NewGroup_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_listContext {
	var p = new(Group_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_group_list

	return p
}

func (s *Group_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_listContext) Mailbox_list() IMailbox_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMailbox_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMailbox_listContext)
}

func (s *Group_listContext) Cfws() ICfwsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfwsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICfwsContext)
}

func (s *Group_listContext) Obs_group_list() IObs_group_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObs_group_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObs_group_listContext)
}

func (s *Group_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterGroup_list(s)
	}
}

func (s *Group_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitGroup_list(s)
	}
}

func (p *sdpParser) Group_list() (localctx IGroup_listContext) {
	localctx = NewGroup_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, sdpParserRULE_group_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1437)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1434)
			p.Mailbox_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1435)
			p.Cfws()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1436)
			p.Obs_group_list()
		}

	}

	return localctx
}

// IAlphaContext is an interface to support dynamic dispatch.
type IAlphaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlphaContext differentiates from other interfaces.
	IsAlphaContext()
}

type AlphaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlphaContext() *AlphaContext {
	var p = new(AlphaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_alpha
	return p
}

func (*AlphaContext) IsAlphaContext() {}

func NewAlphaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlphaContext {
	var p = new(AlphaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_alpha

	return p
}

func (s *AlphaContext) GetParser() antlr.Parser { return s.parser }

func (s *AlphaContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *AlphaContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *AlphaContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *AlphaContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *AlphaContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *AlphaContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *AlphaContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *AlphaContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *AlphaContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *AlphaContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *AlphaContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *AlphaContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *AlphaContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *AlphaContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *AlphaContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *AlphaContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *AlphaContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *AlphaContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *AlphaContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *AlphaContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *AlphaContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *AlphaContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *AlphaContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *AlphaContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *AlphaContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *AlphaContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *AlphaContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *AlphaContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *AlphaContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *AlphaContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *AlphaContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *AlphaContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *AlphaContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *AlphaContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *AlphaContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *AlphaContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *AlphaContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *AlphaContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *AlphaContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *AlphaContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *AlphaContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *AlphaContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *AlphaContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *AlphaContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *AlphaContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *AlphaContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *AlphaContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *AlphaContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *AlphaContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *AlphaContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *AlphaContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *AlphaContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *AlphaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlphaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlphaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAlpha(s)
	}
}

func (s *AlphaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAlpha(s)
	}
}

func (p *sdpParser) Alpha() (localctx IAlphaContext) {
	localctx = NewAlphaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, sdpParserRULE_alpha)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1441)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1439)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1440)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBitContext is an interface to support dynamic dispatch.
type IBitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitContext differentiates from other interfaces.
	IsBitContext()
}

type BitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitContext() *BitContext {
	var p = new(BitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_bit
	return p
}

func (*BitContext) IsBitContext() {}

func NewBitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitContext {
	var p = new(BitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_bit

	return p
}

func (s *BitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *BitContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *BitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterBit(s)
	}
}

func (s *BitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitBit(s)
	}
}

func (p *sdpParser) Bit() (localctx IBitContext) {
	localctx = NewBitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, sdpParserRULE_bit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1443)
		_la = p.GetTokenStream().LA(1)

		if !(_la == sdpParserZERO || _la == sdpParserONE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IChar_1Context is an interface to support dynamic dispatch.
type IChar_1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChar_1Context differentiates from other interfaces.
	IsChar_1Context()
}

type Char_1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChar_1Context() *Char_1Context {
	var p = new(Char_1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_char_1
	return p
}

func (*Char_1Context) IsChar_1Context() {}

func NewChar_1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Char_1Context {
	var p = new(Char_1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_char_1

	return p
}

func (s *Char_1Context) GetParser() antlr.Parser { return s.parser }

func (s *Char_1Context) U_0001() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0001, 0)
}

func (s *Char_1Context) U_0002() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0002, 0)
}

func (s *Char_1Context) U_0003() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0003, 0)
}

func (s *Char_1Context) U_0004() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0004, 0)
}

func (s *Char_1Context) U_0005() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0005, 0)
}

func (s *Char_1Context) U_0006() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0006, 0)
}

func (s *Char_1Context) U_0007() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0007, 0)
}

func (s *Char_1Context) U_0008() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0008, 0)
}

func (s *Char_1Context) TAB() antlr.TerminalNode {
	return s.GetToken(sdpParserTAB, 0)
}

func (s *Char_1Context) LF() antlr.TerminalNode {
	return s.GetToken(sdpParserLF, 0)
}

func (s *Char_1Context) U_000B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000B, 0)
}

func (s *Char_1Context) U_000C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000C, 0)
}

func (s *Char_1Context) CR() antlr.TerminalNode {
	return s.GetToken(sdpParserCR, 0)
}

func (s *Char_1Context) U_000E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000E, 0)
}

func (s *Char_1Context) U_000F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000F, 0)
}

func (s *Char_1Context) U_0010() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0010, 0)
}

func (s *Char_1Context) U_0011() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0011, 0)
}

func (s *Char_1Context) U_0012() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0012, 0)
}

func (s *Char_1Context) U_0013() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0013, 0)
}

func (s *Char_1Context) U_0014() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0014, 0)
}

func (s *Char_1Context) U_0015() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0015, 0)
}

func (s *Char_1Context) U_0016() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0016, 0)
}

func (s *Char_1Context) U_0017() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0017, 0)
}

func (s *Char_1Context) U_0018() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0018, 0)
}

func (s *Char_1Context) U_0019() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0019, 0)
}

func (s *Char_1Context) U_001A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001A, 0)
}

func (s *Char_1Context) U_001B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001B, 0)
}

func (s *Char_1Context) U_001C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001C, 0)
}

func (s *Char_1Context) U_001D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001D, 0)
}

func (s *Char_1Context) U_001E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001E, 0)
}

func (s *Char_1Context) U_001F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001F, 0)
}

func (s *Char_1Context) SPACE() antlr.TerminalNode {
	return s.GetToken(sdpParserSPACE, 0)
}

func (s *Char_1Context) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *Char_1Context) QUOTE() antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, 0)
}

func (s *Char_1Context) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *Char_1Context) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *Char_1Context) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *Char_1Context) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *Char_1Context) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *Char_1Context) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *Char_1Context) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *Char_1Context) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *Char_1Context) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *Char_1Context) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *Char_1Context) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *Char_1Context) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *Char_1Context) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *Char_1Context) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *Char_1Context) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *Char_1Context) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *Char_1Context) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *Char_1Context) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *Char_1Context) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *Char_1Context) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *Char_1Context) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *Char_1Context) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *Char_1Context) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *Char_1Context) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Char_1Context) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *Char_1Context) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *Char_1Context) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Char_1Context) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *Char_1Context) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *Char_1Context) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *Char_1Context) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *Char_1Context) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *Char_1Context) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *Char_1Context) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *Char_1Context) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *Char_1Context) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *Char_1Context) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *Char_1Context) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *Char_1Context) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *Char_1Context) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *Char_1Context) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *Char_1Context) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *Char_1Context) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *Char_1Context) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *Char_1Context) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *Char_1Context) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *Char_1Context) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *Char_1Context) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *Char_1Context) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *Char_1Context) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *Char_1Context) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *Char_1Context) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *Char_1Context) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *Char_1Context) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *Char_1Context) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *Char_1Context) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *Char_1Context) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *Char_1Context) BACKSLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, 0)
}

func (s *Char_1Context) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *Char_1Context) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *Char_1Context) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *Char_1Context) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *Char_1Context) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *Char_1Context) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *Char_1Context) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *Char_1Context) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *Char_1Context) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *Char_1Context) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *Char_1Context) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *Char_1Context) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *Char_1Context) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *Char_1Context) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *Char_1Context) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *Char_1Context) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *Char_1Context) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *Char_1Context) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *Char_1Context) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *Char_1Context) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *Char_1Context) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *Char_1Context) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *Char_1Context) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *Char_1Context) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *Char_1Context) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *Char_1Context) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *Char_1Context) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *Char_1Context) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *Char_1Context) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *Char_1Context) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *Char_1Context) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *Char_1Context) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *Char_1Context) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *Char_1Context) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *Char_1Context) U_007F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_007F, 0)
}

func (s *Char_1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Char_1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Char_1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterChar_1(s)
	}
}

func (s *Char_1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitChar_1(s)
	}
}

func (p *sdpParser) Char_1() (localctx IChar_1Context) {
	localctx = NewChar_1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, sdpParserRULE_char_1)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1445)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-1)&-(0x1f+1)) == 0 && ((1<<uint((_la-1)))&((1<<(sdpParserTAB-1))|(1<<(sdpParserLF-1))|(1<<(sdpParserCR-1))|(1<<(sdpParserSPACE-1))|(1<<(sdpParserEXCLAMATION-1))|(1<<(sdpParserQUOTE-1))|(1<<(sdpParserHASH-1))|(1<<(sdpParserDOLLAR-1))|(1<<(sdpParserPERCENT-1))|(1<<(sdpParserAMPERSAND-1))|(1<<(sdpParserAPOSTROPHE-1))|(1<<(sdpParserLEFT_PAREN-1))|(1<<(sdpParserRIGHT_PAREN-1))|(1<<(sdpParserASTERISK-1))|(1<<(sdpParserPLUS-1))|(1<<(sdpParserCOMMA-1))|(1<<(sdpParserDASH-1))|(1<<(sdpParserPERIOD-1))|(1<<(sdpParserSLASH-1))|(1<<(sdpParserZERO-1))|(1<<(sdpParserONE-1))|(1<<(sdpParserTWO-1))|(1<<(sdpParserTHREE-1))|(1<<(sdpParserFOUR-1))|(1<<(sdpParserFIVE-1))|(1<<(sdpParserSIX-1))|(1<<(sdpParserSEVEN-1))|(1<<(sdpParserEIGHT-1))|(1<<(sdpParserNINE-1))|(1<<(sdpParserCOLON-1))|(1<<(sdpParserSEMICOLON-1))|(1<<(sdpParserLESS_THAN-1)))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserGREATER_THAN-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33))|(1<<(sdpParserLEFT_BRACE-33))|(1<<(sdpParserBACKSLASH-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(sdpParserRIGHT_CURLY_BRACE-97))|(1<<(sdpParserTILDE-97))|(1<<(sdpParserU_0001-97))|(1<<(sdpParserU_0002-97))|(1<<(sdpParserU_0003-97))|(1<<(sdpParserU_0004-97))|(1<<(sdpParserU_0005-97))|(1<<(sdpParserU_0006-97))|(1<<(sdpParserU_0007-97))|(1<<(sdpParserU_0008-97))|(1<<(sdpParserU_000B-97))|(1<<(sdpParserU_000C-97))|(1<<(sdpParserU_000E-97))|(1<<(sdpParserU_000F-97))|(1<<(sdpParserU_0010-97))|(1<<(sdpParserU_0011-97))|(1<<(sdpParserU_0012-97))|(1<<(sdpParserU_0013-97))|(1<<(sdpParserU_0014-97))|(1<<(sdpParserU_0015-97))|(1<<(sdpParserU_0016-97))|(1<<(sdpParserU_0017-97))|(1<<(sdpParserU_0018-97))|(1<<(sdpParserU_0019-97))|(1<<(sdpParserU_001A-97))|(1<<(sdpParserU_001B-97))|(1<<(sdpParserU_001C-97))|(1<<(sdpParserU_001D-97))|(1<<(sdpParserU_001E-97))|(1<<(sdpParserU_001F-97))|(1<<(sdpParserU_007F-97)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICrContext is an interface to support dynamic dispatch.
type ICrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCrContext differentiates from other interfaces.
	IsCrContext()
}

type CrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCrContext() *CrContext {
	var p = new(CrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_cr
	return p
}

func (*CrContext) IsCrContext() {}

func NewCrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CrContext {
	var p = new(CrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_cr

	return p
}

func (s *CrContext) GetParser() antlr.Parser { return s.parser }

func (s *CrContext) CR() antlr.TerminalNode {
	return s.GetToken(sdpParserCR, 0)
}

func (s *CrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterCr(s)
	}
}

func (s *CrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitCr(s)
	}
}

func (p *sdpParser) Cr() (localctx ICrContext) {
	localctx = NewCrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, sdpParserRULE_cr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1447)
		p.Match(sdpParserCR)
	}

	return localctx
}

// ICrlfContext is an interface to support dynamic dispatch.
type ICrlfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCrlfContext differentiates from other interfaces.
	IsCrlfContext()
}

type CrlfContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCrlfContext() *CrlfContext {
	var p = new(CrlfContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_crlf
	return p
}

func (*CrlfContext) IsCrlfContext() {}

func NewCrlfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CrlfContext {
	var p = new(CrlfContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_crlf

	return p
}

func (s *CrlfContext) GetParser() antlr.Parser { return s.parser }

func (s *CrlfContext) Cr() ICrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICrContext)
}

func (s *CrlfContext) Lf() ILfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILfContext)
}

func (s *CrlfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CrlfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CrlfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterCrlf(s)
	}
}

func (s *CrlfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitCrlf(s)
	}
}

func (p *sdpParser) Crlf() (localctx ICrlfContext) {
	localctx = NewCrlfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, sdpParserRULE_crlf)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1449)
		p.Cr()
	}
	{
		p.SetState(1450)
		p.Lf()
	}

	return localctx
}

// ICtlContext is an interface to support dynamic dispatch.
type ICtlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCtlContext differentiates from other interfaces.
	IsCtlContext()
}

type CtlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCtlContext() *CtlContext {
	var p = new(CtlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ctl
	return p
}

func (*CtlContext) IsCtlContext() {}

func NewCtlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CtlContext {
	var p = new(CtlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ctl

	return p
}

func (s *CtlContext) GetParser() antlr.Parser { return s.parser }

func (s *CtlContext) U_0000() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0000, 0)
}

func (s *CtlContext) U_0001() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0001, 0)
}

func (s *CtlContext) U_0002() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0002, 0)
}

func (s *CtlContext) U_0003() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0003, 0)
}

func (s *CtlContext) U_0004() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0004, 0)
}

func (s *CtlContext) U_0005() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0005, 0)
}

func (s *CtlContext) U_0006() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0006, 0)
}

func (s *CtlContext) U_0007() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0007, 0)
}

func (s *CtlContext) U_0008() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0008, 0)
}

func (s *CtlContext) TAB() antlr.TerminalNode {
	return s.GetToken(sdpParserTAB, 0)
}

func (s *CtlContext) LF() antlr.TerminalNode {
	return s.GetToken(sdpParserLF, 0)
}

func (s *CtlContext) U_000B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000B, 0)
}

func (s *CtlContext) U_000C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000C, 0)
}

func (s *CtlContext) CR() antlr.TerminalNode {
	return s.GetToken(sdpParserCR, 0)
}

func (s *CtlContext) U_000E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000E, 0)
}

func (s *CtlContext) U_000F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000F, 0)
}

func (s *CtlContext) U_0010() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0010, 0)
}

func (s *CtlContext) U_0011() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0011, 0)
}

func (s *CtlContext) U_0012() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0012, 0)
}

func (s *CtlContext) U_0013() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0013, 0)
}

func (s *CtlContext) U_0014() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0014, 0)
}

func (s *CtlContext) U_0015() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0015, 0)
}

func (s *CtlContext) U_0016() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0016, 0)
}

func (s *CtlContext) U_0017() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0017, 0)
}

func (s *CtlContext) U_0018() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0018, 0)
}

func (s *CtlContext) U_0019() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0019, 0)
}

func (s *CtlContext) U_001A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001A, 0)
}

func (s *CtlContext) U_001B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001B, 0)
}

func (s *CtlContext) U_001C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001C, 0)
}

func (s *CtlContext) U_001D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001D, 0)
}

func (s *CtlContext) U_001E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001E, 0)
}

func (s *CtlContext) U_001F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001F, 0)
}

func (s *CtlContext) U_007F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_007F, 0)
}

func (s *CtlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CtlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterCtl(s)
	}
}

func (s *CtlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitCtl(s)
	}
}

func (p *sdpParser) Ctl() (localctx ICtlContext) {
	localctx = NewCtlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, sdpParserRULE_ctl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1454)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserTAB, sdpParserLF, sdpParserCR, sdpParserU_0000, sdpParserU_0001, sdpParserU_0002, sdpParserU_0003, sdpParserU_0004, sdpParserU_0005, sdpParserU_0006, sdpParserU_0007, sdpParserU_0008, sdpParserU_000B, sdpParserU_000C, sdpParserU_000E, sdpParserU_000F, sdpParserU_0010, sdpParserU_0011, sdpParserU_0012, sdpParserU_0013, sdpParserU_0014, sdpParserU_0015, sdpParserU_0016, sdpParserU_0017, sdpParserU_0018, sdpParserU_0019, sdpParserU_001A, sdpParserU_001B, sdpParserU_001C, sdpParserU_001D, sdpParserU_001E, sdpParserU_001F:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1452)
			_la = p.GetTokenStream().LA(1)

			if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserLF)|(1<<sdpParserCR))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(sdpParserU_0000-99))|(1<<(sdpParserU_0001-99))|(1<<(sdpParserU_0002-99))|(1<<(sdpParserU_0003-99))|(1<<(sdpParserU_0004-99))|(1<<(sdpParserU_0005-99))|(1<<(sdpParserU_0006-99))|(1<<(sdpParserU_0007-99))|(1<<(sdpParserU_0008-99))|(1<<(sdpParserU_000B-99))|(1<<(sdpParserU_000C-99))|(1<<(sdpParserU_000E-99))|(1<<(sdpParserU_000F-99))|(1<<(sdpParserU_0010-99))|(1<<(sdpParserU_0011-99))|(1<<(sdpParserU_0012-99))|(1<<(sdpParserU_0013-99))|(1<<(sdpParserU_0014-99))|(1<<(sdpParserU_0015-99))|(1<<(sdpParserU_0016-99))|(1<<(sdpParserU_0017-99))|(1<<(sdpParserU_0018-99))|(1<<(sdpParserU_0019-99))|(1<<(sdpParserU_001A-99))|(1<<(sdpParserU_001B-99))|(1<<(sdpParserU_001C-99))|(1<<(sdpParserU_001D-99))|(1<<(sdpParserU_001E-99))|(1<<(sdpParserU_001F-99)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserU_007F:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1453)
			p.Match(sdpParserU_007F)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDigitContext is an interface to support dynamic dispatch.
type IDigitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDigitContext differentiates from other interfaces.
	IsDigitContext()
}

type DigitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDigitContext() *DigitContext {
	var p = new(DigitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_digit
	return p
}

func (*DigitContext) IsDigitContext() {}

func NewDigitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DigitContext {
	var p = new(DigitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_digit

	return p
}

func (s *DigitContext) GetParser() antlr.Parser { return s.parser }

func (s *DigitContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *DigitContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *DigitContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *DigitContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *DigitContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *DigitContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *DigitContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *DigitContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *DigitContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *DigitContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *DigitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DigitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DigitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDigit(s)
	}
}

func (s *DigitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDigit(s)
	}
}

func (p *sdpParser) Digit() (localctx IDigitContext) {
	localctx = NewDigitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, sdpParserRULE_digit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1456)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDquoteContext is an interface to support dynamic dispatch.
type IDquoteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDquoteContext differentiates from other interfaces.
	IsDquoteContext()
}

type DquoteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDquoteContext() *DquoteContext {
	var p = new(DquoteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_dquote
	return p
}

func (*DquoteContext) IsDquoteContext() {}

func NewDquoteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DquoteContext {
	var p = new(DquoteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_dquote

	return p
}

func (s *DquoteContext) GetParser() antlr.Parser { return s.parser }

func (s *DquoteContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, 0)
}

func (s *DquoteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DquoteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DquoteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDquote(s)
	}
}

func (s *DquoteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDquote(s)
	}
}

func (p *sdpParser) Dquote() (localctx IDquoteContext) {
	localctx = NewDquoteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, sdpParserRULE_dquote)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1458)
		p.Match(sdpParserQUOTE)
	}

	return localctx
}

// IHexdigContext is an interface to support dynamic dispatch.
type IHexdigContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexdigContext differentiates from other interfaces.
	IsHexdigContext()
}

type HexdigContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexdigContext() *HexdigContext {
	var p = new(HexdigContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_hexdig
	return p
}

func (*HexdigContext) IsHexdigContext() {}

func NewHexdigContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexdigContext {
	var p = new(HexdigContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_hexdig

	return p
}

func (s *HexdigContext) GetParser() antlr.Parser { return s.parser }

func (s *HexdigContext) Digit() IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *HexdigContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *HexdigContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *HexdigContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *HexdigContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *HexdigContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *HexdigContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *HexdigContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *HexdigContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *HexdigContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *HexdigContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *HexdigContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *HexdigContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *HexdigContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexdigContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HexdigContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterHexdig(s)
	}
}

func (s *HexdigContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitHexdig(s)
	}
}

func (p *sdpParser) Hexdig() (localctx IHexdigContext) {
	localctx = NewHexdigContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, sdpParserRULE_hexdig)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1467)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1460)
			p.Digit()
		}

	case sdpParserCAP_A, sdpParserA:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1461)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserCAP_A || _la == sdpParserA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCAP_B, sdpParserB:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1462)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserCAP_B || _la == sdpParserB) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCAP_C, sdpParserC:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1463)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserCAP_C || _la == sdpParserC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCAP_D, sdpParserD:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1464)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserCAP_D || _la == sdpParserD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCAP_E, sdpParserE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1465)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserCAP_E || _la == sdpParserE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case sdpParserCAP_F, sdpParserF:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1466)
			_la = p.GetTokenStream().LA(1)

			if !(_la == sdpParserCAP_F || _la == sdpParserF) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IHtabContext is an interface to support dynamic dispatch.
type IHtabContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHtabContext differentiates from other interfaces.
	IsHtabContext()
}

type HtabContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHtabContext() *HtabContext {
	var p = new(HtabContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_htab
	return p
}

func (*HtabContext) IsHtabContext() {}

func NewHtabContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HtabContext {
	var p = new(HtabContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_htab

	return p
}

func (s *HtabContext) GetParser() antlr.Parser { return s.parser }

func (s *HtabContext) TAB() antlr.TerminalNode {
	return s.GetToken(sdpParserTAB, 0)
}

func (s *HtabContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HtabContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HtabContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterHtab(s)
	}
}

func (s *HtabContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitHtab(s)
	}
}

func (p *sdpParser) Htab() (localctx IHtabContext) {
	localctx = NewHtabContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, sdpParserRULE_htab)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1469)
		p.Match(sdpParserTAB)
	}

	return localctx
}

// ILfContext is an interface to support dynamic dispatch.
type ILfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLfContext differentiates from other interfaces.
	IsLfContext()
}

type LfContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLfContext() *LfContext {
	var p = new(LfContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_lf
	return p
}

func (*LfContext) IsLfContext() {}

func NewLfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LfContext {
	var p = new(LfContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_lf

	return p
}

func (s *LfContext) GetParser() antlr.Parser { return s.parser }

func (s *LfContext) LF() antlr.TerminalNode {
	return s.GetToken(sdpParserLF, 0)
}

func (s *LfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterLf(s)
	}
}

func (s *LfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitLf(s)
	}
}

func (p *sdpParser) Lf() (localctx ILfContext) {
	localctx = NewLfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, sdpParserRULE_lf)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1471)
		p.Match(sdpParserLF)
	}

	return localctx
}

// ILwspContext is an interface to support dynamic dispatch.
type ILwspContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLwspContext differentiates from other interfaces.
	IsLwspContext()
}

type LwspContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLwspContext() *LwspContext {
	var p = new(LwspContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_lwsp
	return p
}

func (*LwspContext) IsLwspContext() {}

func NewLwspContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LwspContext {
	var p = new(LwspContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_lwsp

	return p
}

func (s *LwspContext) GetParser() antlr.Parser { return s.parser }

func (s *LwspContext) AllWsp() []IWspContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWspContext)(nil)).Elem())
	var tst = make([]IWspContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWspContext)
		}
	}

	return tst
}

func (s *LwspContext) Wsp(i int) IWspContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWspContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWspContext)
}

func (s *LwspContext) AllCrlf() []ICrlfContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICrlfContext)(nil)).Elem())
	var tst = make([]ICrlfContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICrlfContext)
		}
	}

	return tst
}

func (s *LwspContext) Crlf(i int) ICrlfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICrlfContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICrlfContext)
}

func (s *LwspContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LwspContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LwspContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterLwsp(s)
	}
}

func (s *LwspContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitLwsp(s)
	}
}

func (p *sdpParser) Lwsp() (localctx ILwspContext) {
	localctx = NewLwspContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, sdpParserRULE_lwsp)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1479)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserTAB)|(1<<sdpParserCR)|(1<<sdpParserSPACE))) != 0 {
		p.SetState(1477)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserTAB, sdpParserSPACE:
			{
				p.SetState(1473)
				p.Wsp()
			}

		case sdpParserCR:
			{
				p.SetState(1474)
				p.Crlf()
			}
			{
				p.SetState(1475)
				p.Wsp()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1481)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOctetContext is an interface to support dynamic dispatch.
type IOctetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOctetContext differentiates from other interfaces.
	IsOctetContext()
}

type OctetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOctetContext() *OctetContext {
	var p = new(OctetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_octet
	return p
}

func (*OctetContext) IsOctetContext() {}

func NewOctetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OctetContext {
	var p = new(OctetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_octet

	return p
}

func (s *OctetContext) GetParser() antlr.Parser { return s.parser }

func (s *OctetContext) U_0000() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0000, 0)
}

func (s *OctetContext) U_0001() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0001, 0)
}

func (s *OctetContext) U_0002() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0002, 0)
}

func (s *OctetContext) U_0003() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0003, 0)
}

func (s *OctetContext) U_0004() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0004, 0)
}

func (s *OctetContext) U_0005() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0005, 0)
}

func (s *OctetContext) U_0006() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0006, 0)
}

func (s *OctetContext) U_0007() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0007, 0)
}

func (s *OctetContext) U_0008() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0008, 0)
}

func (s *OctetContext) TAB() antlr.TerminalNode {
	return s.GetToken(sdpParserTAB, 0)
}

func (s *OctetContext) LF() antlr.TerminalNode {
	return s.GetToken(sdpParserLF, 0)
}

func (s *OctetContext) U_000B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000B, 0)
}

func (s *OctetContext) U_000C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000C, 0)
}

func (s *OctetContext) CR() antlr.TerminalNode {
	return s.GetToken(sdpParserCR, 0)
}

func (s *OctetContext) U_000E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000E, 0)
}

func (s *OctetContext) U_000F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_000F, 0)
}

func (s *OctetContext) U_0010() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0010, 0)
}

func (s *OctetContext) U_0011() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0011, 0)
}

func (s *OctetContext) U_0012() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0012, 0)
}

func (s *OctetContext) U_0013() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0013, 0)
}

func (s *OctetContext) U_0014() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0014, 0)
}

func (s *OctetContext) U_0015() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0015, 0)
}

func (s *OctetContext) U_0016() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0016, 0)
}

func (s *OctetContext) U_0017() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0017, 0)
}

func (s *OctetContext) U_0018() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0018, 0)
}

func (s *OctetContext) U_0019() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0019, 0)
}

func (s *OctetContext) U_001A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001A, 0)
}

func (s *OctetContext) U_001B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001B, 0)
}

func (s *OctetContext) U_001C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001C, 0)
}

func (s *OctetContext) U_001D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001D, 0)
}

func (s *OctetContext) U_001E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001E, 0)
}

func (s *OctetContext) U_001F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_001F, 0)
}

func (s *OctetContext) SPACE() antlr.TerminalNode {
	return s.GetToken(sdpParserSPACE, 0)
}

func (s *OctetContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *OctetContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, 0)
}

func (s *OctetContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *OctetContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *OctetContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *OctetContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *OctetContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *OctetContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *OctetContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *OctetContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *OctetContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *OctetContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *OctetContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *OctetContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *OctetContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *OctetContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *OctetContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *OctetContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *OctetContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *OctetContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *OctetContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *OctetContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *OctetContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *OctetContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *OctetContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *OctetContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *OctetContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *OctetContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *OctetContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *OctetContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *OctetContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *OctetContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *OctetContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *OctetContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *OctetContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *OctetContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *OctetContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *OctetContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *OctetContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *OctetContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *OctetContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *OctetContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *OctetContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *OctetContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *OctetContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *OctetContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *OctetContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *OctetContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *OctetContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *OctetContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *OctetContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *OctetContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *OctetContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *OctetContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *OctetContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *OctetContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *OctetContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *OctetContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *OctetContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *OctetContext) BACKSLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, 0)
}

func (s *OctetContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *OctetContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *OctetContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *OctetContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *OctetContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *OctetContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *OctetContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *OctetContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *OctetContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *OctetContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *OctetContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *OctetContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *OctetContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *OctetContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *OctetContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *OctetContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *OctetContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *OctetContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *OctetContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *OctetContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *OctetContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *OctetContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *OctetContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *OctetContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *OctetContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *OctetContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *OctetContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *OctetContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *OctetContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *OctetContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *OctetContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *OctetContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *OctetContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *OctetContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *OctetContext) U_007F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_007F, 0)
}

func (s *OctetContext) U_0080() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0080, 0)
}

func (s *OctetContext) U_0081() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0081, 0)
}

func (s *OctetContext) U_0082() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0082, 0)
}

func (s *OctetContext) U_0083() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0083, 0)
}

func (s *OctetContext) U_0084() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0084, 0)
}

func (s *OctetContext) U_0085() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0085, 0)
}

func (s *OctetContext) U_0086() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0086, 0)
}

func (s *OctetContext) U_0087() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0087, 0)
}

func (s *OctetContext) U_0088() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0088, 0)
}

func (s *OctetContext) U_0089() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0089, 0)
}

func (s *OctetContext) U_008A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008A, 0)
}

func (s *OctetContext) U_008B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008B, 0)
}

func (s *OctetContext) U_008C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008C, 0)
}

func (s *OctetContext) U_008D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008D, 0)
}

func (s *OctetContext) U_008E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008E, 0)
}

func (s *OctetContext) U_008F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_008F, 0)
}

func (s *OctetContext) U_0090() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0090, 0)
}

func (s *OctetContext) U_0091() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0091, 0)
}

func (s *OctetContext) U_0092() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0092, 0)
}

func (s *OctetContext) U_0093() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0093, 0)
}

func (s *OctetContext) U_0094() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0094, 0)
}

func (s *OctetContext) U_0095() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0095, 0)
}

func (s *OctetContext) U_0096() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0096, 0)
}

func (s *OctetContext) U_0097() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0097, 0)
}

func (s *OctetContext) U_0098() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0098, 0)
}

func (s *OctetContext) U_0099() antlr.TerminalNode {
	return s.GetToken(sdpParserU_0099, 0)
}

func (s *OctetContext) U_009A() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009A, 0)
}

func (s *OctetContext) U_009B() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009B, 0)
}

func (s *OctetContext) U_009C() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009C, 0)
}

func (s *OctetContext) U_009D() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009D, 0)
}

func (s *OctetContext) U_009E() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009E, 0)
}

func (s *OctetContext) U_009F() antlr.TerminalNode {
	return s.GetToken(sdpParserU_009F, 0)
}

func (s *OctetContext) U_00A0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A0, 0)
}

func (s *OctetContext) U_00A1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A1, 0)
}

func (s *OctetContext) U_00A2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A2, 0)
}

func (s *OctetContext) U_00A3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A3, 0)
}

func (s *OctetContext) U_00A4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A4, 0)
}

func (s *OctetContext) U_00A5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A5, 0)
}

func (s *OctetContext) U_00A6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A6, 0)
}

func (s *OctetContext) U_00A7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A7, 0)
}

func (s *OctetContext) U_00A8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A8, 0)
}

func (s *OctetContext) U_00A9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00A9, 0)
}

func (s *OctetContext) U_00AA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AA, 0)
}

func (s *OctetContext) U_00AB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AB, 0)
}

func (s *OctetContext) U_00AC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AC, 0)
}

func (s *OctetContext) U_00AD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AD, 0)
}

func (s *OctetContext) U_00AE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AE, 0)
}

func (s *OctetContext) U_00AF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00AF, 0)
}

func (s *OctetContext) U_00B0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B0, 0)
}

func (s *OctetContext) U_00B1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B1, 0)
}

func (s *OctetContext) U_00B2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B2, 0)
}

func (s *OctetContext) U_00B3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B3, 0)
}

func (s *OctetContext) U_00B4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B4, 0)
}

func (s *OctetContext) U_00B5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B5, 0)
}

func (s *OctetContext) U_00B6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B6, 0)
}

func (s *OctetContext) U_00B7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B7, 0)
}

func (s *OctetContext) U_00B8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B8, 0)
}

func (s *OctetContext) U_00B9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00B9, 0)
}

func (s *OctetContext) U_00BA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BA, 0)
}

func (s *OctetContext) U_00BB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BB, 0)
}

func (s *OctetContext) U_00BC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BC, 0)
}

func (s *OctetContext) U_00BD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BD, 0)
}

func (s *OctetContext) U_00BE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BE, 0)
}

func (s *OctetContext) U_00BF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00BF, 0)
}

func (s *OctetContext) U_00C0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C0, 0)
}

func (s *OctetContext) U_00C1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C1, 0)
}

func (s *OctetContext) U_00C2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C2, 0)
}

func (s *OctetContext) U_00C3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C3, 0)
}

func (s *OctetContext) U_00C4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C4, 0)
}

func (s *OctetContext) U_00C5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C5, 0)
}

func (s *OctetContext) U_00C6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C6, 0)
}

func (s *OctetContext) U_00C7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C7, 0)
}

func (s *OctetContext) U_00C8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C8, 0)
}

func (s *OctetContext) U_00C9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00C9, 0)
}

func (s *OctetContext) U_00CA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CA, 0)
}

func (s *OctetContext) U_00CB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CB, 0)
}

func (s *OctetContext) U_00CC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CC, 0)
}

func (s *OctetContext) U_00CD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CD, 0)
}

func (s *OctetContext) U_00CE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CE, 0)
}

func (s *OctetContext) U_00CF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00CF, 0)
}

func (s *OctetContext) U_00D0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D0, 0)
}

func (s *OctetContext) U_00D1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D1, 0)
}

func (s *OctetContext) U_00D2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D2, 0)
}

func (s *OctetContext) U_00D3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D3, 0)
}

func (s *OctetContext) U_00D4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D4, 0)
}

func (s *OctetContext) U_00D5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D5, 0)
}

func (s *OctetContext) U_00D6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D6, 0)
}

func (s *OctetContext) U_00D7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D7, 0)
}

func (s *OctetContext) U_00D8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D8, 0)
}

func (s *OctetContext) U_00D9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00D9, 0)
}

func (s *OctetContext) U_00DA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DA, 0)
}

func (s *OctetContext) U_00DB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DB, 0)
}

func (s *OctetContext) U_00DC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DC, 0)
}

func (s *OctetContext) U_00DD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DD, 0)
}

func (s *OctetContext) U_00DE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DE, 0)
}

func (s *OctetContext) U_00DF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00DF, 0)
}

func (s *OctetContext) U_00E0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E0, 0)
}

func (s *OctetContext) U_00E1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E1, 0)
}

func (s *OctetContext) U_00E2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E2, 0)
}

func (s *OctetContext) U_00E3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E3, 0)
}

func (s *OctetContext) U_00E4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E4, 0)
}

func (s *OctetContext) U_00E5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E5, 0)
}

func (s *OctetContext) U_00E6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E6, 0)
}

func (s *OctetContext) U_00E7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E7, 0)
}

func (s *OctetContext) U_00E8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E8, 0)
}

func (s *OctetContext) U_00E9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00E9, 0)
}

func (s *OctetContext) U_00EA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EA, 0)
}

func (s *OctetContext) U_00EB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EB, 0)
}

func (s *OctetContext) U_00EC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EC, 0)
}

func (s *OctetContext) U_00ED() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00ED, 0)
}

func (s *OctetContext) U_00EE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EE, 0)
}

func (s *OctetContext) U_00EF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00EF, 0)
}

func (s *OctetContext) U_00F0() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F0, 0)
}

func (s *OctetContext) U_00F1() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F1, 0)
}

func (s *OctetContext) U_00F2() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F2, 0)
}

func (s *OctetContext) U_00F3() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F3, 0)
}

func (s *OctetContext) U_00F4() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F4, 0)
}

func (s *OctetContext) U_00F5() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F5, 0)
}

func (s *OctetContext) U_00F6() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F6, 0)
}

func (s *OctetContext) U_00F7() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F7, 0)
}

func (s *OctetContext) U_00F8() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F8, 0)
}

func (s *OctetContext) U_00F9() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00F9, 0)
}

func (s *OctetContext) U_00FA() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FA, 0)
}

func (s *OctetContext) U_00FB() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FB, 0)
}

func (s *OctetContext) U_00FC() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FC, 0)
}

func (s *OctetContext) U_00FD() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FD, 0)
}

func (s *OctetContext) U_00FE() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FE, 0)
}

func (s *OctetContext) U_00FF() antlr.TerminalNode {
	return s.GetToken(sdpParserU_00FF, 0)
}

func (s *OctetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OctetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OctetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterOctet(s)
	}
}

func (s *OctetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitOctet(s)
	}
}

func (p *sdpParser) Octet() (localctx IOctetContext) {
	localctx = NewOctetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, sdpParserRULE_octet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1482)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-1)&-(0x1f+1)) == 0 && ((1<<uint((_la-1)))&((1<<(sdpParserTAB-1))|(1<<(sdpParserLF-1))|(1<<(sdpParserCR-1))|(1<<(sdpParserSPACE-1))|(1<<(sdpParserEXCLAMATION-1))|(1<<(sdpParserQUOTE-1))|(1<<(sdpParserHASH-1))|(1<<(sdpParserDOLLAR-1))|(1<<(sdpParserPERCENT-1))|(1<<(sdpParserAMPERSAND-1))|(1<<(sdpParserAPOSTROPHE-1))|(1<<(sdpParserLEFT_PAREN-1))|(1<<(sdpParserRIGHT_PAREN-1))|(1<<(sdpParserASTERISK-1))|(1<<(sdpParserPLUS-1))|(1<<(sdpParserCOMMA-1))|(1<<(sdpParserDASH-1))|(1<<(sdpParserPERIOD-1))|(1<<(sdpParserSLASH-1))|(1<<(sdpParserZERO-1))|(1<<(sdpParserONE-1))|(1<<(sdpParserTWO-1))|(1<<(sdpParserTHREE-1))|(1<<(sdpParserFOUR-1))|(1<<(sdpParserFIVE-1))|(1<<(sdpParserSIX-1))|(1<<(sdpParserSEVEN-1))|(1<<(sdpParserEIGHT-1))|(1<<(sdpParserNINE-1))|(1<<(sdpParserCOLON-1))|(1<<(sdpParserSEMICOLON-1))|(1<<(sdpParserLESS_THAN-1)))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserGREATER_THAN-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33))|(1<<(sdpParserLEFT_BRACE-33))|(1<<(sdpParserBACKSLASH-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(sdpParserRIGHT_BRACE-65))|(1<<(sdpParserCARAT-65))|(1<<(sdpParserUNDERSCORE-65))|(1<<(sdpParserACCENT-65))|(1<<(sdpParserA-65))|(1<<(sdpParserB-65))|(1<<(sdpParserC-65))|(1<<(sdpParserD-65))|(1<<(sdpParserE-65))|(1<<(sdpParserF-65))|(1<<(sdpParserG-65))|(1<<(sdpParserH-65))|(1<<(sdpParserI-65))|(1<<(sdpParserJ-65))|(1<<(sdpParserK-65))|(1<<(sdpParserL-65))|(1<<(sdpParserM-65))|(1<<(sdpParserN-65))|(1<<(sdpParserO-65))|(1<<(sdpParserP-65))|(1<<(sdpParserQ-65))|(1<<(sdpParserR-65))|(1<<(sdpParserS-65))|(1<<(sdpParserT-65))|(1<<(sdpParserU-65))|(1<<(sdpParserV-65))|(1<<(sdpParserW-65))|(1<<(sdpParserX-65))|(1<<(sdpParserY-65))|(1<<(sdpParserZ-65))|(1<<(sdpParserLEFT_CURLY_BRACE-65))|(1<<(sdpParserPIPE-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(sdpParserRIGHT_CURLY_BRACE-97))|(1<<(sdpParserTILDE-97))|(1<<(sdpParserU_0000-97))|(1<<(sdpParserU_0001-97))|(1<<(sdpParserU_0002-97))|(1<<(sdpParserU_0003-97))|(1<<(sdpParserU_0004-97))|(1<<(sdpParserU_0005-97))|(1<<(sdpParserU_0006-97))|(1<<(sdpParserU_0007-97))|(1<<(sdpParserU_0008-97))|(1<<(sdpParserU_000B-97))|(1<<(sdpParserU_000C-97))|(1<<(sdpParserU_000E-97))|(1<<(sdpParserU_000F-97))|(1<<(sdpParserU_0010-97))|(1<<(sdpParserU_0011-97))|(1<<(sdpParserU_0012-97))|(1<<(sdpParserU_0013-97))|(1<<(sdpParserU_0014-97))|(1<<(sdpParserU_0015-97))|(1<<(sdpParserU_0016-97))|(1<<(sdpParserU_0017-97))|(1<<(sdpParserU_0018-97))|(1<<(sdpParserU_0019-97))|(1<<(sdpParserU_001A-97))|(1<<(sdpParserU_001B-97))|(1<<(sdpParserU_001C-97))|(1<<(sdpParserU_001D-97))|(1<<(sdpParserU_001E-97))|(1<<(sdpParserU_001F-97))|(1<<(sdpParserU_007F-97)))) != 0) || (((_la-129)&-(0x1f+1)) == 0 && ((1<<uint((_la-129)))&((1<<(sdpParserU_0080-129))|(1<<(sdpParserU_0081-129))|(1<<(sdpParserU_0082-129))|(1<<(sdpParserU_0083-129))|(1<<(sdpParserU_0084-129))|(1<<(sdpParserU_0085-129))|(1<<(sdpParserU_0086-129))|(1<<(sdpParserU_0087-129))|(1<<(sdpParserU_0088-129))|(1<<(sdpParserU_0089-129))|(1<<(sdpParserU_008A-129))|(1<<(sdpParserU_008B-129))|(1<<(sdpParserU_008C-129))|(1<<(sdpParserU_008D-129))|(1<<(sdpParserU_008E-129))|(1<<(sdpParserU_008F-129))|(1<<(sdpParserU_0090-129))|(1<<(sdpParserU_0091-129))|(1<<(sdpParserU_0092-129))|(1<<(sdpParserU_0093-129))|(1<<(sdpParserU_0094-129))|(1<<(sdpParserU_0095-129))|(1<<(sdpParserU_0096-129))|(1<<(sdpParserU_0097-129))|(1<<(sdpParserU_0098-129))|(1<<(sdpParserU_0099-129))|(1<<(sdpParserU_009A-129))|(1<<(sdpParserU_009B-129))|(1<<(sdpParserU_009C-129))|(1<<(sdpParserU_009D-129))|(1<<(sdpParserU_009E-129))|(1<<(sdpParserU_009F-129)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(sdpParserU_00A0-161))|(1<<(sdpParserU_00A1-161))|(1<<(sdpParserU_00A2-161))|(1<<(sdpParserU_00A3-161))|(1<<(sdpParserU_00A4-161))|(1<<(sdpParserU_00A5-161))|(1<<(sdpParserU_00A6-161))|(1<<(sdpParserU_00A7-161))|(1<<(sdpParserU_00A8-161))|(1<<(sdpParserU_00A9-161))|(1<<(sdpParserU_00AA-161))|(1<<(sdpParserU_00AB-161))|(1<<(sdpParserU_00AC-161))|(1<<(sdpParserU_00AD-161))|(1<<(sdpParserU_00AE-161))|(1<<(sdpParserU_00AF-161))|(1<<(sdpParserU_00B0-161))|(1<<(sdpParserU_00B1-161))|(1<<(sdpParserU_00B2-161))|(1<<(sdpParserU_00B3-161))|(1<<(sdpParserU_00B4-161))|(1<<(sdpParserU_00B5-161))|(1<<(sdpParserU_00B6-161))|(1<<(sdpParserU_00B7-161))|(1<<(sdpParserU_00B8-161))|(1<<(sdpParserU_00B9-161))|(1<<(sdpParserU_00BA-161))|(1<<(sdpParserU_00BB-161))|(1<<(sdpParserU_00BC-161))|(1<<(sdpParserU_00BD-161))|(1<<(sdpParserU_00BE-161))|(1<<(sdpParserU_00BF-161)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(sdpParserU_00C0-193))|(1<<(sdpParserU_00C1-193))|(1<<(sdpParserU_00C2-193))|(1<<(sdpParserU_00C3-193))|(1<<(sdpParserU_00C4-193))|(1<<(sdpParserU_00C5-193))|(1<<(sdpParserU_00C6-193))|(1<<(sdpParserU_00C7-193))|(1<<(sdpParserU_00C8-193))|(1<<(sdpParserU_00C9-193))|(1<<(sdpParserU_00CA-193))|(1<<(sdpParserU_00CB-193))|(1<<(sdpParserU_00CC-193))|(1<<(sdpParserU_00CD-193))|(1<<(sdpParserU_00CE-193))|(1<<(sdpParserU_00CF-193))|(1<<(sdpParserU_00D0-193))|(1<<(sdpParserU_00D1-193))|(1<<(sdpParserU_00D2-193))|(1<<(sdpParserU_00D3-193))|(1<<(sdpParserU_00D4-193))|(1<<(sdpParserU_00D5-193))|(1<<(sdpParserU_00D6-193))|(1<<(sdpParserU_00D7-193))|(1<<(sdpParserU_00D8-193))|(1<<(sdpParserU_00D9-193))|(1<<(sdpParserU_00DA-193))|(1<<(sdpParserU_00DB-193))|(1<<(sdpParserU_00DC-193))|(1<<(sdpParserU_00DD-193))|(1<<(sdpParserU_00DE-193))|(1<<(sdpParserU_00DF-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(sdpParserU_00E0-225))|(1<<(sdpParserU_00E1-225))|(1<<(sdpParserU_00E2-225))|(1<<(sdpParserU_00E3-225))|(1<<(sdpParserU_00E4-225))|(1<<(sdpParserU_00E5-225))|(1<<(sdpParserU_00E6-225))|(1<<(sdpParserU_00E7-225))|(1<<(sdpParserU_00E8-225))|(1<<(sdpParserU_00E9-225))|(1<<(sdpParserU_00EA-225))|(1<<(sdpParserU_00EB-225))|(1<<(sdpParserU_00EC-225))|(1<<(sdpParserU_00ED-225))|(1<<(sdpParserU_00EE-225))|(1<<(sdpParserU_00EF-225))|(1<<(sdpParserU_00F0-225))|(1<<(sdpParserU_00F1-225))|(1<<(sdpParserU_00F2-225))|(1<<(sdpParserU_00F3-225))|(1<<(sdpParserU_00F4-225))|(1<<(sdpParserU_00F5-225))|(1<<(sdpParserU_00F6-225))|(1<<(sdpParserU_00F7-225))|(1<<(sdpParserU_00F8-225))|(1<<(sdpParserU_00F9-225))|(1<<(sdpParserU_00FA-225))|(1<<(sdpParserU_00FB-225))|(1<<(sdpParserU_00FC-225))|(1<<(sdpParserU_00FD-225))|(1<<(sdpParserU_00FE-225))|(1<<(sdpParserU_00FF-225)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISpContext is an interface to support dynamic dispatch.
type ISpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpContext differentiates from other interfaces.
	IsSpContext()
}

type SpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpContext() *SpContext {
	var p = new(SpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_sp
	return p
}

func (*SpContext) IsSpContext() {}

func NewSpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpContext {
	var p = new(SpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_sp

	return p
}

func (s *SpContext) GetParser() antlr.Parser { return s.parser }

func (s *SpContext) SPACE() antlr.TerminalNode {
	return s.GetToken(sdpParserSPACE, 0)
}

func (s *SpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSp(s)
	}
}

func (s *SpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSp(s)
	}
}

func (p *sdpParser) Sp() (localctx ISpContext) {
	localctx = NewSpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, sdpParserRULE_sp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1484)
		p.Match(sdpParserSPACE)
	}

	return localctx
}

// IVcharContext is an interface to support dynamic dispatch.
type IVcharContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVcharContext differentiates from other interfaces.
	IsVcharContext()
}

type VcharContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVcharContext() *VcharContext {
	var p = new(VcharContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_vchar
	return p
}

func (*VcharContext) IsVcharContext() {}

func NewVcharContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VcharContext {
	var p = new(VcharContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_vchar

	return p
}

func (s *VcharContext) GetParser() antlr.Parser { return s.parser }

func (s *VcharContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *VcharContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(sdpParserQUOTE, 0)
}

func (s *VcharContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *VcharContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *VcharContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *VcharContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *VcharContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *VcharContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *VcharContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *VcharContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *VcharContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *VcharContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *VcharContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *VcharContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *VcharContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *VcharContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *VcharContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *VcharContext) TWO() antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, 0)
}

func (s *VcharContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *VcharContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *VcharContext) FIVE() antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, 0)
}

func (s *VcharContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *VcharContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *VcharContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *VcharContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *VcharContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *VcharContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *VcharContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserLESS_THAN, 0)
}

func (s *VcharContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *VcharContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(sdpParserGREATER_THAN, 0)
}

func (s *VcharContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *VcharContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *VcharContext) CAP_A() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_A, 0)
}

func (s *VcharContext) CAP_B() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_B, 0)
}

func (s *VcharContext) CAP_C() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_C, 0)
}

func (s *VcharContext) CAP_D() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_D, 0)
}

func (s *VcharContext) CAP_E() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_E, 0)
}

func (s *VcharContext) CAP_F() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_F, 0)
}

func (s *VcharContext) CAP_G() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_G, 0)
}

func (s *VcharContext) CAP_H() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_H, 0)
}

func (s *VcharContext) CAP_I() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_I, 0)
}

func (s *VcharContext) CAP_J() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_J, 0)
}

func (s *VcharContext) CAP_K() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_K, 0)
}

func (s *VcharContext) CAP_L() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_L, 0)
}

func (s *VcharContext) CAP_M() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_M, 0)
}

func (s *VcharContext) CAP_N() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_N, 0)
}

func (s *VcharContext) CAP_O() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_O, 0)
}

func (s *VcharContext) CAP_P() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_P, 0)
}

func (s *VcharContext) CAP_Q() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Q, 0)
}

func (s *VcharContext) CAP_R() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_R, 0)
}

func (s *VcharContext) CAP_S() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_S, 0)
}

func (s *VcharContext) CAP_T() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_T, 0)
}

func (s *VcharContext) CAP_U() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_U, 0)
}

func (s *VcharContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *VcharContext) CAP_W() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_W, 0)
}

func (s *VcharContext) CAP_X() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_X, 0)
}

func (s *VcharContext) CAP_Y() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Y, 0)
}

func (s *VcharContext) CAP_Z() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_Z, 0)
}

func (s *VcharContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *VcharContext) BACKSLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserBACKSLASH, 0)
}

func (s *VcharContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *VcharContext) CARAT() antlr.TerminalNode {
	return s.GetToken(sdpParserCARAT, 0)
}

func (s *VcharContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *VcharContext) ACCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserACCENT, 0)
}

func (s *VcharContext) A() antlr.TerminalNode {
	return s.GetToken(sdpParserA, 0)
}

func (s *VcharContext) B() antlr.TerminalNode {
	return s.GetToken(sdpParserB, 0)
}

func (s *VcharContext) C() antlr.TerminalNode {
	return s.GetToken(sdpParserC, 0)
}

func (s *VcharContext) D() antlr.TerminalNode {
	return s.GetToken(sdpParserD, 0)
}

func (s *VcharContext) E() antlr.TerminalNode {
	return s.GetToken(sdpParserE, 0)
}

func (s *VcharContext) F() antlr.TerminalNode {
	return s.GetToken(sdpParserF, 0)
}

func (s *VcharContext) G() antlr.TerminalNode {
	return s.GetToken(sdpParserG, 0)
}

func (s *VcharContext) H() antlr.TerminalNode {
	return s.GetToken(sdpParserH, 0)
}

func (s *VcharContext) I() antlr.TerminalNode {
	return s.GetToken(sdpParserI, 0)
}

func (s *VcharContext) J() antlr.TerminalNode {
	return s.GetToken(sdpParserJ, 0)
}

func (s *VcharContext) K() antlr.TerminalNode {
	return s.GetToken(sdpParserK, 0)
}

func (s *VcharContext) L() antlr.TerminalNode {
	return s.GetToken(sdpParserL, 0)
}

func (s *VcharContext) M() antlr.TerminalNode {
	return s.GetToken(sdpParserM, 0)
}

func (s *VcharContext) N() antlr.TerminalNode {
	return s.GetToken(sdpParserN, 0)
}

func (s *VcharContext) O() antlr.TerminalNode {
	return s.GetToken(sdpParserO, 0)
}

func (s *VcharContext) P() antlr.TerminalNode {
	return s.GetToken(sdpParserP, 0)
}

func (s *VcharContext) Q() antlr.TerminalNode {
	return s.GetToken(sdpParserQ, 0)
}

func (s *VcharContext) R() antlr.TerminalNode {
	return s.GetToken(sdpParserR, 0)
}

func (s *VcharContext) S() antlr.TerminalNode {
	return s.GetToken(sdpParserS, 0)
}

func (s *VcharContext) T() antlr.TerminalNode {
	return s.GetToken(sdpParserT, 0)
}

func (s *VcharContext) U() antlr.TerminalNode {
	return s.GetToken(sdpParserU, 0)
}

func (s *VcharContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *VcharContext) W() antlr.TerminalNode {
	return s.GetToken(sdpParserW, 0)
}

func (s *VcharContext) X() antlr.TerminalNode {
	return s.GetToken(sdpParserX, 0)
}

func (s *VcharContext) Y() antlr.TerminalNode {
	return s.GetToken(sdpParserY, 0)
}

func (s *VcharContext) Z() antlr.TerminalNode {
	return s.GetToken(sdpParserZ, 0)
}

func (s *VcharContext) LEFT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_CURLY_BRACE, 0)
}

func (s *VcharContext) PIPE() antlr.TerminalNode {
	return s.GetToken(sdpParserPIPE, 0)
}

func (s *VcharContext) RIGHT_CURLY_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_CURLY_BRACE, 0)
}

func (s *VcharContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *VcharContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VcharContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VcharContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterVchar(s)
	}
}

func (s *VcharContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitVchar(s)
	}
}

func (p *sdpParser) Vchar() (localctx IVcharContext) {
	localctx = NewVcharContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, sdpParserRULE_vchar)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1486)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-5)&-(0x1f+1)) == 0 && ((1<<uint((_la-5)))&((1<<(sdpParserEXCLAMATION-5))|(1<<(sdpParserQUOTE-5))|(1<<(sdpParserHASH-5))|(1<<(sdpParserDOLLAR-5))|(1<<(sdpParserPERCENT-5))|(1<<(sdpParserAMPERSAND-5))|(1<<(sdpParserAPOSTROPHE-5))|(1<<(sdpParserLEFT_PAREN-5))|(1<<(sdpParserRIGHT_PAREN-5))|(1<<(sdpParserASTERISK-5))|(1<<(sdpParserPLUS-5))|(1<<(sdpParserCOMMA-5))|(1<<(sdpParserDASH-5))|(1<<(sdpParserPERIOD-5))|(1<<(sdpParserSLASH-5))|(1<<(sdpParserZERO-5))|(1<<(sdpParserONE-5))|(1<<(sdpParserTWO-5))|(1<<(sdpParserTHREE-5))|(1<<(sdpParserFOUR-5))|(1<<(sdpParserFIVE-5))|(1<<(sdpParserSIX-5))|(1<<(sdpParserSEVEN-5))|(1<<(sdpParserEIGHT-5))|(1<<(sdpParserNINE-5))|(1<<(sdpParserCOLON-5))|(1<<(sdpParserSEMICOLON-5))|(1<<(sdpParserLESS_THAN-5))|(1<<(sdpParserEQUALS-5))|(1<<(sdpParserGREATER_THAN-5))|(1<<(sdpParserQUESTION-5))|(1<<(sdpParserAT-5)))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37))|(1<<(sdpParserLEFT_BRACE-37))|(1<<(sdpParserBACKSLASH-37))|(1<<(sdpParserRIGHT_BRACE-37))|(1<<(sdpParserCARAT-37))|(1<<(sdpParserUNDERSCORE-37))|(1<<(sdpParserACCENT-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69))|(1<<(sdpParserLEFT_CURLY_BRACE-69))|(1<<(sdpParserPIPE-69))|(1<<(sdpParserRIGHT_CURLY_BRACE-69))|(1<<(sdpParserTILDE-69)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IWspContext is an interface to support dynamic dispatch.
type IWspContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWspContext differentiates from other interfaces.
	IsWspContext()
}

type WspContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWspContext() *WspContext {
	var p = new(WspContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_wsp
	return p
}

func (*WspContext) IsWspContext() {}

func NewWspContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WspContext {
	var p = new(WspContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_wsp

	return p
}

func (s *WspContext) GetParser() antlr.Parser { return s.parser }

func (s *WspContext) Sp() ISpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpContext)
}

func (s *WspContext) Htab() IHtabContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHtabContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHtabContext)
}

func (s *WspContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WspContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WspContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterWsp(s)
	}
}

func (s *WspContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitWsp(s)
	}
}

func (p *sdpParser) Wsp() (localctx IWspContext) {
	localctx = NewWspContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, sdpParserRULE_wsp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1490)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserSPACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1488)
			p.Sp()
		}

	case sdpParserTAB:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1489)
			p.Htab()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IXxuriContext is an interface to support dynamic dispatch.
type IXxuriContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXxuriContext differentiates from other interfaces.
	IsXxuriContext()
}

type XxuriContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXxuriContext() *XxuriContext {
	var p = new(XxuriContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_xxuri
	return p
}

func (*XxuriContext) IsXxuriContext() {}

func NewXxuriContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XxuriContext {
	var p = new(XxuriContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_xxuri

	return p
}

func (s *XxuriContext) GetParser() antlr.Parser { return s.parser }

func (s *XxuriContext) Scheme() ISchemeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemeContext)
}

func (s *XxuriContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *XxuriContext) Hier_part() IHier_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHier_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHier_partContext)
}

func (s *XxuriContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *XxuriContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *XxuriContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *XxuriContext) Fragment_1() IFragment_1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFragment_1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFragment_1Context)
}

func (s *XxuriContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XxuriContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XxuriContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterXxuri(s)
	}
}

func (s *XxuriContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitXxuri(s)
	}
}

func (p *sdpParser) Xxuri() (localctx IXxuriContext) {
	localctx = NewXxuriContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, sdpParserRULE_xxuri)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1492)
		p.Scheme()
	}
	{
		p.SetState(1493)
		p.Match(sdpParserCOLON)
	}
	{
		p.SetState(1494)
		p.Hier_part()
	}
	p.SetState(1497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserQUESTION {
		{
			p.SetState(1495)
			p.Match(sdpParserQUESTION)
		}
		{
			p.SetState(1496)
			p.Query()
		}

	}
	p.SetState(1501)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserHASH {
		{
			p.SetState(1499)
			p.Match(sdpParserHASH)
		}
		{
			p.SetState(1500)
			p.Fragment_1()
		}

	}

	return localctx
}

// IHier_partContext is an interface to support dynamic dispatch.
type IHier_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHier_partContext differentiates from other interfaces.
	IsHier_partContext()
}

type Hier_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHier_partContext() *Hier_partContext {
	var p = new(Hier_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_hier_part
	return p
}

func (*Hier_partContext) IsHier_partContext() {}

func NewHier_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hier_partContext {
	var p = new(Hier_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_hier_part

	return p
}

func (s *Hier_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Hier_partContext) Authority() IAuthorityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthorityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthorityContext)
}

func (s *Hier_partContext) Path_abempty() IPath_abemptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_abemptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_abemptyContext)
}

func (s *Hier_partContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Hier_partContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Hier_partContext) Path_absolute() IPath_absoluteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_absoluteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_absoluteContext)
}

func (s *Hier_partContext) Path_rootless() IPath_rootlessContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_rootlessContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_rootlessContext)
}

func (s *Hier_partContext) Path_empty() IPath_emptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_emptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_emptyContext)
}

func (s *Hier_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hier_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hier_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterHier_part(s)
	}
}

func (s *Hier_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitHier_part(s)
	}
}

func (p *sdpParser) Hier_part() (localctx IHier_partContext) {
	localctx = NewHier_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, sdpParserRULE_hier_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1512)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1503)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(1504)
			p.Match(sdpParserSLASH)
		}

		{
			p.SetState(1506)
			p.Authority()
		}
		{
			p.SetState(1507)
			p.Path_abempty()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1509)
			p.Path_absolute()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1510)
			p.Path_rootless()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1511)
			p.Path_empty()
		}

	}

	return localctx
}

// IUri_referenceContext is an interface to support dynamic dispatch.
type IUri_referenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUri_referenceContext differentiates from other interfaces.
	IsUri_referenceContext()
}

type Uri_referenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUri_referenceContext() *Uri_referenceContext {
	var p = new(Uri_referenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_uri_reference
	return p
}

func (*Uri_referenceContext) IsUri_referenceContext() {}

func NewUri_referenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Uri_referenceContext {
	var p = new(Uri_referenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_uri_reference

	return p
}

func (s *Uri_referenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Uri_referenceContext) Xxuri() IXxuriContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXxuriContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXxuriContext)
}

func (s *Uri_referenceContext) Relative_ref() IRelative_refContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelative_refContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelative_refContext)
}

func (s *Uri_referenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Uri_referenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Uri_referenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterUri_reference(s)
	}
}

func (s *Uri_referenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitUri_reference(s)
	}
}

func (p *sdpParser) Uri_reference() (localctx IUri_referenceContext) {
	localctx = NewUri_referenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, sdpParserRULE_uri_reference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1516)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1514)
			p.Xxuri()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1515)
			p.Relative_ref()
		}

	}

	return localctx
}

// IAbsolute_uriContext is an interface to support dynamic dispatch.
type IAbsolute_uriContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbsolute_uriContext differentiates from other interfaces.
	IsAbsolute_uriContext()
}

type Absolute_uriContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbsolute_uriContext() *Absolute_uriContext {
	var p = new(Absolute_uriContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_absolute_uri
	return p
}

func (*Absolute_uriContext) IsAbsolute_uriContext() {}

func NewAbsolute_uriContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Absolute_uriContext {
	var p = new(Absolute_uriContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_absolute_uri

	return p
}

func (s *Absolute_uriContext) GetParser() antlr.Parser { return s.parser }

func (s *Absolute_uriContext) Scheme() ISchemeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemeContext)
}

func (s *Absolute_uriContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Absolute_uriContext) Hier_part() IHier_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHier_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHier_partContext)
}

func (s *Absolute_uriContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *Absolute_uriContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Absolute_uriContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Absolute_uriContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Absolute_uriContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAbsolute_uri(s)
	}
}

func (s *Absolute_uriContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAbsolute_uri(s)
	}
}

func (p *sdpParser) Absolute_uri() (localctx IAbsolute_uriContext) {
	localctx = NewAbsolute_uriContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, sdpParserRULE_absolute_uri)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1518)
		p.Scheme()
	}
	{
		p.SetState(1519)
		p.Match(sdpParserCOLON)
	}
	{
		p.SetState(1520)
		p.Hier_part()
	}
	p.SetState(1523)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserQUESTION {
		{
			p.SetState(1521)
			p.Match(sdpParserQUESTION)
		}
		{
			p.SetState(1522)
			p.Query()
		}

	}

	return localctx
}

// IRelative_refContext is an interface to support dynamic dispatch.
type IRelative_refContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelative_refContext differentiates from other interfaces.
	IsRelative_refContext()
}

type Relative_refContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelative_refContext() *Relative_refContext {
	var p = new(Relative_refContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_relative_ref
	return p
}

func (*Relative_refContext) IsRelative_refContext() {}

func NewRelative_refContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Relative_refContext {
	var p = new(Relative_refContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_relative_ref

	return p
}

func (s *Relative_refContext) GetParser() antlr.Parser { return s.parser }

func (s *Relative_refContext) Relative_part() IRelative_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelative_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelative_partContext)
}

func (s *Relative_refContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *Relative_refContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Relative_refContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *Relative_refContext) Fragment_1() IFragment_1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFragment_1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFragment_1Context)
}

func (s *Relative_refContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Relative_refContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Relative_refContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterRelative_ref(s)
	}
}

func (s *Relative_refContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitRelative_ref(s)
	}
}

func (p *sdpParser) Relative_ref() (localctx IRelative_refContext) {
	localctx = NewRelative_refContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, sdpParserRULE_relative_ref)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1525)
		p.Relative_part()
	}
	p.SetState(1528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserQUESTION {
		{
			p.SetState(1526)
			p.Match(sdpParserQUESTION)
		}
		{
			p.SetState(1527)
			p.Query()
		}

	}
	p.SetState(1532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserHASH {
		{
			p.SetState(1530)
			p.Match(sdpParserHASH)
		}
		{
			p.SetState(1531)
			p.Fragment_1()
		}

	}

	return localctx
}

// IRelative_partContext is an interface to support dynamic dispatch.
type IRelative_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelative_partContext differentiates from other interfaces.
	IsRelative_partContext()
}

type Relative_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelative_partContext() *Relative_partContext {
	var p = new(Relative_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_relative_part
	return p
}

func (*Relative_partContext) IsRelative_partContext() {}

func NewRelative_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Relative_partContext {
	var p = new(Relative_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_relative_part

	return p
}

func (s *Relative_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Relative_partContext) Authority() IAuthorityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthorityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthorityContext)
}

func (s *Relative_partContext) Path_abempty() IPath_abemptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_abemptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_abemptyContext)
}

func (s *Relative_partContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Relative_partContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Relative_partContext) Path_absolute() IPath_absoluteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_absoluteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_absoluteContext)
}

func (s *Relative_partContext) Path_noscheme() IPath_noschemeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_noschemeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_noschemeContext)
}

func (s *Relative_partContext) Path_empty() IPath_emptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_emptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_emptyContext)
}

func (s *Relative_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Relative_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Relative_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterRelative_part(s)
	}
}

func (s *Relative_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitRelative_part(s)
	}
}

func (p *sdpParser) Relative_part() (localctx IRelative_partContext) {
	localctx = NewRelative_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, sdpParserRULE_relative_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1543)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1534)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(1535)
			p.Match(sdpParserSLASH)
		}

		{
			p.SetState(1537)
			p.Authority()
		}
		{
			p.SetState(1538)
			p.Path_abempty()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1540)
			p.Path_absolute()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1541)
			p.Path_noscheme()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1542)
			p.Path_empty()
		}

	}

	return localctx
}

// ISchemeContext is an interface to support dynamic dispatch.
type ISchemeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchemeContext differentiates from other interfaces.
	IsSchemeContext()
}

type SchemeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemeContext() *SchemeContext {
	var p = new(SchemeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_scheme
	return p
}

func (*SchemeContext) IsSchemeContext() {}

func NewSchemeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemeContext {
	var p = new(SchemeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_scheme

	return p
}

func (s *SchemeContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemeContext) AllAlpha() []IAlphaContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlphaContext)(nil)).Elem())
	var tst = make([]IAlphaContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlphaContext)
		}
	}

	return tst
}

func (s *SchemeContext) Alpha(i int) IAlphaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlphaContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlphaContext)
}

func (s *SchemeContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *SchemeContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *SchemeContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPLUS)
}

func (s *SchemeContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, i)
}

func (s *SchemeContext) AllDASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserDASH)
}

func (s *SchemeContext) DASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, i)
}

func (s *SchemeContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *SchemeContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *SchemeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterScheme(s)
	}
}

func (s *SchemeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitScheme(s)
	}
}

func (p *sdpParser) Scheme() (localctx ISchemeContext) {
	localctx = NewSchemeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, sdpParserRULE_scheme)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1545)
		p.Alpha()
	}
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserPLUS)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(sdpParserCAP_A-37))|(1<<(sdpParserCAP_B-37))|(1<<(sdpParserCAP_C-37))|(1<<(sdpParserCAP_D-37))|(1<<(sdpParserCAP_E-37))|(1<<(sdpParserCAP_F-37))|(1<<(sdpParserCAP_G-37))|(1<<(sdpParserCAP_H-37))|(1<<(sdpParserCAP_I-37))|(1<<(sdpParserCAP_J-37))|(1<<(sdpParserCAP_K-37))|(1<<(sdpParserCAP_L-37))|(1<<(sdpParserCAP_M-37))|(1<<(sdpParserCAP_N-37))|(1<<(sdpParserCAP_O-37))|(1<<(sdpParserCAP_P-37))|(1<<(sdpParserCAP_Q-37))|(1<<(sdpParserCAP_R-37))|(1<<(sdpParserCAP_S-37))|(1<<(sdpParserCAP_T-37))|(1<<(sdpParserCAP_U-37))|(1<<(sdpParserCAP_V-37))|(1<<(sdpParserCAP_W-37))|(1<<(sdpParserCAP_X-37))|(1<<(sdpParserCAP_Y-37))|(1<<(sdpParserCAP_Z-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69))|(1<<(sdpParserG-69))|(1<<(sdpParserH-69))|(1<<(sdpParserI-69))|(1<<(sdpParserJ-69))|(1<<(sdpParserK-69))|(1<<(sdpParserL-69))|(1<<(sdpParserM-69))|(1<<(sdpParserN-69))|(1<<(sdpParserO-69))|(1<<(sdpParserP-69))|(1<<(sdpParserQ-69))|(1<<(sdpParserR-69))|(1<<(sdpParserS-69))|(1<<(sdpParserT-69))|(1<<(sdpParserU-69))|(1<<(sdpParserV-69))|(1<<(sdpParserW-69))|(1<<(sdpParserX-69))|(1<<(sdpParserY-69))|(1<<(sdpParserZ-69)))) != 0) {
		p.SetState(1551)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
			{
				p.SetState(1546)
				p.Alpha()
			}

		case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
			{
				p.SetState(1547)
				p.Digit()
			}

		case sdpParserPLUS:
			{
				p.SetState(1548)
				p.Match(sdpParserPLUS)
			}

		case sdpParserDASH:
			{
				p.SetState(1549)
				p.Match(sdpParserDASH)
			}

		case sdpParserPERIOD:
			{
				p.SetState(1550)
				p.Match(sdpParserPERIOD)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1555)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAuthorityContext is an interface to support dynamic dispatch.
type IAuthorityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuthorityContext differentiates from other interfaces.
	IsAuthorityContext()
}

type AuthorityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuthorityContext() *AuthorityContext {
	var p = new(AuthorityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_authority
	return p
}

func (*AuthorityContext) IsAuthorityContext() {}

func NewAuthorityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AuthorityContext {
	var p = new(AuthorityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_authority

	return p
}

func (s *AuthorityContext) GetParser() antlr.Parser { return s.parser }

func (s *AuthorityContext) Host() IHostContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHostContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHostContext)
}

func (s *AuthorityContext) Userinfo() IUserinfoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserinfoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserinfoContext)
}

func (s *AuthorityContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *AuthorityContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *AuthorityContext) Xport() IXportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXportContext)
}

func (s *AuthorityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuthorityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AuthorityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterAuthority(s)
	}
}

func (s *AuthorityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitAuthority(s)
	}
}

func (p *sdpParser) Authority() (localctx IAuthorityContext) {
	localctx = NewAuthorityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, sdpParserRULE_authority)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1559)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1556)
			p.Userinfo()
		}
		{
			p.SetState(1557)
			p.Match(sdpParserAT)
		}

	}
	{
		p.SetState(1561)
		p.Host()
	}
	p.SetState(1564)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == sdpParserCOLON {
		{
			p.SetState(1562)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1563)
			p.Xport()
		}

	}

	return localctx
}

// IUserinfoContext is an interface to support dynamic dispatch.
type IUserinfoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserinfoContext differentiates from other interfaces.
	IsUserinfoContext()
}

type UserinfoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserinfoContext() *UserinfoContext {
	var p = new(UserinfoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_userinfo
	return p
}

func (*UserinfoContext) IsUserinfoContext() {}

func NewUserinfoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserinfoContext {
	var p = new(UserinfoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_userinfo

	return p
}

func (s *UserinfoContext) GetParser() antlr.Parser { return s.parser }

func (s *UserinfoContext) AllUnreserved() []IUnreservedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnreservedContext)(nil)).Elem())
	var tst = make([]IUnreservedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnreservedContext)
		}
	}

	return tst
}

func (s *UserinfoContext) Unreserved(i int) IUnreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnreservedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnreservedContext)
}

func (s *UserinfoContext) AllPct_encoded() []IPct_encodedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPct_encodedContext)(nil)).Elem())
	var tst = make([]IPct_encodedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPct_encodedContext)
		}
	}

	return tst
}

func (s *UserinfoContext) Pct_encoded(i int) IPct_encodedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPct_encodedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPct_encodedContext)
}

func (s *UserinfoContext) AllSub_delims() []ISub_delimsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem())
	var tst = make([]ISub_delimsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISub_delimsContext)
		}
	}

	return tst
}

func (s *UserinfoContext) Sub_delims(i int) ISub_delimsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISub_delimsContext)
}

func (s *UserinfoContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOLON)
}

func (s *UserinfoContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, i)
}

func (s *UserinfoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserinfoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserinfoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterUserinfo(s)
	}
}

func (s *UserinfoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitUserinfo(s)
	}
}

func (p *sdpParser) Userinfo() (localctx IUserinfoContext) {
	localctx = NewUserinfoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, sdpParserRULE_userinfo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		p.SetState(1570)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserDASH, sdpParserPERIOD, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserUNDERSCORE, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserTILDE:
			{
				p.SetState(1566)
				p.Unreserved()
			}

		case sdpParserPERCENT:
			{
				p.SetState(1567)
				p.Pct_encoded()
			}

		case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserSEMICOLON, sdpParserEQUALS:
			{
				p.SetState(1568)
				p.Sub_delims()
			}

		case sdpParserCOLON:
			{
				p.SetState(1569)
				p.Match(sdpParserCOLON)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1574)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IHostContext is an interface to support dynamic dispatch.
type IHostContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHostContext differentiates from other interfaces.
	IsHostContext()
}

type HostContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHostContext() *HostContext {
	var p = new(HostContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_host
	return p
}

func (*HostContext) IsHostContext() {}

func NewHostContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HostContext {
	var p = new(HostContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_host

	return p
}

func (s *HostContext) GetParser() antlr.Parser { return s.parser }

func (s *HostContext) Ip_literal() IIp_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIp_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIp_literalContext)
}

func (s *HostContext) Ipv4address() IIpv4addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIpv4addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIpv4addressContext)
}

func (s *HostContext) Reg_name() IReg_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReg_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReg_nameContext)
}

func (s *HostContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HostContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HostContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterHost(s)
	}
}

func (s *HostContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitHost(s)
	}
}

func (p *sdpParser) Host() (localctx IHostContext) {
	localctx = NewHostContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, sdpParserRULE_host)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1578)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1575)
			p.Ip_literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1576)
			p.Ipv4address()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1577)
			p.Reg_name()
		}

	}

	return localctx
}

// IXportContext is an interface to support dynamic dispatch.
type IXportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXportContext differentiates from other interfaces.
	IsXportContext()
}

type XportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXportContext() *XportContext {
	var p = new(XportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_xport
	return p
}

func (*XportContext) IsXportContext() {}

func NewXportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XportContext {
	var p = new(XportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_xport

	return p
}

func (s *XportContext) GetParser() antlr.Parser { return s.parser }

func (s *XportContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *XportContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *XportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XportContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterXport(s)
	}
}

func (s *XportContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitXport(s)
	}
}

func (p *sdpParser) Xport() (localctx IXportContext) {
	localctx = NewXportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, sdpParserRULE_xport)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1583)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0 {
		{
			p.SetState(1580)
			p.Digit()
		}

		p.SetState(1585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIp_literalContext is an interface to support dynamic dispatch.
type IIp_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIp_literalContext differentiates from other interfaces.
	IsIp_literalContext()
}

type Ip_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIp_literalContext() *Ip_literalContext {
	var p = new(Ip_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ip_literal
	return p
}

func (*Ip_literalContext) IsIp_literalContext() {}

func NewIp_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ip_literalContext {
	var p = new(Ip_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ip_literal

	return p
}

func (s *Ip_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Ip_literalContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *Ip_literalContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *Ip_literalContext) Ipv6address() IIpv6addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIpv6addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIpv6addressContext)
}

func (s *Ip_literalContext) Ipvfuture() IIpvfutureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIpvfutureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIpvfutureContext)
}

func (s *Ip_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ip_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ip_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIp_literal(s)
	}
}

func (s *Ip_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIp_literal(s)
	}
}

func (p *sdpParser) Ip_literal() (localctx IIp_literalContext) {
	localctx = NewIp_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, sdpParserRULE_ip_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1586)
		p.Match(sdpParserLEFT_BRACE)
	}
	p.SetState(1589)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF:
		{
			p.SetState(1587)
			p.Ipv6address()
		}

	case sdpParserCAP_V, sdpParserV:
		{
			p.SetState(1588)
			p.Ipvfuture()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1591)
		p.Match(sdpParserRIGHT_BRACE)
	}

	return localctx
}

// IIpvfutureContext is an interface to support dynamic dispatch.
type IIpvfutureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIpvfutureContext differentiates from other interfaces.
	IsIpvfutureContext()
}

type IpvfutureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIpvfutureContext() *IpvfutureContext {
	var p = new(IpvfutureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ipvfuture
	return p
}

func (*IpvfutureContext) IsIpvfutureContext() {}

func NewIpvfutureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IpvfutureContext {
	var p = new(IpvfutureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ipvfuture

	return p
}

func (s *IpvfutureContext) GetParser() antlr.Parser { return s.parser }

func (s *IpvfutureContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *IpvfutureContext) CAP_V() antlr.TerminalNode {
	return s.GetToken(sdpParserCAP_V, 0)
}

func (s *IpvfutureContext) V() antlr.TerminalNode {
	return s.GetToken(sdpParserV, 0)
}

func (s *IpvfutureContext) AllHexdig() []IHexdigContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHexdigContext)(nil)).Elem())
	var tst = make([]IHexdigContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHexdigContext)
		}
	}

	return tst
}

func (s *IpvfutureContext) Hexdig(i int) IHexdigContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexdigContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHexdigContext)
}

func (s *IpvfutureContext) AllUnreserved() []IUnreservedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnreservedContext)(nil)).Elem())
	var tst = make([]IUnreservedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnreservedContext)
		}
	}

	return tst
}

func (s *IpvfutureContext) Unreserved(i int) IUnreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnreservedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnreservedContext)
}

func (s *IpvfutureContext) AllSub_delims() []ISub_delimsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem())
	var tst = make([]ISub_delimsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISub_delimsContext)
		}
	}

	return tst
}

func (s *IpvfutureContext) Sub_delims(i int) ISub_delimsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISub_delimsContext)
}

func (s *IpvfutureContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOLON)
}

func (s *IpvfutureContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, i)
}

func (s *IpvfutureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IpvfutureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IpvfutureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIpvfuture(s)
	}
}

func (s *IpvfutureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIpvfuture(s)
	}
}

func (p *sdpParser) Ipvfuture() (localctx IIpvfutureContext) {
	localctx = NewIpvfutureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, sdpParserRULE_ipvfuture)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1593)
		_la = p.GetTokenStream().LA(1)

		if !(_la == sdpParserCAP_V || _la == sdpParserV) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
		{
			p.SetState(1594)
			p.Hexdig()
		}

		p.SetState(1597)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1599)
		p.Match(sdpParserPERIOD)
	}
	p.SetState(1603)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		p.SetState(1603)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserDASH, sdpParserPERIOD, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserUNDERSCORE, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserTILDE:
			{
				p.SetState(1600)
				p.Unreserved()
			}

		case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserSEMICOLON, sdpParserEQUALS:
			{
				p.SetState(1601)
				p.Sub_delims()
			}

		case sdpParserCOLON:
			{
				p.SetState(1602)
				p.Match(sdpParserCOLON)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIpv6addressContext is an interface to support dynamic dispatch.
type IIpv6addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIpv6addressContext differentiates from other interfaces.
	IsIpv6addressContext()
}

type Ipv6addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIpv6addressContext() *Ipv6addressContext {
	var p = new(Ipv6addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ipv6address
	return p
}

func (*Ipv6addressContext) IsIpv6addressContext() {}

func NewIpv6addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ipv6addressContext {
	var p = new(Ipv6addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ipv6address

	return p
}

func (s *Ipv6addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Ipv6addressContext) Ls32() ILs32Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILs32Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILs32Context)
}

func (s *Ipv6addressContext) AllH16() []IH16Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IH16Context)(nil)).Elem())
	var tst = make([]IH16Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IH16Context)
		}
	}

	return tst
}

func (s *Ipv6addressContext) H16(i int) IH16Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IH16Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IH16Context)
}

func (s *Ipv6addressContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(sdpParserCOLON)
}

func (s *Ipv6addressContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, i)
}

func (s *Ipv6addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ipv6addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ipv6addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIpv6address(s)
	}
}

func (s *Ipv6addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIpv6address(s)
	}
}

func (p *sdpParser) Ipv6address() (localctx IIpv6addressContext) {
	localctx = NewIpv6addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, sdpParserRULE_ipv6address)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1917)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1607)
			p.H16()
		}
		{
			p.SetState(1608)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1610)
			p.H16()
		}
		{
			p.SetState(1611)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1613)
			p.H16()
		}
		{
			p.SetState(1614)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1616)
			p.H16()
		}
		{
			p.SetState(1617)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1619)
			p.H16()
		}
		{
			p.SetState(1620)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1622)
			p.H16()
		}
		{
			p.SetState(1623)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1625)
			p.Ls32()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1627)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1628)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1630)
			p.H16()
		}
		{
			p.SetState(1631)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1633)
			p.H16()
		}
		{
			p.SetState(1634)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1636)
			p.H16()
		}
		{
			p.SetState(1637)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1639)
			p.H16()
		}
		{
			p.SetState(1640)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1642)
			p.H16()
		}
		{
			p.SetState(1643)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1645)
			p.Ls32()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1648)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			{
				p.SetState(1647)
				p.H16()
			}

		}

		{
			p.SetState(1650)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1651)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1653)
			p.H16()
		}
		{
			p.SetState(1654)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1656)
			p.H16()
		}
		{
			p.SetState(1657)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1659)
			p.H16()
		}
		{
			p.SetState(1660)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1662)
			p.H16()
		}
		{
			p.SetState(1663)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1665)
			p.Ls32()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1673)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			p.SetState(1670)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1667)
					p.H16()
				}
				{
					p.SetState(1668)
					p.Match(sdpParserCOLON)
				}

			}
			{
				p.SetState(1672)
				p.H16()
			}

		}

		{
			p.SetState(1675)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1676)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1678)
			p.H16()
		}
		{
			p.SetState(1679)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1681)
			p.H16()
		}
		{
			p.SetState(1682)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1684)
			p.H16()
		}
		{
			p.SetState(1685)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1687)
			p.Ls32()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1703)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			p.SetState(1700)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1689)
					p.H16()
				}
				{
					p.SetState(1690)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1692)
					p.H16()
				}
				{
					p.SetState(1693)
					p.Match(sdpParserCOLON)
				}

			case 2:
				p.SetState(1698)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1695)
						p.H16()
					}
					{
						p.SetState(1696)
						p.Match(sdpParserCOLON)
					}

				}

			}

			{
				p.SetState(1702)
				p.H16()
			}

		}

		{
			p.SetState(1705)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1706)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1708)
			p.H16()
		}
		{
			p.SetState(1709)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1711)
			p.H16()
		}
		{
			p.SetState(1712)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1714)
			p.Ls32()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1739)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			p.SetState(1736)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1716)
					p.H16()
				}
				{
					p.SetState(1717)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1719)
					p.H16()
				}
				{
					p.SetState(1720)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1722)
					p.H16()
				}
				{
					p.SetState(1723)
					p.Match(sdpParserCOLON)
				}

			case 2:
				{
					p.SetState(1725)
					p.H16()
				}
				{
					p.SetState(1726)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1728)
					p.H16()
				}
				{
					p.SetState(1729)
					p.Match(sdpParserCOLON)
				}

			case 3:
				p.SetState(1734)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1731)
						p.H16()
					}
					{
						p.SetState(1732)
						p.Match(sdpParserCOLON)
					}

				}

			}

			{
				p.SetState(1738)
				p.H16()
			}

		}

		{
			p.SetState(1741)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1742)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1744)
			p.H16()
		}
		{
			p.SetState(1745)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1746)
			p.Ls32()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(1783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			p.SetState(1780)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1748)
					p.H16()
				}
				{
					p.SetState(1749)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1751)
					p.H16()
				}
				{
					p.SetState(1752)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1754)
					p.H16()
				}
				{
					p.SetState(1755)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1757)
					p.H16()
				}
				{
					p.SetState(1758)
					p.Match(sdpParserCOLON)
				}

			case 2:
				{
					p.SetState(1760)
					p.H16()
				}
				{
					p.SetState(1761)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1763)
					p.H16()
				}
				{
					p.SetState(1764)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1766)
					p.H16()
				}
				{
					p.SetState(1767)
					p.Match(sdpParserCOLON)
				}

			case 3:
				{
					p.SetState(1769)
					p.H16()
				}
				{
					p.SetState(1770)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1772)
					p.H16()
				}
				{
					p.SetState(1773)
					p.Match(sdpParserCOLON)
				}

			case 4:
				p.SetState(1778)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1775)
						p.H16()
					}
					{
						p.SetState(1776)
						p.Match(sdpParserCOLON)
					}

				}

			}

			{
				p.SetState(1782)
				p.H16()
			}

		}

		{
			p.SetState(1785)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1786)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1788)
			p.Ls32()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(1839)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			p.SetState(1836)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1789)
					p.H16()
				}
				{
					p.SetState(1790)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1792)
					p.H16()
				}
				{
					p.SetState(1793)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1795)
					p.H16()
				}
				{
					p.SetState(1796)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1798)
					p.H16()
				}
				{
					p.SetState(1799)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1801)
					p.H16()
				}
				{
					p.SetState(1802)
					p.Match(sdpParserCOLON)
				}

			case 2:
				{
					p.SetState(1804)
					p.H16()
				}
				{
					p.SetState(1805)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1807)
					p.H16()
				}
				{
					p.SetState(1808)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1810)
					p.H16()
				}
				{
					p.SetState(1811)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1813)
					p.H16()
				}
				{
					p.SetState(1814)
					p.Match(sdpParserCOLON)
				}

			case 3:
				{
					p.SetState(1816)
					p.H16()
				}
				{
					p.SetState(1817)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1819)
					p.H16()
				}
				{
					p.SetState(1820)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1822)
					p.H16()
				}
				{
					p.SetState(1823)
					p.Match(sdpParserCOLON)
				}

			case 4:
				{
					p.SetState(1825)
					p.H16()
				}
				{
					p.SetState(1826)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1828)
					p.H16()
				}
				{
					p.SetState(1829)
					p.Match(sdpParserCOLON)
				}

			case 5:
				p.SetState(1834)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1831)
						p.H16()
					}
					{
						p.SetState(1832)
						p.Match(sdpParserCOLON)
					}

				}

			}

			{
				p.SetState(1838)
				p.H16()
			}

		}

		{
			p.SetState(1841)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1842)
			p.Match(sdpParserCOLON)
		}

		{
			p.SetState(1844)
			p.H16()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(1913)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			p.SetState(1910)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1845)
					p.H16()
				}
				{
					p.SetState(1846)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1848)
					p.H16()
				}
				{
					p.SetState(1849)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1851)
					p.H16()
				}
				{
					p.SetState(1852)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1854)
					p.H16()
				}
				{
					p.SetState(1855)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1857)
					p.H16()
				}
				{
					p.SetState(1858)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1860)
					p.H16()
				}
				{
					p.SetState(1861)
					p.Match(sdpParserCOLON)
				}

			case 2:
				{
					p.SetState(1863)
					p.H16()
				}
				{
					p.SetState(1864)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1866)
					p.H16()
				}
				{
					p.SetState(1867)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1869)
					p.H16()
				}
				{
					p.SetState(1870)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1872)
					p.H16()
				}
				{
					p.SetState(1873)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1875)
					p.H16()
				}
				{
					p.SetState(1876)
					p.Match(sdpParserCOLON)
				}

			case 3:
				{
					p.SetState(1878)
					p.H16()
				}
				{
					p.SetState(1879)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1881)
					p.H16()
				}
				{
					p.SetState(1882)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1884)
					p.H16()
				}
				{
					p.SetState(1885)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1887)
					p.H16()
				}
				{
					p.SetState(1888)
					p.Match(sdpParserCOLON)
				}

			case 4:
				{
					p.SetState(1890)
					p.H16()
				}
				{
					p.SetState(1891)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1893)
					p.H16()
				}
				{
					p.SetState(1894)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1896)
					p.H16()
				}
				{
					p.SetState(1897)
					p.Match(sdpParserCOLON)
				}

			case 5:
				{
					p.SetState(1899)
					p.H16()
				}
				{
					p.SetState(1900)
					p.Match(sdpParserCOLON)
				}

				{
					p.SetState(1902)
					p.H16()
				}
				{
					p.SetState(1903)
					p.Match(sdpParserCOLON)
				}

			case 6:
				p.SetState(1908)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1905)
						p.H16()
					}
					{
						p.SetState(1906)
						p.Match(sdpParserCOLON)
					}

				}

			}

			{
				p.SetState(1912)
				p.H16()
			}

		}

		{
			p.SetState(1915)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1916)
			p.Match(sdpParserCOLON)
		}

	}

	return localctx
}

// IH16Context is an interface to support dynamic dispatch.
type IH16Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsH16Context differentiates from other interfaces.
	IsH16Context()
}

type H16Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyH16Context() *H16Context {
	var p = new(H16Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_h16
	return p
}

func (*H16Context) IsH16Context() {}

func NewH16Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *H16Context {
	var p = new(H16Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_h16

	return p
}

func (s *H16Context) GetParser() antlr.Parser { return s.parser }

func (s *H16Context) AllHexdig() []IHexdigContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHexdigContext)(nil)).Elem())
	var tst = make([]IHexdigContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHexdigContext)
		}
	}

	return tst
}

func (s *H16Context) Hexdig(i int) IHexdigContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexdigContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHexdigContext)
}

func (s *H16Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *H16Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *H16Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterH16(s)
	}
}

func (s *H16Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitH16(s)
	}
}

func (p *sdpParser) H16() (localctx IH16Context) {
	localctx = NewH16Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, sdpParserRULE_h16)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1919)
		p.Hexdig()
	}
	p.SetState(1930)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1920)
			p.Hexdig()
		}
		{
			p.SetState(1921)
			p.Hexdig()
		}
		{
			p.SetState(1922)
			p.Hexdig()
		}

	case 2:
		{
			p.SetState(1924)
			p.Hexdig()
		}
		{
			p.SetState(1925)
			p.Hexdig()
		}

	case 3:
		p.SetState(1928)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(sdpParserZERO-20))|(1<<(sdpParserONE-20))|(1<<(sdpParserTWO-20))|(1<<(sdpParserTHREE-20))|(1<<(sdpParserFOUR-20))|(1<<(sdpParserFIVE-20))|(1<<(sdpParserSIX-20))|(1<<(sdpParserSEVEN-20))|(1<<(sdpParserEIGHT-20))|(1<<(sdpParserNINE-20))|(1<<(sdpParserCAP_A-20))|(1<<(sdpParserCAP_B-20))|(1<<(sdpParserCAP_C-20))|(1<<(sdpParserCAP_D-20))|(1<<(sdpParserCAP_E-20))|(1<<(sdpParserCAP_F-20)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(sdpParserA-69))|(1<<(sdpParserB-69))|(1<<(sdpParserC-69))|(1<<(sdpParserD-69))|(1<<(sdpParserE-69))|(1<<(sdpParserF-69)))) != 0) {
			{
				p.SetState(1927)
				p.Hexdig()
			}

		}

	}

	return localctx
}

// ILs32Context is an interface to support dynamic dispatch.
type ILs32Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLs32Context differentiates from other interfaces.
	IsLs32Context()
}

type Ls32Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLs32Context() *Ls32Context {
	var p = new(Ls32Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ls32
	return p
}

func (*Ls32Context) IsLs32Context() {}

func NewLs32Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ls32Context {
	var p = new(Ls32Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ls32

	return p
}

func (s *Ls32Context) GetParser() antlr.Parser { return s.parser }

func (s *Ls32Context) AllH16() []IH16Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IH16Context)(nil)).Elem())
	var tst = make([]IH16Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IH16Context)
		}
	}

	return tst
}

func (s *Ls32Context) H16(i int) IH16Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IH16Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IH16Context)
}

func (s *Ls32Context) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Ls32Context) Ipv4address() IIpv4addressContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIpv4addressContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIpv4addressContext)
}

func (s *Ls32Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ls32Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ls32Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterLs32(s)
	}
}

func (s *Ls32Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitLs32(s)
	}
}

func (p *sdpParser) Ls32() (localctx ILs32Context) {
	localctx = NewLs32Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, sdpParserRULE_ls32)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1937)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1932)
			p.H16()
		}
		{
			p.SetState(1933)
			p.Match(sdpParserCOLON)
		}
		{
			p.SetState(1934)
			p.H16()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1936)
			p.Ipv4address()
		}

	}

	return localctx
}

// IIpv4addressContext is an interface to support dynamic dispatch.
type IIpv4addressContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIpv4addressContext differentiates from other interfaces.
	IsIpv4addressContext()
}

type Ipv4addressContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIpv4addressContext() *Ipv4addressContext {
	var p = new(Ipv4addressContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_ipv4address
	return p
}

func (*Ipv4addressContext) IsIpv4addressContext() {}

func NewIpv4addressContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ipv4addressContext {
	var p = new(Ipv4addressContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_ipv4address

	return p
}

func (s *Ipv4addressContext) GetParser() antlr.Parser { return s.parser }

func (s *Ipv4addressContext) AllDec_octet() []IDec_octetContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDec_octetContext)(nil)).Elem())
	var tst = make([]IDec_octetContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDec_octetContext)
		}
	}

	return tst
}

func (s *Ipv4addressContext) Dec_octet(i int) IDec_octetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDec_octetContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDec_octetContext)
}

func (s *Ipv4addressContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(sdpParserPERIOD)
}

func (s *Ipv4addressContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, i)
}

func (s *Ipv4addressContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ipv4addressContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ipv4addressContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterIpv4address(s)
	}
}

func (s *Ipv4addressContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitIpv4address(s)
	}
}

func (p *sdpParser) Ipv4address() (localctx IIpv4addressContext) {
	localctx = NewIpv4addressContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, sdpParserRULE_ipv4address)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1939)
		p.Dec_octet()
	}
	{
		p.SetState(1940)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(1941)
		p.Dec_octet()
	}
	{
		p.SetState(1942)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(1943)
		p.Dec_octet()
	}
	{
		p.SetState(1944)
		p.Match(sdpParserPERIOD)
	}
	{
		p.SetState(1945)
		p.Dec_octet()
	}

	return localctx
}

// IDec_octetContext is an interface to support dynamic dispatch.
type IDec_octetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDec_octetContext differentiates from other interfaces.
	IsDec_octetContext()
}

type Dec_octetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDec_octetContext() *Dec_octetContext {
	var p = new(Dec_octetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_dec_octet
	return p
}

func (*Dec_octetContext) IsDec_octetContext() {}

func NewDec_octetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dec_octetContext {
	var p = new(Dec_octetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_dec_octet

	return p
}

func (s *Dec_octetContext) GetParser() antlr.Parser { return s.parser }

func (s *Dec_octetContext) AllDigit() []IDigitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDigitContext)(nil)).Elem())
	var tst = make([]IDigitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDigitContext)
		}
	}

	return tst
}

func (s *Dec_octetContext) Digit(i int) IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *Dec_octetContext) ONE() antlr.TerminalNode {
	return s.GetToken(sdpParserONE, 0)
}

func (s *Dec_octetContext) AllTWO() []antlr.TerminalNode {
	return s.GetTokens(sdpParserTWO)
}

func (s *Dec_octetContext) TWO(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserTWO, i)
}

func (s *Dec_octetContext) THREE() antlr.TerminalNode {
	return s.GetToken(sdpParserTHREE, 0)
}

func (s *Dec_octetContext) FOUR() antlr.TerminalNode {
	return s.GetToken(sdpParserFOUR, 0)
}

func (s *Dec_octetContext) AllFIVE() []antlr.TerminalNode {
	return s.GetTokens(sdpParserFIVE)
}

func (s *Dec_octetContext) FIVE(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserFIVE, i)
}

func (s *Dec_octetContext) SIX() antlr.TerminalNode {
	return s.GetToken(sdpParserSIX, 0)
}

func (s *Dec_octetContext) SEVEN() antlr.TerminalNode {
	return s.GetToken(sdpParserSEVEN, 0)
}

func (s *Dec_octetContext) EIGHT() antlr.TerminalNode {
	return s.GetToken(sdpParserEIGHT, 0)
}

func (s *Dec_octetContext) NINE() antlr.TerminalNode {
	return s.GetToken(sdpParserNINE, 0)
}

func (s *Dec_octetContext) ZERO() antlr.TerminalNode {
	return s.GetToken(sdpParserZERO, 0)
}

func (s *Dec_octetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dec_octetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dec_octetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterDec_octet(s)
	}
}

func (s *Dec_octetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitDec_octet(s)
	}
}

func (p *sdpParser) Dec_octet() (localctx IDec_octetContext) {
	localctx = NewDec_octetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, sdpParserRULE_dec_octet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1961)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1947)
			p.Digit()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1948)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1949)
			p.Digit()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1950)
			p.Match(sdpParserONE)
		}

		{
			p.SetState(1951)
			p.Digit()
		}
		{
			p.SetState(1952)
			p.Digit()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1954)
			p.Match(sdpParserTWO)
		}
		{
			p.SetState(1955)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1956)
			p.Digit()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1957)
			p.Match(sdpParserTWO)
		}
		{
			p.SetState(1958)
			p.Match(sdpParserFIVE)
		}

		{
			p.SetState(1960)
			_la = p.GetTokenStream().LA(1)

			if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IReg_nameContext is an interface to support dynamic dispatch.
type IReg_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReg_nameContext differentiates from other interfaces.
	IsReg_nameContext()
}

type Reg_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReg_nameContext() *Reg_nameContext {
	var p = new(Reg_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_reg_name
	return p
}

func (*Reg_nameContext) IsReg_nameContext() {}

func NewReg_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reg_nameContext {
	var p = new(Reg_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_reg_name

	return p
}

func (s *Reg_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Reg_nameContext) AllUnreserved() []IUnreservedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnreservedContext)(nil)).Elem())
	var tst = make([]IUnreservedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnreservedContext)
		}
	}

	return tst
}

func (s *Reg_nameContext) Unreserved(i int) IUnreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnreservedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnreservedContext)
}

func (s *Reg_nameContext) AllPct_encoded() []IPct_encodedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPct_encodedContext)(nil)).Elem())
	var tst = make([]IPct_encodedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPct_encodedContext)
		}
	}

	return tst
}

func (s *Reg_nameContext) Pct_encoded(i int) IPct_encodedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPct_encodedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPct_encodedContext)
}

func (s *Reg_nameContext) AllSub_delims() []ISub_delimsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem())
	var tst = make([]ISub_delimsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISub_delimsContext)
		}
	}

	return tst
}

func (s *Reg_nameContext) Sub_delims(i int) ISub_delimsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISub_delimsContext)
}

func (s *Reg_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reg_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reg_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterReg_name(s)
	}
}

func (s *Reg_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitReg_name(s)
	}
}

func (p *sdpParser) Reg_name() (localctx IReg_nameContext) {
	localctx = NewReg_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, sdpParserRULE_reg_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1968)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		p.SetState(1966)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserDASH, sdpParserPERIOD, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserUNDERSCORE, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserTILDE:
			{
				p.SetState(1963)
				p.Unreserved()
			}

		case sdpParserPERCENT:
			{
				p.SetState(1964)
				p.Pct_encoded()
			}

		case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserSEMICOLON, sdpParserEQUALS:
			{
				p.SetState(1965)
				p.Sub_delims()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1970)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPathContext is an interface to support dynamic dispatch.
type IPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPathContext differentiates from other interfaces.
	IsPathContext()
}

type PathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathContext() *PathContext {
	var p = new(PathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_path
	return p
}

func (*PathContext) IsPathContext() {}

func NewPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathContext {
	var p = new(PathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_path

	return p
}

func (s *PathContext) GetParser() antlr.Parser { return s.parser }

func (s *PathContext) Path_abempty() IPath_abemptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_abemptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_abemptyContext)
}

func (s *PathContext) Path_absolute() IPath_absoluteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_absoluteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_absoluteContext)
}

func (s *PathContext) Path_noscheme() IPath_noschemeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_noschemeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_noschemeContext)
}

func (s *PathContext) Path_rootless() IPath_rootlessContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_rootlessContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_rootlessContext)
}

func (s *PathContext) Path_empty() IPath_emptyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPath_emptyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPath_emptyContext)
}

func (s *PathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPath(s)
	}
}

func (s *PathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPath(s)
	}
}

func (p *sdpParser) Path() (localctx IPathContext) {
	localctx = NewPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, sdpParserRULE_path)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1976)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1971)
			p.Path_abempty()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1972)
			p.Path_absolute()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1973)
			p.Path_noscheme()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1974)
			p.Path_rootless()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1975)
			p.Path_empty()
		}

	}

	return localctx
}

// IPath_abemptyContext is an interface to support dynamic dispatch.
type IPath_abemptyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_abemptyContext differentiates from other interfaces.
	IsPath_abemptyContext()
}

type Path_abemptyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_abemptyContext() *Path_abemptyContext {
	var p = new(Path_abemptyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_path_abempty
	return p
}

func (*Path_abemptyContext) IsPath_abemptyContext() {}

func NewPath_abemptyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_abemptyContext {
	var p = new(Path_abemptyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_path_abempty

	return p
}

func (s *Path_abemptyContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_abemptyContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Path_abemptyContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Path_abemptyContext) AllSegment() []ISegmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISegmentContext)(nil)).Elem())
	var tst = make([]ISegmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISegmentContext)
		}
	}

	return tst
}

func (s *Path_abemptyContext) Segment(i int) ISegmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISegmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISegmentContext)
}

func (s *Path_abemptyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_abemptyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_abemptyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPath_abempty(s)
	}
}

func (s *Path_abemptyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPath_abempty(s)
	}
}

func (p *sdpParser) Path_abempty() (localctx IPath_abemptyContext) {
	localctx = NewPath_abemptyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, sdpParserRULE_path_abempty)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserSLASH {
		{
			p.SetState(1978)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(1979)
			p.Segment()
		}

		p.SetState(1984)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPath_absoluteContext is an interface to support dynamic dispatch.
type IPath_absoluteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_absoluteContext differentiates from other interfaces.
	IsPath_absoluteContext()
}

type Path_absoluteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_absoluteContext() *Path_absoluteContext {
	var p = new(Path_absoluteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_path_absolute
	return p
}

func (*Path_absoluteContext) IsPath_absoluteContext() {}

func NewPath_absoluteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_absoluteContext {
	var p = new(Path_absoluteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_path_absolute

	return p
}

func (s *Path_absoluteContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_absoluteContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Path_absoluteContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Path_absoluteContext) Segment_nz() ISegment_nzContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISegment_nzContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISegment_nzContext)
}

func (s *Path_absoluteContext) AllSegment() []ISegmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISegmentContext)(nil)).Elem())
	var tst = make([]ISegmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISegmentContext)
		}
	}

	return tst
}

func (s *Path_absoluteContext) Segment(i int) ISegmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISegmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISegmentContext)
}

func (s *Path_absoluteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_absoluteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_absoluteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPath_absolute(s)
	}
}

func (s *Path_absoluteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPath_absolute(s)
	}
}

func (p *sdpParser) Path_absolute() (localctx IPath_absoluteContext) {
	localctx = NewPath_absoluteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, sdpParserRULE_path_absolute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1985)
		p.Match(sdpParserSLASH)
	}
	p.SetState(1994)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		{
			p.SetState(1986)
			p.Segment_nz()
		}
		p.SetState(1991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == sdpParserSLASH {
			{
				p.SetState(1987)
				p.Match(sdpParserSLASH)
			}
			{
				p.SetState(1988)
				p.Segment()
			}

			p.SetState(1993)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IPath_noschemeContext is an interface to support dynamic dispatch.
type IPath_noschemeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_noschemeContext differentiates from other interfaces.
	IsPath_noschemeContext()
}

type Path_noschemeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_noschemeContext() *Path_noschemeContext {
	var p = new(Path_noschemeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_path_noscheme
	return p
}

func (*Path_noschemeContext) IsPath_noschemeContext() {}

func NewPath_noschemeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_noschemeContext {
	var p = new(Path_noschemeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_path_noscheme

	return p
}

func (s *Path_noschemeContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_noschemeContext) Segment_nz_nc() ISegment_nz_ncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISegment_nz_ncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISegment_nz_ncContext)
}

func (s *Path_noschemeContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Path_noschemeContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Path_noschemeContext) AllSegment() []ISegmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISegmentContext)(nil)).Elem())
	var tst = make([]ISegmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISegmentContext)
		}
	}

	return tst
}

func (s *Path_noschemeContext) Segment(i int) ISegmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISegmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISegmentContext)
}

func (s *Path_noschemeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_noschemeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_noschemeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPath_noscheme(s)
	}
}

func (s *Path_noschemeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPath_noscheme(s)
	}
}

func (p *sdpParser) Path_noscheme() (localctx IPath_noschemeContext) {
	localctx = NewPath_noschemeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, sdpParserRULE_path_noscheme)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1996)
		p.Segment_nz_nc()
	}
	p.SetState(2001)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserSLASH {
		{
			p.SetState(1997)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(1998)
			p.Segment()
		}

		p.SetState(2003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPath_rootlessContext is an interface to support dynamic dispatch.
type IPath_rootlessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_rootlessContext differentiates from other interfaces.
	IsPath_rootlessContext()
}

type Path_rootlessContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_rootlessContext() *Path_rootlessContext {
	var p = new(Path_rootlessContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_path_rootless
	return p
}

func (*Path_rootlessContext) IsPath_rootlessContext() {}

func NewPath_rootlessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_rootlessContext {
	var p = new(Path_rootlessContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_path_rootless

	return p
}

func (s *Path_rootlessContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_rootlessContext) Segment_nz() ISegment_nzContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISegment_nzContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISegment_nzContext)
}

func (s *Path_rootlessContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Path_rootlessContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Path_rootlessContext) AllSegment() []ISegmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISegmentContext)(nil)).Elem())
	var tst = make([]ISegmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISegmentContext)
		}
	}

	return tst
}

func (s *Path_rootlessContext) Segment(i int) ISegmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISegmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISegmentContext)
}

func (s *Path_rootlessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_rootlessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_rootlessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPath_rootless(s)
	}
}

func (s *Path_rootlessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPath_rootless(s)
	}
}

func (p *sdpParser) Path_rootless() (localctx IPath_rootlessContext) {
	localctx = NewPath_rootlessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, sdpParserRULE_path_rootless)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2004)
		p.Segment_nz()
	}
	p.SetState(2009)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == sdpParserSLASH {
		{
			p.SetState(2005)
			p.Match(sdpParserSLASH)
		}
		{
			p.SetState(2006)
			p.Segment()
		}

		p.SetState(2011)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPath_emptyContext is an interface to support dynamic dispatch.
type IPath_emptyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_emptyContext differentiates from other interfaces.
	IsPath_emptyContext()
}

type Path_emptyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_emptyContext() *Path_emptyContext {
	var p = new(Path_emptyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_path_empty
	return p
}

func (*Path_emptyContext) IsPath_emptyContext() {}

func NewPath_emptyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_emptyContext {
	var p = new(Path_emptyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_path_empty

	return p
}

func (s *Path_emptyContext) GetParser() antlr.Parser { return s.parser }
func (s *Path_emptyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_emptyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_emptyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPath_empty(s)
	}
}

func (s *Path_emptyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPath_empty(s)
	}
}

func (p *sdpParser) Path_empty() (localctx IPath_emptyContext) {
	localctx = NewPath_emptyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, sdpParserRULE_path_empty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)

	return localctx
}

// ISegmentContext is an interface to support dynamic dispatch.
type ISegmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSegmentContext differentiates from other interfaces.
	IsSegmentContext()
}

type SegmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySegmentContext() *SegmentContext {
	var p = new(SegmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_segment
	return p
}

func (*SegmentContext) IsSegmentContext() {}

func NewSegmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SegmentContext {
	var p = new(SegmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_segment

	return p
}

func (s *SegmentContext) GetParser() antlr.Parser { return s.parser }

func (s *SegmentContext) AllPchar() []IPcharContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPcharContext)(nil)).Elem())
	var tst = make([]IPcharContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPcharContext)
		}
	}

	return tst
}

func (s *SegmentContext) Pchar(i int) IPcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPcharContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPcharContext)
}

func (s *SegmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SegmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SegmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSegment(s)
	}
}

func (s *SegmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSegment(s)
	}
}

func (p *sdpParser) Segment() (localctx ISegmentContext) {
	localctx = NewSegmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, sdpParserRULE_segment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		{
			p.SetState(2014)
			p.Pchar()
		}

		p.SetState(2019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISegment_nzContext is an interface to support dynamic dispatch.
type ISegment_nzContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSegment_nzContext differentiates from other interfaces.
	IsSegment_nzContext()
}

type Segment_nzContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySegment_nzContext() *Segment_nzContext {
	var p = new(Segment_nzContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_segment_nz
	return p
}

func (*Segment_nzContext) IsSegment_nzContext() {}

func NewSegment_nzContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Segment_nzContext {
	var p = new(Segment_nzContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_segment_nz

	return p
}

func (s *Segment_nzContext) GetParser() antlr.Parser { return s.parser }

func (s *Segment_nzContext) AllPchar() []IPcharContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPcharContext)(nil)).Elem())
	var tst = make([]IPcharContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPcharContext)
		}
	}

	return tst
}

func (s *Segment_nzContext) Pchar(i int) IPcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPcharContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPcharContext)
}

func (s *Segment_nzContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Segment_nzContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Segment_nzContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSegment_nz(s)
	}
}

func (s *Segment_nzContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSegment_nz(s)
	}
}

func (p *sdpParser) Segment_nz() (localctx ISegment_nzContext) {
	localctx = NewSegment_nzContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, sdpParserRULE_segment_nz)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2021)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		{
			p.SetState(2020)
			p.Pchar()
		}

		p.SetState(2023)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISegment_nz_ncContext is an interface to support dynamic dispatch.
type ISegment_nz_ncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSegment_nz_ncContext differentiates from other interfaces.
	IsSegment_nz_ncContext()
}

type Segment_nz_ncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySegment_nz_ncContext() *Segment_nz_ncContext {
	var p = new(Segment_nz_ncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_segment_nz_nc
	return p
}

func (*Segment_nz_ncContext) IsSegment_nz_ncContext() {}

func NewSegment_nz_ncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Segment_nz_ncContext {
	var p = new(Segment_nz_ncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_segment_nz_nc

	return p
}

func (s *Segment_nz_ncContext) GetParser() antlr.Parser { return s.parser }

func (s *Segment_nz_ncContext) AllUnreserved() []IUnreservedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnreservedContext)(nil)).Elem())
	var tst = make([]IUnreservedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnreservedContext)
		}
	}

	return tst
}

func (s *Segment_nz_ncContext) Unreserved(i int) IUnreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnreservedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnreservedContext)
}

func (s *Segment_nz_ncContext) AllPct_encoded() []IPct_encodedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPct_encodedContext)(nil)).Elem())
	var tst = make([]IPct_encodedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPct_encodedContext)
		}
	}

	return tst
}

func (s *Segment_nz_ncContext) Pct_encoded(i int) IPct_encodedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPct_encodedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPct_encodedContext)
}

func (s *Segment_nz_ncContext) AllSub_delims() []ISub_delimsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem())
	var tst = make([]ISub_delimsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISub_delimsContext)
		}
	}

	return tst
}

func (s *Segment_nz_ncContext) Sub_delims(i int) ISub_delimsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISub_delimsContext)
}

func (s *Segment_nz_ncContext) AllAT() []antlr.TerminalNode {
	return s.GetTokens(sdpParserAT)
}

func (s *Segment_nz_ncContext) AT(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserAT, i)
}

func (s *Segment_nz_ncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Segment_nz_ncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Segment_nz_ncContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSegment_nz_nc(s)
	}
}

func (s *Segment_nz_ncContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSegment_nz_nc(s)
	}
}

func (p *sdpParser) Segment_nz_nc() (localctx ISegment_nz_ncContext) {
	localctx = NewSegment_nz_ncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, sdpParserRULE_segment_nz_nc)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2029)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		p.SetState(2029)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserDASH, sdpParserPERIOD, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserUNDERSCORE, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserTILDE:
			{
				p.SetState(2025)
				p.Unreserved()
			}

		case sdpParserPERCENT:
			{
				p.SetState(2026)
				p.Pct_encoded()
			}

		case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserSEMICOLON, sdpParserEQUALS:
			{
				p.SetState(2027)
				p.Sub_delims()
			}

		case sdpParserAT:
			{
				p.SetState(2028)
				p.Match(sdpParserAT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2031)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPcharContext is an interface to support dynamic dispatch.
type IPcharContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPcharContext differentiates from other interfaces.
	IsPcharContext()
}

type PcharContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPcharContext() *PcharContext {
	var p = new(PcharContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_pchar
	return p
}

func (*PcharContext) IsPcharContext() {}

func NewPcharContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PcharContext {
	var p = new(PcharContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_pchar

	return p
}

func (s *PcharContext) GetParser() antlr.Parser { return s.parser }

func (s *PcharContext) Unreserved() IUnreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnreservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnreservedContext)
}

func (s *PcharContext) Pct_encoded() IPct_encodedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPct_encodedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPct_encodedContext)
}

func (s *PcharContext) Sub_delims() ISub_delimsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISub_delimsContext)
}

func (s *PcharContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *PcharContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *PcharContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PcharContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PcharContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPchar(s)
	}
}

func (s *PcharContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPchar(s)
	}
}

func (p *sdpParser) Pchar() (localctx IPcharContext) {
	localctx = NewPcharContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, sdpParserRULE_pchar)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2038)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserDASH, sdpParserPERIOD, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserUNDERSCORE, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserTILDE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2033)
			p.Unreserved()
		}

	case sdpParserPERCENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2034)
			p.Pct_encoded()
		}

	case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserSEMICOLON, sdpParserEQUALS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2035)
			p.Sub_delims()
		}

	case sdpParserCOLON:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2036)
			p.Match(sdpParserCOLON)
		}

	case sdpParserAT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2037)
			p.Match(sdpParserAT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_query
	return p
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) AllPchar() []IPcharContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPcharContext)(nil)).Elem())
	var tst = make([]IPcharContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPcharContext)
		}
	}

	return tst
}

func (s *QueryContext) Pchar(i int) IPcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPcharContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPcharContext)
}

func (s *QueryContext) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *QueryContext) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *QueryContext) AllQUESTION() []antlr.TerminalNode {
	return s.GetTokens(sdpParserQUESTION)
}

func (s *QueryContext) QUESTION(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, i)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterQuery(s)
	}
}

func (s *QueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitQuery(s)
	}
}

func (p *sdpParser) Query() (localctx IQueryContext) {
	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, sdpParserRULE_query)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2045)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		p.SetState(2043)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserEQUALS, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserUNDERSCORE, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserTILDE:
			{
				p.SetState(2040)
				p.Pchar()
			}

		case sdpParserSLASH:
			{
				p.SetState(2041)
				p.Match(sdpParserSLASH)
			}

		case sdpParserQUESTION:
			{
				p.SetState(2042)
				p.Match(sdpParserQUESTION)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFragment_1Context is an interface to support dynamic dispatch.
type IFragment_1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFragment_1Context differentiates from other interfaces.
	IsFragment_1Context()
}

type Fragment_1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFragment_1Context() *Fragment_1Context {
	var p = new(Fragment_1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_fragment_1
	return p
}

func (*Fragment_1Context) IsFragment_1Context() {}

func NewFragment_1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fragment_1Context {
	var p = new(Fragment_1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_fragment_1

	return p
}

func (s *Fragment_1Context) GetParser() antlr.Parser { return s.parser }

func (s *Fragment_1Context) AllPchar() []IPcharContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPcharContext)(nil)).Elem())
	var tst = make([]IPcharContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPcharContext)
		}
	}

	return tst
}

func (s *Fragment_1Context) Pchar(i int) IPcharContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPcharContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPcharContext)
}

func (s *Fragment_1Context) AllSLASH() []antlr.TerminalNode {
	return s.GetTokens(sdpParserSLASH)
}

func (s *Fragment_1Context) SLASH(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, i)
}

func (s *Fragment_1Context) AllQUESTION() []antlr.TerminalNode {
	return s.GetTokens(sdpParserQUESTION)
}

func (s *Fragment_1Context) QUESTION(i int) antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, i)
}

func (s *Fragment_1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fragment_1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fragment_1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterFragment_1(s)
	}
}

func (s *Fragment_1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitFragment_1(s)
	}
}

func (p *sdpParser) Fragment_1() (localctx IFragment_1Context) {
	localctx = NewFragment_1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, sdpParserRULE_fragment_1)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserEXCLAMATION)|(1<<sdpParserDOLLAR)|(1<<sdpParserPERCENT)|(1<<sdpParserAMPERSAND)|(1<<sdpParserAPOSTROPHE)|(1<<sdpParserLEFT_PAREN)|(1<<sdpParserRIGHT_PAREN)|(1<<sdpParserASTERISK)|(1<<sdpParserPLUS)|(1<<sdpParserCOMMA)|(1<<sdpParserDASH)|(1<<sdpParserPERIOD)|(1<<sdpParserSLASH)|(1<<sdpParserZERO)|(1<<sdpParserONE)|(1<<sdpParserTWO)|(1<<sdpParserTHREE)|(1<<sdpParserFOUR)|(1<<sdpParserFIVE)|(1<<sdpParserSIX)|(1<<sdpParserSEVEN)|(1<<sdpParserEIGHT)|(1<<sdpParserNINE)|(1<<sdpParserCOLON)|(1<<sdpParserSEMICOLON))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(sdpParserEQUALS-33))|(1<<(sdpParserQUESTION-33))|(1<<(sdpParserAT-33))|(1<<(sdpParserCAP_A-33))|(1<<(sdpParserCAP_B-33))|(1<<(sdpParserCAP_C-33))|(1<<(sdpParserCAP_D-33))|(1<<(sdpParserCAP_E-33))|(1<<(sdpParserCAP_F-33))|(1<<(sdpParserCAP_G-33))|(1<<(sdpParserCAP_H-33))|(1<<(sdpParserCAP_I-33))|(1<<(sdpParserCAP_J-33))|(1<<(sdpParserCAP_K-33))|(1<<(sdpParserCAP_L-33))|(1<<(sdpParserCAP_M-33))|(1<<(sdpParserCAP_N-33))|(1<<(sdpParserCAP_O-33))|(1<<(sdpParserCAP_P-33))|(1<<(sdpParserCAP_Q-33))|(1<<(sdpParserCAP_R-33))|(1<<(sdpParserCAP_S-33))|(1<<(sdpParserCAP_T-33))|(1<<(sdpParserCAP_U-33))|(1<<(sdpParserCAP_V-33))|(1<<(sdpParserCAP_W-33))|(1<<(sdpParserCAP_X-33))|(1<<(sdpParserCAP_Y-33))|(1<<(sdpParserCAP_Z-33)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(sdpParserUNDERSCORE-67))|(1<<(sdpParserA-67))|(1<<(sdpParserB-67))|(1<<(sdpParserC-67))|(1<<(sdpParserD-67))|(1<<(sdpParserE-67))|(1<<(sdpParserF-67))|(1<<(sdpParserG-67))|(1<<(sdpParserH-67))|(1<<(sdpParserI-67))|(1<<(sdpParserJ-67))|(1<<(sdpParserK-67))|(1<<(sdpParserL-67))|(1<<(sdpParserM-67))|(1<<(sdpParserN-67))|(1<<(sdpParserO-67))|(1<<(sdpParserP-67))|(1<<(sdpParserQ-67))|(1<<(sdpParserR-67))|(1<<(sdpParserS-67))|(1<<(sdpParserT-67))|(1<<(sdpParserU-67))|(1<<(sdpParserV-67))|(1<<(sdpParserW-67))|(1<<(sdpParserX-67))|(1<<(sdpParserY-67))|(1<<(sdpParserZ-67))|(1<<(sdpParserTILDE-67)))) != 0) {
		p.SetState(2051)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserPERCENT, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserDASH, sdpParserPERIOD, sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE, sdpParserCOLON, sdpParserSEMICOLON, sdpParserEQUALS, sdpParserAT, sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserUNDERSCORE, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ, sdpParserTILDE:
			{
				p.SetState(2048)
				p.Pchar()
			}

		case sdpParserSLASH:
			{
				p.SetState(2049)
				p.Match(sdpParserSLASH)
			}

		case sdpParserQUESTION:
			{
				p.SetState(2050)
				p.Match(sdpParserQUESTION)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPct_encodedContext is an interface to support dynamic dispatch.
type IPct_encodedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPct_encodedContext differentiates from other interfaces.
	IsPct_encodedContext()
}

type Pct_encodedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPct_encodedContext() *Pct_encodedContext {
	var p = new(Pct_encodedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_pct_encoded
	return p
}

func (*Pct_encodedContext) IsPct_encodedContext() {}

func NewPct_encodedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pct_encodedContext {
	var p = new(Pct_encodedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_pct_encoded

	return p
}

func (s *Pct_encodedContext) GetParser() antlr.Parser { return s.parser }

func (s *Pct_encodedContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(sdpParserPERCENT, 0)
}

func (s *Pct_encodedContext) AllHexdig() []IHexdigContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHexdigContext)(nil)).Elem())
	var tst = make([]IHexdigContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHexdigContext)
		}
	}

	return tst
}

func (s *Pct_encodedContext) Hexdig(i int) IHexdigContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexdigContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHexdigContext)
}

func (s *Pct_encodedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pct_encodedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pct_encodedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterPct_encoded(s)
	}
}

func (s *Pct_encodedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitPct_encoded(s)
	}
}

func (p *sdpParser) Pct_encoded() (localctx IPct_encodedContext) {
	localctx = NewPct_encodedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, sdpParserRULE_pct_encoded)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2056)
		p.Match(sdpParserPERCENT)
	}
	{
		p.SetState(2057)
		p.Hexdig()
	}
	{
		p.SetState(2058)
		p.Hexdig()
	}

	return localctx
}

// IUnreservedContext is an interface to support dynamic dispatch.
type IUnreservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnreservedContext differentiates from other interfaces.
	IsUnreservedContext()
}

type UnreservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnreservedContext() *UnreservedContext {
	var p = new(UnreservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_unreserved
	return p
}

func (*UnreservedContext) IsUnreservedContext() {}

func NewUnreservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnreservedContext {
	var p = new(UnreservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_unreserved

	return p
}

func (s *UnreservedContext) GetParser() antlr.Parser { return s.parser }

func (s *UnreservedContext) Alpha() IAlphaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlphaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlphaContext)
}

func (s *UnreservedContext) Digit() IDigitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDigitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDigitContext)
}

func (s *UnreservedContext) DASH() antlr.TerminalNode {
	return s.GetToken(sdpParserDASH, 0)
}

func (s *UnreservedContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(sdpParserPERIOD, 0)
}

func (s *UnreservedContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(sdpParserUNDERSCORE, 0)
}

func (s *UnreservedContext) TILDE() antlr.TerminalNode {
	return s.GetToken(sdpParserTILDE, 0)
}

func (s *UnreservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnreservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnreservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterUnreserved(s)
	}
}

func (s *UnreservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitUnreserved(s)
	}
}

func (p *sdpParser) Unreserved() (localctx IUnreservedContext) {
	localctx = NewUnreservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, sdpParserRULE_unreserved)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2066)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserCAP_A, sdpParserCAP_B, sdpParserCAP_C, sdpParserCAP_D, sdpParserCAP_E, sdpParserCAP_F, sdpParserCAP_G, sdpParserCAP_H, sdpParserCAP_I, sdpParserCAP_J, sdpParserCAP_K, sdpParserCAP_L, sdpParserCAP_M, sdpParserCAP_N, sdpParserCAP_O, sdpParserCAP_P, sdpParserCAP_Q, sdpParserCAP_R, sdpParserCAP_S, sdpParserCAP_T, sdpParserCAP_U, sdpParserCAP_V, sdpParserCAP_W, sdpParserCAP_X, sdpParserCAP_Y, sdpParserCAP_Z, sdpParserA, sdpParserB, sdpParserC, sdpParserD, sdpParserE, sdpParserF, sdpParserG, sdpParserH, sdpParserI, sdpParserJ, sdpParserK, sdpParserL, sdpParserM, sdpParserN, sdpParserO, sdpParserP, sdpParserQ, sdpParserR, sdpParserS, sdpParserT, sdpParserU, sdpParserV, sdpParserW, sdpParserX, sdpParserY, sdpParserZ:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2060)
			p.Alpha()
		}

	case sdpParserZERO, sdpParserONE, sdpParserTWO, sdpParserTHREE, sdpParserFOUR, sdpParserFIVE, sdpParserSIX, sdpParserSEVEN, sdpParserEIGHT, sdpParserNINE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2061)
			p.Digit()
		}

	case sdpParserDASH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2062)
			p.Match(sdpParserDASH)
		}

	case sdpParserPERIOD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2063)
			p.Match(sdpParserPERIOD)
		}

	case sdpParserUNDERSCORE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2064)
			p.Match(sdpParserUNDERSCORE)
		}

	case sdpParserTILDE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2065)
			p.Match(sdpParserTILDE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IReservedContext is an interface to support dynamic dispatch.
type IReservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReservedContext differentiates from other interfaces.
	IsReservedContext()
}

type ReservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReservedContext() *ReservedContext {
	var p = new(ReservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_reserved
	return p
}

func (*ReservedContext) IsReservedContext() {}

func NewReservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReservedContext {
	var p = new(ReservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_reserved

	return p
}

func (s *ReservedContext) GetParser() antlr.Parser { return s.parser }

func (s *ReservedContext) Gen_delims() IGen_delimsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGen_delimsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGen_delimsContext)
}

func (s *ReservedContext) Sub_delims() ISub_delimsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISub_delimsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISub_delimsContext)
}

func (s *ReservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterReserved(s)
	}
}

func (s *ReservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitReserved(s)
	}
}

func (p *sdpParser) Reserved() (localctx IReservedContext) {
	localctx = NewReservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, sdpParserRULE_reserved)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2070)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case sdpParserHASH, sdpParserSLASH, sdpParserCOLON, sdpParserQUESTION, sdpParserAT, sdpParserLEFT_BRACE, sdpParserRIGHT_BRACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2068)
			p.Gen_delims()
		}

	case sdpParserEXCLAMATION, sdpParserDOLLAR, sdpParserAMPERSAND, sdpParserAPOSTROPHE, sdpParserLEFT_PAREN, sdpParserRIGHT_PAREN, sdpParserASTERISK, sdpParserPLUS, sdpParserCOMMA, sdpParserSEMICOLON, sdpParserEQUALS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2069)
			p.Sub_delims()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGen_delimsContext is an interface to support dynamic dispatch.
type IGen_delimsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGen_delimsContext differentiates from other interfaces.
	IsGen_delimsContext()
}

type Gen_delimsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGen_delimsContext() *Gen_delimsContext {
	var p = new(Gen_delimsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_gen_delims
	return p
}

func (*Gen_delimsContext) IsGen_delimsContext() {}

func NewGen_delimsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Gen_delimsContext {
	var p = new(Gen_delimsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_gen_delims

	return p
}

func (s *Gen_delimsContext) GetParser() antlr.Parser { return s.parser }

func (s *Gen_delimsContext) COLON() antlr.TerminalNode {
	return s.GetToken(sdpParserCOLON, 0)
}

func (s *Gen_delimsContext) SLASH() antlr.TerminalNode {
	return s.GetToken(sdpParserSLASH, 0)
}

func (s *Gen_delimsContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(sdpParserQUESTION, 0)
}

func (s *Gen_delimsContext) HASH() antlr.TerminalNode {
	return s.GetToken(sdpParserHASH, 0)
}

func (s *Gen_delimsContext) LEFT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_BRACE, 0)
}

func (s *Gen_delimsContext) RIGHT_BRACE() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_BRACE, 0)
}

func (s *Gen_delimsContext) AT() antlr.TerminalNode {
	return s.GetToken(sdpParserAT, 0)
}

func (s *Gen_delimsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Gen_delimsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Gen_delimsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterGen_delims(s)
	}
}

func (s *Gen_delimsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitGen_delims(s)
	}
}

func (p *sdpParser) Gen_delims() (localctx IGen_delimsContext) {
	localctx = NewGen_delimsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, sdpParserRULE_gen_delims)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2072)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<sdpParserHASH)|(1<<sdpParserSLASH)|(1<<sdpParserCOLON))) != 0) || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(sdpParserQUESTION-35))|(1<<(sdpParserAT-35))|(1<<(sdpParserLEFT_BRACE-35))|(1<<(sdpParserRIGHT_BRACE-35)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISub_delimsContext is an interface to support dynamic dispatch.
type ISub_delimsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSub_delimsContext differentiates from other interfaces.
	IsSub_delimsContext()
}

type Sub_delimsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySub_delimsContext() *Sub_delimsContext {
	var p = new(Sub_delimsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = sdpParserRULE_sub_delims
	return p
}

func (*Sub_delimsContext) IsSub_delimsContext() {}

func NewSub_delimsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sub_delimsContext {
	var p = new(Sub_delimsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = sdpParserRULE_sub_delims

	return p
}

func (s *Sub_delimsContext) GetParser() antlr.Parser { return s.parser }

func (s *Sub_delimsContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(sdpParserEXCLAMATION, 0)
}

func (s *Sub_delimsContext) DOLLAR() antlr.TerminalNode {
	return s.GetToken(sdpParserDOLLAR, 0)
}

func (s *Sub_delimsContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(sdpParserAMPERSAND, 0)
}

func (s *Sub_delimsContext) APOSTROPHE() antlr.TerminalNode {
	return s.GetToken(sdpParserAPOSTROPHE, 0)
}

func (s *Sub_delimsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserLEFT_PAREN, 0)
}

func (s *Sub_delimsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(sdpParserRIGHT_PAREN, 0)
}

func (s *Sub_delimsContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(sdpParserASTERISK, 0)
}

func (s *Sub_delimsContext) PLUS() antlr.TerminalNode {
	return s.GetToken(sdpParserPLUS, 0)
}

func (s *Sub_delimsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(sdpParserCOMMA, 0)
}

func (s *Sub_delimsContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(sdpParserSEMICOLON, 0)
}

func (s *Sub_delimsContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(sdpParserEQUALS, 0)
}

func (s *Sub_delimsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sub_delimsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sub_delimsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.EnterSub_delims(s)
	}
}

func (s *Sub_delimsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(sdpListener); ok {
		listenerT.ExitSub_delims(s)
	}
}

func (p *sdpParser) Sub_delims() (localctx ISub_delimsContext) {
	localctx = NewSub_delimsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, sdpParserRULE_sub_delims)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2074)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-5)&-(0x1f+1)) == 0 && ((1<<uint((_la-5)))&((1<<(sdpParserEXCLAMATION-5))|(1<<(sdpParserDOLLAR-5))|(1<<(sdpParserAMPERSAND-5))|(1<<(sdpParserAPOSTROPHE-5))|(1<<(sdpParserLEFT_PAREN-5))|(1<<(sdpParserRIGHT_PAREN-5))|(1<<(sdpParserASTERISK-5))|(1<<(sdpParserPLUS-5))|(1<<(sdpParserCOMMA-5))|(1<<(sdpParserSEMICOLON-5))|(1<<(sdpParserEQUALS-5)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}
